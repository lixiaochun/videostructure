package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class ChannelInfoForMonitor implements org.apache.thrift.TBase<ChannelInfoForMonitor, ChannelInfoForMonitor._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelInfoForMonitor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelInfoForMonitor");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_addr", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_port", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_CODETYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_codetype", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TODAY_CAPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("today_capcount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_CAPCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("total_capcount", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PERSON_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("person_count", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField LOSTFRAMERATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lostframerate", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField RECONNCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("reconncount", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField THROWAWAY_FIELD_DESC = new org.apache.thrift.protocol.TField("throwaway", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CHANNEL_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_status", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LASTCAPTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastcaptime", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CAP_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cap_stat", org.apache.thrift.protocol.TType.I32, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelInfoForMonitorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelInfoForMonitorTupleSchemeFactory();

  public java.lang.String uuid; // required
  public java.lang.String channel_name; // required
  public java.lang.String channel_addr; // required
  public int channel_port; // required
  public int protocol; // required
  public int channel_codetype; // required
  public int today_capcount; // required
  public int total_capcount; // required
  public int person_count; // required
  public double lostframerate; // required
  public int reconncount; // required
  public int throwaway; // required
  public int channel_status; // required
  public long lastcaptime; // required
  public int cap_stat; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    CHANNEL_NAME((short)2, "channel_name"),
    CHANNEL_ADDR((short)3, "channel_addr"),
    CHANNEL_PORT((short)4, "channel_port"),
    PROTOCOL((short)5, "protocol"),
    CHANNEL_CODETYPE((short)6, "channel_codetype"),
    TODAY_CAPCOUNT((short)7, "today_capcount"),
    TOTAL_CAPCOUNT((short)8, "total_capcount"),
    PERSON_COUNT((short)9, "person_count"),
    LOSTFRAMERATE((short)10, "lostframerate"),
    RECONNCOUNT((short)11, "reconncount"),
    THROWAWAY((short)12, "throwaway"),
    CHANNEL_STATUS((short)13, "channel_status"),
    LASTCAPTIME((short)14, "lastcaptime"),
    CAP_STAT((short)15, "cap_stat");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 3: // CHANNEL_ADDR
          return CHANNEL_ADDR;
        case 4: // CHANNEL_PORT
          return CHANNEL_PORT;
        case 5: // PROTOCOL
          return PROTOCOL;
        case 6: // CHANNEL_CODETYPE
          return CHANNEL_CODETYPE;
        case 7: // TODAY_CAPCOUNT
          return TODAY_CAPCOUNT;
        case 8: // TOTAL_CAPCOUNT
          return TOTAL_CAPCOUNT;
        case 9: // PERSON_COUNT
          return PERSON_COUNT;
        case 10: // LOSTFRAMERATE
          return LOSTFRAMERATE;
        case 11: // RECONNCOUNT
          return RECONNCOUNT;
        case 12: // THROWAWAY
          return THROWAWAY;
        case 13: // CHANNEL_STATUS
          return CHANNEL_STATUS;
        case 14: // LASTCAPTIME
          return LASTCAPTIME;
        case 15: // CAP_STAT
          return CAP_STAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANNEL_PORT_ISSET_ID = 0;
  private static final int __PROTOCOL_ISSET_ID = 1;
  private static final int __CHANNEL_CODETYPE_ISSET_ID = 2;
  private static final int __TODAY_CAPCOUNT_ISSET_ID = 3;
  private static final int __TOTAL_CAPCOUNT_ISSET_ID = 4;
  private static final int __PERSON_COUNT_ISSET_ID = 5;
  private static final int __LOSTFRAMERATE_ISSET_ID = 6;
  private static final int __RECONNCOUNT_ISSET_ID = 7;
  private static final int __THROWAWAY_ISSET_ID = 8;
  private static final int __CHANNEL_STATUS_ISSET_ID = 9;
  private static final int __LASTCAPTIME_ISSET_ID = 10;
  private static final int __CAP_STAT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channel_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ADDR, new org.apache.thrift.meta_data.FieldMetaData("channel_addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_PORT, new org.apache.thrift.meta_data.FieldMetaData("channel_port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_CODETYPE, new org.apache.thrift.meta_data.FieldMetaData("channel_codetype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TODAY_CAPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("today_capcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_CAPCOUNT, new org.apache.thrift.meta_data.FieldMetaData("total_capcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PERSON_COUNT, new org.apache.thrift.meta_data.FieldMetaData("person_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOSTFRAMERATE, new org.apache.thrift.meta_data.FieldMetaData("lostframerate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECONNCOUNT, new org.apache.thrift.meta_data.FieldMetaData("reconncount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.THROWAWAY, new org.apache.thrift.meta_data.FieldMetaData("throwaway", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_STATUS, new org.apache.thrift.meta_data.FieldMetaData("channel_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTCAPTIME, new org.apache.thrift.meta_data.FieldMetaData("lastcaptime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CAP_STAT, new org.apache.thrift.meta_data.FieldMetaData("cap_stat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelInfoForMonitor.class, metaDataMap);
  }

  public ChannelInfoForMonitor() {
  }

  public ChannelInfoForMonitor(
    java.lang.String uuid,
    java.lang.String channel_name,
    java.lang.String channel_addr,
    int channel_port,
    int protocol,
    int channel_codetype,
    int today_capcount,
    int total_capcount,
    int person_count,
    double lostframerate,
    int reconncount,
    int throwaway,
    int channel_status,
    long lastcaptime,
    int cap_stat)
  {
    this();
    this.uuid = uuid;
    this.channel_name = channel_name;
    this.channel_addr = channel_addr;
    this.channel_port = channel_port;
    setChannel_portIsSet(true);
    this.protocol = protocol;
    setProtocolIsSet(true);
    this.channel_codetype = channel_codetype;
    setChannel_codetypeIsSet(true);
    this.today_capcount = today_capcount;
    setToday_capcountIsSet(true);
    this.total_capcount = total_capcount;
    setTotal_capcountIsSet(true);
    this.person_count = person_count;
    setPerson_countIsSet(true);
    this.lostframerate = lostframerate;
    setLostframerateIsSet(true);
    this.reconncount = reconncount;
    setReconncountIsSet(true);
    this.throwaway = throwaway;
    setThrowawayIsSet(true);
    this.channel_status = channel_status;
    setChannel_statusIsSet(true);
    this.lastcaptime = lastcaptime;
    setLastcaptimeIsSet(true);
    this.cap_stat = cap_stat;
    setCap_statIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelInfoForMonitor(ChannelInfoForMonitor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetChannel_name()) {
      this.channel_name = other.channel_name;
    }
    if (other.isSetChannel_addr()) {
      this.channel_addr = other.channel_addr;
    }
    this.channel_port = other.channel_port;
    this.protocol = other.protocol;
    this.channel_codetype = other.channel_codetype;
    this.today_capcount = other.today_capcount;
    this.total_capcount = other.total_capcount;
    this.person_count = other.person_count;
    this.lostframerate = other.lostframerate;
    this.reconncount = other.reconncount;
    this.throwaway = other.throwaway;
    this.channel_status = other.channel_status;
    this.lastcaptime = other.lastcaptime;
    this.cap_stat = other.cap_stat;
  }

  public ChannelInfoForMonitor deepCopy() {
    return new ChannelInfoForMonitor(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.channel_name = null;
    this.channel_addr = null;
    setChannel_portIsSet(false);
    this.channel_port = 0;
    setProtocolIsSet(false);
    this.protocol = 0;
    setChannel_codetypeIsSet(false);
    this.channel_codetype = 0;
    setToday_capcountIsSet(false);
    this.today_capcount = 0;
    setTotal_capcountIsSet(false);
    this.total_capcount = 0;
    setPerson_countIsSet(false);
    this.person_count = 0;
    setLostframerateIsSet(false);
    this.lostframerate = 0.0;
    setReconncountIsSet(false);
    this.reconncount = 0;
    setThrowawayIsSet(false);
    this.throwaway = 0;
    setChannel_statusIsSet(false);
    this.channel_status = 0;
    setLastcaptimeIsSet(false);
    this.lastcaptime = 0;
    setCap_statIsSet(false);
    this.cap_stat = 0;
  }

  public java.lang.String getUuid() {
    return this.uuid;
  }

  public ChannelInfoForMonitor setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public java.lang.String getChannel_name() {
    return this.channel_name;
  }

  public ChannelInfoForMonitor setChannel_name(java.lang.String channel_name) {
    this.channel_name = channel_name;
    return this;
  }

  public void unsetChannel_name() {
    this.channel_name = null;
  }

  /** Returns true if field channel_name is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_name() {
    return this.channel_name != null;
  }

  public void setChannel_nameIsSet(boolean value) {
    if (!value) {
      this.channel_name = null;
    }
  }

  public java.lang.String getChannel_addr() {
    return this.channel_addr;
  }

  public ChannelInfoForMonitor setChannel_addr(java.lang.String channel_addr) {
    this.channel_addr = channel_addr;
    return this;
  }

  public void unsetChannel_addr() {
    this.channel_addr = null;
  }

  /** Returns true if field channel_addr is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_addr() {
    return this.channel_addr != null;
  }

  public void setChannel_addrIsSet(boolean value) {
    if (!value) {
      this.channel_addr = null;
    }
  }

  public int getChannel_port() {
    return this.channel_port;
  }

  public ChannelInfoForMonitor setChannel_port(int channel_port) {
    this.channel_port = channel_port;
    setChannel_portIsSet(true);
    return this;
  }

  public void unsetChannel_port() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID);
  }

  /** Returns true if field channel_port is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_port() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID);
  }

  public void setChannel_portIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID, value);
  }

  public int getProtocol() {
    return this.protocol;
  }

  public ChannelInfoForMonitor setProtocol(int protocol) {
    this.protocol = protocol;
    setProtocolIsSet(true);
    return this;
  }

  public void unsetProtocol() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROTOCOL_ISSET_ID);
  }

  /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROTOCOL_ISSET_ID);
  }

  public void setProtocolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROTOCOL_ISSET_ID, value);
  }

  public int getChannel_codetype() {
    return this.channel_codetype;
  }

  public ChannelInfoForMonitor setChannel_codetype(int channel_codetype) {
    this.channel_codetype = channel_codetype;
    setChannel_codetypeIsSet(true);
    return this;
  }

  public void unsetChannel_codetype() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_CODETYPE_ISSET_ID);
  }

  /** Returns true if field channel_codetype is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_codetype() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_CODETYPE_ISSET_ID);
  }

  public void setChannel_codetypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_CODETYPE_ISSET_ID, value);
  }

  public int getToday_capcount() {
    return this.today_capcount;
  }

  public ChannelInfoForMonitor setToday_capcount(int today_capcount) {
    this.today_capcount = today_capcount;
    setToday_capcountIsSet(true);
    return this;
  }

  public void unsetToday_capcount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TODAY_CAPCOUNT_ISSET_ID);
  }

  /** Returns true if field today_capcount is set (has been assigned a value) and false otherwise */
  public boolean isSetToday_capcount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TODAY_CAPCOUNT_ISSET_ID);
  }

  public void setToday_capcountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TODAY_CAPCOUNT_ISSET_ID, value);
  }

  public int getTotal_capcount() {
    return this.total_capcount;
  }

  public ChannelInfoForMonitor setTotal_capcount(int total_capcount) {
    this.total_capcount = total_capcount;
    setTotal_capcountIsSet(true);
    return this;
  }

  public void unsetTotal_capcount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_CAPCOUNT_ISSET_ID);
  }

  /** Returns true if field total_capcount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_capcount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_CAPCOUNT_ISSET_ID);
  }

  public void setTotal_capcountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_CAPCOUNT_ISSET_ID, value);
  }

  public int getPerson_count() {
    return this.person_count;
  }

  public ChannelInfoForMonitor setPerson_count(int person_count) {
    this.person_count = person_count;
    setPerson_countIsSet(true);
    return this;
  }

  public void unsetPerson_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PERSON_COUNT_ISSET_ID);
  }

  /** Returns true if field person_count is set (has been assigned a value) and false otherwise */
  public boolean isSetPerson_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PERSON_COUNT_ISSET_ID);
  }

  public void setPerson_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PERSON_COUNT_ISSET_ID, value);
  }

  public double getLostframerate() {
    return this.lostframerate;
  }

  public ChannelInfoForMonitor setLostframerate(double lostframerate) {
    this.lostframerate = lostframerate;
    setLostframerateIsSet(true);
    return this;
  }

  public void unsetLostframerate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOSTFRAMERATE_ISSET_ID);
  }

  /** Returns true if field lostframerate is set (has been assigned a value) and false otherwise */
  public boolean isSetLostframerate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOSTFRAMERATE_ISSET_ID);
  }

  public void setLostframerateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOSTFRAMERATE_ISSET_ID, value);
  }

  public int getReconncount() {
    return this.reconncount;
  }

  public ChannelInfoForMonitor setReconncount(int reconncount) {
    this.reconncount = reconncount;
    setReconncountIsSet(true);
    return this;
  }

  public void unsetReconncount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECONNCOUNT_ISSET_ID);
  }

  /** Returns true if field reconncount is set (has been assigned a value) and false otherwise */
  public boolean isSetReconncount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECONNCOUNT_ISSET_ID);
  }

  public void setReconncountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECONNCOUNT_ISSET_ID, value);
  }

  public int getThrowaway() {
    return this.throwaway;
  }

  public ChannelInfoForMonitor setThrowaway(int throwaway) {
    this.throwaway = throwaway;
    setThrowawayIsSet(true);
    return this;
  }

  public void unsetThrowaway() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THROWAWAY_ISSET_ID);
  }

  /** Returns true if field throwaway is set (has been assigned a value) and false otherwise */
  public boolean isSetThrowaway() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THROWAWAY_ISSET_ID);
  }

  public void setThrowawayIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THROWAWAY_ISSET_ID, value);
  }

  public int getChannel_status() {
    return this.channel_status;
  }

  public ChannelInfoForMonitor setChannel_status(int channel_status) {
    this.channel_status = channel_status;
    setChannel_statusIsSet(true);
    return this;
  }

  public void unsetChannel_status() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_STATUS_ISSET_ID);
  }

  /** Returns true if field channel_status is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_status() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_STATUS_ISSET_ID);
  }

  public void setChannel_statusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_STATUS_ISSET_ID, value);
  }

  public long getLastcaptime() {
    return this.lastcaptime;
  }

  public ChannelInfoForMonitor setLastcaptime(long lastcaptime) {
    this.lastcaptime = lastcaptime;
    setLastcaptimeIsSet(true);
    return this;
  }

  public void unsetLastcaptime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTCAPTIME_ISSET_ID);
  }

  /** Returns true if field lastcaptime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastcaptime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTCAPTIME_ISSET_ID);
  }

  public void setLastcaptimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTCAPTIME_ISSET_ID, value);
  }

  public int getCap_stat() {
    return this.cap_stat;
  }

  public ChannelInfoForMonitor setCap_stat(int cap_stat) {
    this.cap_stat = cap_stat;
    setCap_statIsSet(true);
    return this;
  }

  public void unsetCap_stat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAP_STAT_ISSET_ID);
  }

  /** Returns true if field cap_stat is set (has been assigned a value) and false otherwise */
  public boolean isSetCap_stat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAP_STAT_ISSET_ID);
  }

  public void setCap_statIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAP_STAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannel_name();
      } else {
        setChannel_name((java.lang.String)value);
      }
      break;

    case CHANNEL_ADDR:
      if (value == null) {
        unsetChannel_addr();
      } else {
        setChannel_addr((java.lang.String)value);
      }
      break;

    case CHANNEL_PORT:
      if (value == null) {
        unsetChannel_port();
      } else {
        setChannel_port((java.lang.Integer)value);
      }
      break;

    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((java.lang.Integer)value);
      }
      break;

    case CHANNEL_CODETYPE:
      if (value == null) {
        unsetChannel_codetype();
      } else {
        setChannel_codetype((java.lang.Integer)value);
      }
      break;

    case TODAY_CAPCOUNT:
      if (value == null) {
        unsetToday_capcount();
      } else {
        setToday_capcount((java.lang.Integer)value);
      }
      break;

    case TOTAL_CAPCOUNT:
      if (value == null) {
        unsetTotal_capcount();
      } else {
        setTotal_capcount((java.lang.Integer)value);
      }
      break;

    case PERSON_COUNT:
      if (value == null) {
        unsetPerson_count();
      } else {
        setPerson_count((java.lang.Integer)value);
      }
      break;

    case LOSTFRAMERATE:
      if (value == null) {
        unsetLostframerate();
      } else {
        setLostframerate((java.lang.Double)value);
      }
      break;

    case RECONNCOUNT:
      if (value == null) {
        unsetReconncount();
      } else {
        setReconncount((java.lang.Integer)value);
      }
      break;

    case THROWAWAY:
      if (value == null) {
        unsetThrowaway();
      } else {
        setThrowaway((java.lang.Integer)value);
      }
      break;

    case CHANNEL_STATUS:
      if (value == null) {
        unsetChannel_status();
      } else {
        setChannel_status((java.lang.Integer)value);
      }
      break;

    case LASTCAPTIME:
      if (value == null) {
        unsetLastcaptime();
      } else {
        setLastcaptime((java.lang.Long)value);
      }
      break;

    case CAP_STAT:
      if (value == null) {
        unsetCap_stat();
      } else {
        setCap_stat((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case CHANNEL_NAME:
      return getChannel_name();

    case CHANNEL_ADDR:
      return getChannel_addr();

    case CHANNEL_PORT:
      return getChannel_port();

    case PROTOCOL:
      return getProtocol();

    case CHANNEL_CODETYPE:
      return getChannel_codetype();

    case TODAY_CAPCOUNT:
      return getToday_capcount();

    case TOTAL_CAPCOUNT:
      return getTotal_capcount();

    case PERSON_COUNT:
      return getPerson_count();

    case LOSTFRAMERATE:
      return getLostframerate();

    case RECONNCOUNT:
      return getReconncount();

    case THROWAWAY:
      return getThrowaway();

    case CHANNEL_STATUS:
      return getChannel_status();

    case LASTCAPTIME:
      return getLastcaptime();

    case CAP_STAT:
      return getCap_stat();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case CHANNEL_NAME:
      return isSetChannel_name();
    case CHANNEL_ADDR:
      return isSetChannel_addr();
    case CHANNEL_PORT:
      return isSetChannel_port();
    case PROTOCOL:
      return isSetProtocol();
    case CHANNEL_CODETYPE:
      return isSetChannel_codetype();
    case TODAY_CAPCOUNT:
      return isSetToday_capcount();
    case TOTAL_CAPCOUNT:
      return isSetTotal_capcount();
    case PERSON_COUNT:
      return isSetPerson_count();
    case LOSTFRAMERATE:
      return isSetLostframerate();
    case RECONNCOUNT:
      return isSetReconncount();
    case THROWAWAY:
      return isSetThrowaway();
    case CHANNEL_STATUS:
      return isSetChannel_status();
    case LASTCAPTIME:
      return isSetLastcaptime();
    case CAP_STAT:
      return isSetCap_stat();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelInfoForMonitor)
      return this.equals((ChannelInfoForMonitor)that);
    return false;
  }

  public boolean equals(ChannelInfoForMonitor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_channel_name = true && this.isSetChannel_name();
    boolean that_present_channel_name = true && that.isSetChannel_name();
    if (this_present_channel_name || that_present_channel_name) {
      if (!(this_present_channel_name && that_present_channel_name))
        return false;
      if (!this.channel_name.equals(that.channel_name))
        return false;
    }

    boolean this_present_channel_addr = true && this.isSetChannel_addr();
    boolean that_present_channel_addr = true && that.isSetChannel_addr();
    if (this_present_channel_addr || that_present_channel_addr) {
      if (!(this_present_channel_addr && that_present_channel_addr))
        return false;
      if (!this.channel_addr.equals(that.channel_addr))
        return false;
    }

    boolean this_present_channel_port = true;
    boolean that_present_channel_port = true;
    if (this_present_channel_port || that_present_channel_port) {
      if (!(this_present_channel_port && that_present_channel_port))
        return false;
      if (this.channel_port != that.channel_port)
        return false;
    }

    boolean this_present_protocol = true;
    boolean that_present_protocol = true;
    if (this_present_protocol || that_present_protocol) {
      if (!(this_present_protocol && that_present_protocol))
        return false;
      if (this.protocol != that.protocol)
        return false;
    }

    boolean this_present_channel_codetype = true;
    boolean that_present_channel_codetype = true;
    if (this_present_channel_codetype || that_present_channel_codetype) {
      if (!(this_present_channel_codetype && that_present_channel_codetype))
        return false;
      if (this.channel_codetype != that.channel_codetype)
        return false;
    }

    boolean this_present_today_capcount = true;
    boolean that_present_today_capcount = true;
    if (this_present_today_capcount || that_present_today_capcount) {
      if (!(this_present_today_capcount && that_present_today_capcount))
        return false;
      if (this.today_capcount != that.today_capcount)
        return false;
    }

    boolean this_present_total_capcount = true;
    boolean that_present_total_capcount = true;
    if (this_present_total_capcount || that_present_total_capcount) {
      if (!(this_present_total_capcount && that_present_total_capcount))
        return false;
      if (this.total_capcount != that.total_capcount)
        return false;
    }

    boolean this_present_person_count = true;
    boolean that_present_person_count = true;
    if (this_present_person_count || that_present_person_count) {
      if (!(this_present_person_count && that_present_person_count))
        return false;
      if (this.person_count != that.person_count)
        return false;
    }

    boolean this_present_lostframerate = true;
    boolean that_present_lostframerate = true;
    if (this_present_lostframerate || that_present_lostframerate) {
      if (!(this_present_lostframerate && that_present_lostframerate))
        return false;
      if (this.lostframerate != that.lostframerate)
        return false;
    }

    boolean this_present_reconncount = true;
    boolean that_present_reconncount = true;
    if (this_present_reconncount || that_present_reconncount) {
      if (!(this_present_reconncount && that_present_reconncount))
        return false;
      if (this.reconncount != that.reconncount)
        return false;
    }

    boolean this_present_throwaway = true;
    boolean that_present_throwaway = true;
    if (this_present_throwaway || that_present_throwaway) {
      if (!(this_present_throwaway && that_present_throwaway))
        return false;
      if (this.throwaway != that.throwaway)
        return false;
    }

    boolean this_present_channel_status = true;
    boolean that_present_channel_status = true;
    if (this_present_channel_status || that_present_channel_status) {
      if (!(this_present_channel_status && that_present_channel_status))
        return false;
      if (this.channel_status != that.channel_status)
        return false;
    }

    boolean this_present_lastcaptime = true;
    boolean that_present_lastcaptime = true;
    if (this_present_lastcaptime || that_present_lastcaptime) {
      if (!(this_present_lastcaptime && that_present_lastcaptime))
        return false;
      if (this.lastcaptime != that.lastcaptime)
        return false;
    }

    boolean this_present_cap_stat = true;
    boolean that_present_cap_stat = true;
    if (this_present_cap_stat || that_present_cap_stat) {
      if (!(this_present_cap_stat && that_present_cap_stat))
        return false;
      if (this.cap_stat != that.cap_stat)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_name()) ? 131071 : 524287);
    if (isSetChannel_name())
      hashCode = hashCode * 8191 + channel_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_addr()) ? 131071 : 524287);
    if (isSetChannel_addr())
      hashCode = hashCode * 8191 + channel_addr.hashCode();

    hashCode = hashCode * 8191 + channel_port;

    hashCode = hashCode * 8191 + protocol;

    hashCode = hashCode * 8191 + channel_codetype;

    hashCode = hashCode * 8191 + today_capcount;

    hashCode = hashCode * 8191 + total_capcount;

    hashCode = hashCode * 8191 + person_count;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lostframerate);

    hashCode = hashCode * 8191 + reconncount;

    hashCode = hashCode * 8191 + throwaway;

    hashCode = hashCode * 8191 + channel_status;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastcaptime);

    hashCode = hashCode * 8191 + cap_stat;

    return hashCode;
  }

  @Override
  public int compareTo(ChannelInfoForMonitor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_name()).compareTo(other.isSetChannel_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_name, other.channel_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_addr()).compareTo(other.isSetChannel_addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_addr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_addr, other.channel_addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_port()).compareTo(other.isSetChannel_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_port, other.channel_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_codetype()).compareTo(other.isSetChannel_codetype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_codetype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_codetype, other.channel_codetype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToday_capcount()).compareTo(other.isSetToday_capcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToday_capcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.today_capcount, other.today_capcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_capcount()).compareTo(other.isSetTotal_capcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_capcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_capcount, other.total_capcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerson_count()).compareTo(other.isSetPerson_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person_count, other.person_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLostframerate()).compareTo(other.isSetLostframerate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLostframerate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lostframerate, other.lostframerate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReconncount()).compareTo(other.isSetReconncount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReconncount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reconncount, other.reconncount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThrowaway()).compareTo(other.isSetThrowaway());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThrowaway()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.throwaway, other.throwaway);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_status()).compareTo(other.isSetChannel_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_status, other.channel_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastcaptime()).compareTo(other.isSetLastcaptime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastcaptime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastcaptime, other.lastcaptime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCap_stat()).compareTo(other.isSetCap_stat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCap_stat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cap_stat, other.cap_stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelInfoForMonitor(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_name:");
    if (this.channel_name == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_addr:");
    if (this.channel_addr == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_port:");
    sb.append(this.channel_port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocol:");
    sb.append(this.protocol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_codetype:");
    sb.append(this.channel_codetype);
    first = false;
    if (!first) sb.append(", ");
    sb.append("today_capcount:");
    sb.append(this.today_capcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_capcount:");
    sb.append(this.total_capcount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("person_count:");
    sb.append(this.person_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lostframerate:");
    sb.append(this.lostframerate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("reconncount:");
    sb.append(this.reconncount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("throwaway:");
    sb.append(this.throwaway);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_status:");
    sb.append(this.channel_status);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastcaptime:");
    sb.append(this.lastcaptime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cap_stat:");
    sb.append(this.cap_stat);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelInfoForMonitorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoForMonitorStandardScheme getScheme() {
      return new ChannelInfoForMonitorStandardScheme();
    }
  }

  private static class ChannelInfoForMonitorStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelInfoForMonitor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelInfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_name = iprot.readString();
              struct.setChannel_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_addr = iprot.readString();
              struct.setChannel_addrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_port = iprot.readI32();
              struct.setChannel_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol = iprot.readI32();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_CODETYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_codetype = iprot.readI32();
              struct.setChannel_codetypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TODAY_CAPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.today_capcount = iprot.readI32();
              struct.setToday_capcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_CAPCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.total_capcount = iprot.readI32();
              struct.setTotal_capcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PERSON_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.person_count = iprot.readI32();
              struct.setPerson_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOSTFRAMERATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lostframerate = iprot.readDouble();
              struct.setLostframerateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECONNCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.reconncount = iprot.readI32();
              struct.setReconncountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // THROWAWAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.throwaway = iprot.readI32();
              struct.setThrowawayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CHANNEL_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_status = iprot.readI32();
              struct.setChannel_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LASTCAPTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastcaptime = iprot.readI64();
              struct.setLastcaptimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CAP_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cap_stat = iprot.readI32();
              struct.setCap_statIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelInfoForMonitor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.channel_name != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channel_name);
        oprot.writeFieldEnd();
      }
      if (struct.channel_addr != null) {
        oprot.writeFieldBegin(CHANNEL_ADDR_FIELD_DESC);
        oprot.writeString(struct.channel_addr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_PORT_FIELD_DESC);
      oprot.writeI32(struct.channel_port);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
      oprot.writeI32(struct.protocol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_CODETYPE_FIELD_DESC);
      oprot.writeI32(struct.channel_codetype);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TODAY_CAPCOUNT_FIELD_DESC);
      oprot.writeI32(struct.today_capcount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_CAPCOUNT_FIELD_DESC);
      oprot.writeI32(struct.total_capcount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERSON_COUNT_FIELD_DESC);
      oprot.writeI32(struct.person_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOSTFRAMERATE_FIELD_DESC);
      oprot.writeDouble(struct.lostframerate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RECONNCOUNT_FIELD_DESC);
      oprot.writeI32(struct.reconncount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THROWAWAY_FIELD_DESC);
      oprot.writeI32(struct.throwaway);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_STATUS_FIELD_DESC);
      oprot.writeI32(struct.channel_status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LASTCAPTIME_FIELD_DESC);
      oprot.writeI64(struct.lastcaptime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_STAT_FIELD_DESC);
      oprot.writeI32(struct.cap_stat);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelInfoForMonitorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelInfoForMonitorTupleScheme getScheme() {
      return new ChannelInfoForMonitorTupleScheme();
    }
  }

  private static class ChannelInfoForMonitorTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelInfoForMonitor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelInfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetChannel_name()) {
        optionals.set(1);
      }
      if (struct.isSetChannel_addr()) {
        optionals.set(2);
      }
      if (struct.isSetChannel_port()) {
        optionals.set(3);
      }
      if (struct.isSetProtocol()) {
        optionals.set(4);
      }
      if (struct.isSetChannel_codetype()) {
        optionals.set(5);
      }
      if (struct.isSetToday_capcount()) {
        optionals.set(6);
      }
      if (struct.isSetTotal_capcount()) {
        optionals.set(7);
      }
      if (struct.isSetPerson_count()) {
        optionals.set(8);
      }
      if (struct.isSetLostframerate()) {
        optionals.set(9);
      }
      if (struct.isSetReconncount()) {
        optionals.set(10);
      }
      if (struct.isSetThrowaway()) {
        optionals.set(11);
      }
      if (struct.isSetChannel_status()) {
        optionals.set(12);
      }
      if (struct.isSetLastcaptime()) {
        optionals.set(13);
      }
      if (struct.isSetCap_stat()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetChannel_name()) {
        oprot.writeString(struct.channel_name);
      }
      if (struct.isSetChannel_addr()) {
        oprot.writeString(struct.channel_addr);
      }
      if (struct.isSetChannel_port()) {
        oprot.writeI32(struct.channel_port);
      }
      if (struct.isSetProtocol()) {
        oprot.writeI32(struct.protocol);
      }
      if (struct.isSetChannel_codetype()) {
        oprot.writeI32(struct.channel_codetype);
      }
      if (struct.isSetToday_capcount()) {
        oprot.writeI32(struct.today_capcount);
      }
      if (struct.isSetTotal_capcount()) {
        oprot.writeI32(struct.total_capcount);
      }
      if (struct.isSetPerson_count()) {
        oprot.writeI32(struct.person_count);
      }
      if (struct.isSetLostframerate()) {
        oprot.writeDouble(struct.lostframerate);
      }
      if (struct.isSetReconncount()) {
        oprot.writeI32(struct.reconncount);
      }
      if (struct.isSetThrowaway()) {
        oprot.writeI32(struct.throwaway);
      }
      if (struct.isSetChannel_status()) {
        oprot.writeI32(struct.channel_status);
      }
      if (struct.isSetLastcaptime()) {
        oprot.writeI64(struct.lastcaptime);
      }
      if (struct.isSetCap_stat()) {
        oprot.writeI32(struct.cap_stat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelInfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channel_name = iprot.readString();
        struct.setChannel_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channel_addr = iprot.readString();
        struct.setChannel_addrIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel_port = iprot.readI32();
        struct.setChannel_portIsSet(true);
      }
      if (incoming.get(4)) {
        struct.protocol = iprot.readI32();
        struct.setProtocolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.channel_codetype = iprot.readI32();
        struct.setChannel_codetypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.today_capcount = iprot.readI32();
        struct.setToday_capcountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.total_capcount = iprot.readI32();
        struct.setTotal_capcountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.person_count = iprot.readI32();
        struct.setPerson_countIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lostframerate = iprot.readDouble();
        struct.setLostframerateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reconncount = iprot.readI32();
        struct.setReconncountIsSet(true);
      }
      if (incoming.get(11)) {
        struct.throwaway = iprot.readI32();
        struct.setThrowawayIsSet(true);
      }
      if (incoming.get(12)) {
        struct.channel_status = iprot.readI32();
        struct.setChannel_statusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastcaptime = iprot.readI64();
        struct.setLastcaptimeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cap_stat = iprot.readI32();
        struct.setCap_statIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


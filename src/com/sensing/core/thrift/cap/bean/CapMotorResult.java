package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class CapMotorResult implements org.apache.thrift.TBase<CapMotorResult, CapMotorResult._Fields>, java.io.Serializable, Cloneable, Comparable<CapMotorResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CapMotorResult");

  private static final org.apache.thrift.protocol.TField PLATE_LICENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("plateLicence", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CAR_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("carColor", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORIENTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orientation", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PLATE_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("plateColor", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("carType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BRAND_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("brandType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BRAND_MAIN_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("brandMainTag", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BRAND_SUB_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("brandSubTag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField BRAND_YEAR_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("brandYearTag", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CAR_MARKER_MOT_FIELD_DESC = new org.apache.thrift.protocol.TField("carMarkerMot", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CAR_MARKER_TISSUEBOX_FIELD_DESC = new org.apache.thrift.protocol.TField("carMarkerTissuebox", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CAR_MARKER_PENDANT_FIELD_DESC = new org.apache.thrift.protocol.TField("carMarkerPendant", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CAR_MARKER_SUNVISOR_FIELD_DESC = new org.apache.thrift.protocol.TField("carMarkerSunvisor", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField SEATBELT_DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("seatbeltDriver", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField SEATBELT_COPILOT_FIELD_DESC = new org.apache.thrift.protocol.TField("seatbeltCopilot", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField PHONECALL_DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("phonecallDriver", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("capType", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField CAP_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("capLocation", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CAP_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("capFeature", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CapMotorResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CapMotorResultTupleSchemeFactory();

  public java.lang.String plateLicence; // required
  public int carColor; // required
  public int orientation; // required
  public int plateColor; // required
  public int carType; // required
  public int brandType; // required
  public java.lang.String brandMainTag; // required
  public java.lang.String brandSubTag; // required
  public java.lang.String brandYearTag; // required
  public int carMarkerMot; // required
  public int carMarkerTissuebox; // required
  public int carMarkerPendant; // required
  public int carMarkerSunvisor; // required
  public int seatbeltDriver; // required
  public int seatbeltCopilot; // required
  public int phonecallDriver; // required
  public int capType; // required
  public java.lang.String capLocation; // required
  public java.nio.ByteBuffer capFeature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATE_LICENCE((short)1, "plateLicence"),
    CAR_COLOR((short)2, "carColor"),
    ORIENTATION((short)3, "orientation"),
    PLATE_COLOR((short)4, "plateColor"),
    CAR_TYPE((short)5, "carType"),
    BRAND_TYPE((short)6, "brandType"),
    BRAND_MAIN_TAG((short)7, "brandMainTag"),
    BRAND_SUB_TAG((short)8, "brandSubTag"),
    BRAND_YEAR_TAG((short)9, "brandYearTag"),
    CAR_MARKER_MOT((short)10, "carMarkerMot"),
    CAR_MARKER_TISSUEBOX((short)11, "carMarkerTissuebox"),
    CAR_MARKER_PENDANT((short)12, "carMarkerPendant"),
    CAR_MARKER_SUNVISOR((short)13, "carMarkerSunvisor"),
    SEATBELT_DRIVER((short)14, "seatbeltDriver"),
    SEATBELT_COPILOT((short)15, "seatbeltCopilot"),
    PHONECALL_DRIVER((short)16, "phonecallDriver"),
    CAP_TYPE((short)17, "capType"),
    CAP_LOCATION((short)18, "capLocation"),
    CAP_FEATURE((short)19, "capFeature");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATE_LICENCE
          return PLATE_LICENCE;
        case 2: // CAR_COLOR
          return CAR_COLOR;
        case 3: // ORIENTATION
          return ORIENTATION;
        case 4: // PLATE_COLOR
          return PLATE_COLOR;
        case 5: // CAR_TYPE
          return CAR_TYPE;
        case 6: // BRAND_TYPE
          return BRAND_TYPE;
        case 7: // BRAND_MAIN_TAG
          return BRAND_MAIN_TAG;
        case 8: // BRAND_SUB_TAG
          return BRAND_SUB_TAG;
        case 9: // BRAND_YEAR_TAG
          return BRAND_YEAR_TAG;
        case 10: // CAR_MARKER_MOT
          return CAR_MARKER_MOT;
        case 11: // CAR_MARKER_TISSUEBOX
          return CAR_MARKER_TISSUEBOX;
        case 12: // CAR_MARKER_PENDANT
          return CAR_MARKER_PENDANT;
        case 13: // CAR_MARKER_SUNVISOR
          return CAR_MARKER_SUNVISOR;
        case 14: // SEATBELT_DRIVER
          return SEATBELT_DRIVER;
        case 15: // SEATBELT_COPILOT
          return SEATBELT_COPILOT;
        case 16: // PHONECALL_DRIVER
          return PHONECALL_DRIVER;
        case 17: // CAP_TYPE
          return CAP_TYPE;
        case 18: // CAP_LOCATION
          return CAP_LOCATION;
        case 19: // CAP_FEATURE
          return CAP_FEATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CARCOLOR_ISSET_ID = 0;
  private static final int __ORIENTATION_ISSET_ID = 1;
  private static final int __PLATECOLOR_ISSET_ID = 2;
  private static final int __CARTYPE_ISSET_ID = 3;
  private static final int __BRANDTYPE_ISSET_ID = 4;
  private static final int __CARMARKERMOT_ISSET_ID = 5;
  private static final int __CARMARKERTISSUEBOX_ISSET_ID = 6;
  private static final int __CARMARKERPENDANT_ISSET_ID = 7;
  private static final int __CARMARKERSUNVISOR_ISSET_ID = 8;
  private static final int __SEATBELTDRIVER_ISSET_ID = 9;
  private static final int __SEATBELTCOPILOT_ISSET_ID = 10;
  private static final int __PHONECALLDRIVER_ISSET_ID = 11;
  private static final int __CAPTYPE_ISSET_ID = 12;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATE_LICENCE, new org.apache.thrift.meta_data.FieldMetaData("plateLicence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_COLOR, new org.apache.thrift.meta_data.FieldMetaData("carColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORIENTATION, new org.apache.thrift.meta_data.FieldMetaData("orientation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLATE_COLOR, new org.apache.thrift.meta_data.FieldMetaData("plateColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("carType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRAND_TYPE, new org.apache.thrift.meta_data.FieldMetaData("brandType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BRAND_MAIN_TAG, new org.apache.thrift.meta_data.FieldMetaData("brandMainTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_SUB_TAG, new org.apache.thrift.meta_data.FieldMetaData("brandSubTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BRAND_YEAR_TAG, new org.apache.thrift.meta_data.FieldMetaData("brandYearTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAR_MARKER_MOT, new org.apache.thrift.meta_data.FieldMetaData("carMarkerMot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_MARKER_TISSUEBOX, new org.apache.thrift.meta_data.FieldMetaData("carMarkerTissuebox", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_MARKER_PENDANT, new org.apache.thrift.meta_data.FieldMetaData("carMarkerPendant", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_MARKER_SUNVISOR, new org.apache.thrift.meta_data.FieldMetaData("carMarkerSunvisor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATBELT_DRIVER, new org.apache.thrift.meta_data.FieldMetaData("seatbeltDriver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEATBELT_COPILOT, new org.apache.thrift.meta_data.FieldMetaData("seatbeltCopilot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PHONECALL_DRIVER, new org.apache.thrift.meta_data.FieldMetaData("phonecallDriver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("capType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("capLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAP_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("capFeature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CapMotorResult.class, metaDataMap);
  }

  public CapMotorResult() {
  }

  public CapMotorResult(
    java.lang.String plateLicence,
    int carColor,
    int orientation,
    int plateColor,
    int carType,
    int brandType,
    java.lang.String brandMainTag,
    java.lang.String brandSubTag,
    java.lang.String brandYearTag,
    int carMarkerMot,
    int carMarkerTissuebox,
    int carMarkerPendant,
    int carMarkerSunvisor,
    int seatbeltDriver,
    int seatbeltCopilot,
    int phonecallDriver,
    int capType,
    java.lang.String capLocation,
    java.nio.ByteBuffer capFeature)
  {
    this();
    this.plateLicence = plateLicence;
    this.carColor = carColor;
    setCarColorIsSet(true);
    this.orientation = orientation;
    setOrientationIsSet(true);
    this.plateColor = plateColor;
    setPlateColorIsSet(true);
    this.carType = carType;
    setCarTypeIsSet(true);
    this.brandType = brandType;
    setBrandTypeIsSet(true);
    this.brandMainTag = brandMainTag;
    this.brandSubTag = brandSubTag;
    this.brandYearTag = brandYearTag;
    this.carMarkerMot = carMarkerMot;
    setCarMarkerMotIsSet(true);
    this.carMarkerTissuebox = carMarkerTissuebox;
    setCarMarkerTissueboxIsSet(true);
    this.carMarkerPendant = carMarkerPendant;
    setCarMarkerPendantIsSet(true);
    this.carMarkerSunvisor = carMarkerSunvisor;
    setCarMarkerSunvisorIsSet(true);
    this.seatbeltDriver = seatbeltDriver;
    setSeatbeltDriverIsSet(true);
    this.seatbeltCopilot = seatbeltCopilot;
    setSeatbeltCopilotIsSet(true);
    this.phonecallDriver = phonecallDriver;
    setPhonecallDriverIsSet(true);
    this.capType = capType;
    setCapTypeIsSet(true);
    this.capLocation = capLocation;
    this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(capFeature);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CapMotorResult(CapMotorResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlateLicence()) {
      this.plateLicence = other.plateLicence;
    }
    this.carColor = other.carColor;
    this.orientation = other.orientation;
    this.plateColor = other.plateColor;
    this.carType = other.carType;
    this.brandType = other.brandType;
    if (other.isSetBrandMainTag()) {
      this.brandMainTag = other.brandMainTag;
    }
    if (other.isSetBrandSubTag()) {
      this.brandSubTag = other.brandSubTag;
    }
    if (other.isSetBrandYearTag()) {
      this.brandYearTag = other.brandYearTag;
    }
    this.carMarkerMot = other.carMarkerMot;
    this.carMarkerTissuebox = other.carMarkerTissuebox;
    this.carMarkerPendant = other.carMarkerPendant;
    this.carMarkerSunvisor = other.carMarkerSunvisor;
    this.seatbeltDriver = other.seatbeltDriver;
    this.seatbeltCopilot = other.seatbeltCopilot;
    this.phonecallDriver = other.phonecallDriver;
    this.capType = other.capType;
    if (other.isSetCapLocation()) {
      this.capLocation = other.capLocation;
    }
    if (other.isSetCapFeature()) {
      this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(other.capFeature);
    }
  }

  public CapMotorResult deepCopy() {
    return new CapMotorResult(this);
  }

  @Override
  public void clear() {
    this.plateLicence = null;
    setCarColorIsSet(false);
    this.carColor = 0;
    setOrientationIsSet(false);
    this.orientation = 0;
    setPlateColorIsSet(false);
    this.plateColor = 0;
    setCarTypeIsSet(false);
    this.carType = 0;
    setBrandTypeIsSet(false);
    this.brandType = 0;
    this.brandMainTag = null;
    this.brandSubTag = null;
    this.brandYearTag = null;
    setCarMarkerMotIsSet(false);
    this.carMarkerMot = 0;
    setCarMarkerTissueboxIsSet(false);
    this.carMarkerTissuebox = 0;
    setCarMarkerPendantIsSet(false);
    this.carMarkerPendant = 0;
    setCarMarkerSunvisorIsSet(false);
    this.carMarkerSunvisor = 0;
    setSeatbeltDriverIsSet(false);
    this.seatbeltDriver = 0;
    setSeatbeltCopilotIsSet(false);
    this.seatbeltCopilot = 0;
    setPhonecallDriverIsSet(false);
    this.phonecallDriver = 0;
    setCapTypeIsSet(false);
    this.capType = 0;
    this.capLocation = null;
    this.capFeature = null;
  }

  public java.lang.String getPlateLicence() {
    return this.plateLicence;
  }

  public CapMotorResult setPlateLicence(java.lang.String plateLicence) {
    this.plateLicence = plateLicence;
    return this;
  }

  public void unsetPlateLicence() {
    this.plateLicence = null;
  }

  /** Returns true if field plateLicence is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateLicence() {
    return this.plateLicence != null;
  }

  public void setPlateLicenceIsSet(boolean value) {
    if (!value) {
      this.plateLicence = null;
    }
  }

  public int getCarColor() {
    return this.carColor;
  }

  public CapMotorResult setCarColor(int carColor) {
    this.carColor = carColor;
    setCarColorIsSet(true);
    return this;
  }

  public void unsetCarColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARCOLOR_ISSET_ID);
  }

  /** Returns true if field carColor is set (has been assigned a value) and false otherwise */
  public boolean isSetCarColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARCOLOR_ISSET_ID);
  }

  public void setCarColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARCOLOR_ISSET_ID, value);
  }

  public int getOrientation() {
    return this.orientation;
  }

  public CapMotorResult setOrientation(int orientation) {
    this.orientation = orientation;
    setOrientationIsSet(true);
    return this;
  }

  public void unsetOrientation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIENTATION_ISSET_ID);
  }

  /** Returns true if field orientation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrientation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIENTATION_ISSET_ID);
  }

  public void setOrientationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIENTATION_ISSET_ID, value);
  }

  public int getPlateColor() {
    return this.plateColor;
  }

  public CapMotorResult setPlateColor(int plateColor) {
    this.plateColor = plateColor;
    setPlateColorIsSet(true);
    return this;
  }

  public void unsetPlateColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLATECOLOR_ISSET_ID);
  }

  /** Returns true if field plateColor is set (has been assigned a value) and false otherwise */
  public boolean isSetPlateColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLATECOLOR_ISSET_ID);
  }

  public void setPlateColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLATECOLOR_ISSET_ID, value);
  }

  public int getCarType() {
    return this.carType;
  }

  public CapMotorResult setCarType(int carType) {
    this.carType = carType;
    setCarTypeIsSet(true);
    return this;
  }

  public void unsetCarType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  /** Returns true if field carType is set (has been assigned a value) and false otherwise */
  public boolean isSetCarType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  public void setCarTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARTYPE_ISSET_ID, value);
  }

  public int getBrandType() {
    return this.brandType;
  }

  public CapMotorResult setBrandType(int brandType) {
    this.brandType = brandType;
    setBrandTypeIsSet(true);
    return this;
  }

  public void unsetBrandType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BRANDTYPE_ISSET_ID);
  }

  /** Returns true if field brandType is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BRANDTYPE_ISSET_ID);
  }

  public void setBrandTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BRANDTYPE_ISSET_ID, value);
  }

  public java.lang.String getBrandMainTag() {
    return this.brandMainTag;
  }

  public CapMotorResult setBrandMainTag(java.lang.String brandMainTag) {
    this.brandMainTag = brandMainTag;
    return this;
  }

  public void unsetBrandMainTag() {
    this.brandMainTag = null;
  }

  /** Returns true if field brandMainTag is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandMainTag() {
    return this.brandMainTag != null;
  }

  public void setBrandMainTagIsSet(boolean value) {
    if (!value) {
      this.brandMainTag = null;
    }
  }

  public java.lang.String getBrandSubTag() {
    return this.brandSubTag;
  }

  public CapMotorResult setBrandSubTag(java.lang.String brandSubTag) {
    this.brandSubTag = brandSubTag;
    return this;
  }

  public void unsetBrandSubTag() {
    this.brandSubTag = null;
  }

  /** Returns true if field brandSubTag is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandSubTag() {
    return this.brandSubTag != null;
  }

  public void setBrandSubTagIsSet(boolean value) {
    if (!value) {
      this.brandSubTag = null;
    }
  }

  public java.lang.String getBrandYearTag() {
    return this.brandYearTag;
  }

  public CapMotorResult setBrandYearTag(java.lang.String brandYearTag) {
    this.brandYearTag = brandYearTag;
    return this;
  }

  public void unsetBrandYearTag() {
    this.brandYearTag = null;
  }

  /** Returns true if field brandYearTag is set (has been assigned a value) and false otherwise */
  public boolean isSetBrandYearTag() {
    return this.brandYearTag != null;
  }

  public void setBrandYearTagIsSet(boolean value) {
    if (!value) {
      this.brandYearTag = null;
    }
  }

  public int getCarMarkerMot() {
    return this.carMarkerMot;
  }

  public CapMotorResult setCarMarkerMot(int carMarkerMot) {
    this.carMarkerMot = carMarkerMot;
    setCarMarkerMotIsSet(true);
    return this;
  }

  public void unsetCarMarkerMot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARMARKERMOT_ISSET_ID);
  }

  /** Returns true if field carMarkerMot is set (has been assigned a value) and false otherwise */
  public boolean isSetCarMarkerMot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARMARKERMOT_ISSET_ID);
  }

  public void setCarMarkerMotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARMARKERMOT_ISSET_ID, value);
  }

  public int getCarMarkerTissuebox() {
    return this.carMarkerTissuebox;
  }

  public CapMotorResult setCarMarkerTissuebox(int carMarkerTissuebox) {
    this.carMarkerTissuebox = carMarkerTissuebox;
    setCarMarkerTissueboxIsSet(true);
    return this;
  }

  public void unsetCarMarkerTissuebox() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARMARKERTISSUEBOX_ISSET_ID);
  }

  /** Returns true if field carMarkerTissuebox is set (has been assigned a value) and false otherwise */
  public boolean isSetCarMarkerTissuebox() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARMARKERTISSUEBOX_ISSET_ID);
  }

  public void setCarMarkerTissueboxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARMARKERTISSUEBOX_ISSET_ID, value);
  }

  public int getCarMarkerPendant() {
    return this.carMarkerPendant;
  }

  public CapMotorResult setCarMarkerPendant(int carMarkerPendant) {
    this.carMarkerPendant = carMarkerPendant;
    setCarMarkerPendantIsSet(true);
    return this;
  }

  public void unsetCarMarkerPendant() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARMARKERPENDANT_ISSET_ID);
  }

  /** Returns true if field carMarkerPendant is set (has been assigned a value) and false otherwise */
  public boolean isSetCarMarkerPendant() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARMARKERPENDANT_ISSET_ID);
  }

  public void setCarMarkerPendantIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARMARKERPENDANT_ISSET_ID, value);
  }

  public int getCarMarkerSunvisor() {
    return this.carMarkerSunvisor;
  }

  public CapMotorResult setCarMarkerSunvisor(int carMarkerSunvisor) {
    this.carMarkerSunvisor = carMarkerSunvisor;
    setCarMarkerSunvisorIsSet(true);
    return this;
  }

  public void unsetCarMarkerSunvisor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARMARKERSUNVISOR_ISSET_ID);
  }

  /** Returns true if field carMarkerSunvisor is set (has been assigned a value) and false otherwise */
  public boolean isSetCarMarkerSunvisor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARMARKERSUNVISOR_ISSET_ID);
  }

  public void setCarMarkerSunvisorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARMARKERSUNVISOR_ISSET_ID, value);
  }

  public int getSeatbeltDriver() {
    return this.seatbeltDriver;
  }

  public CapMotorResult setSeatbeltDriver(int seatbeltDriver) {
    this.seatbeltDriver = seatbeltDriver;
    setSeatbeltDriverIsSet(true);
    return this;
  }

  public void unsetSeatbeltDriver() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATBELTDRIVER_ISSET_ID);
  }

  /** Returns true if field seatbeltDriver is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatbeltDriver() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATBELTDRIVER_ISSET_ID);
  }

  public void setSeatbeltDriverIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATBELTDRIVER_ISSET_ID, value);
  }

  public int getSeatbeltCopilot() {
    return this.seatbeltCopilot;
  }

  public CapMotorResult setSeatbeltCopilot(int seatbeltCopilot) {
    this.seatbeltCopilot = seatbeltCopilot;
    setSeatbeltCopilotIsSet(true);
    return this;
  }

  public void unsetSeatbeltCopilot() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEATBELTCOPILOT_ISSET_ID);
  }

  /** Returns true if field seatbeltCopilot is set (has been assigned a value) and false otherwise */
  public boolean isSetSeatbeltCopilot() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEATBELTCOPILOT_ISSET_ID);
  }

  public void setSeatbeltCopilotIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEATBELTCOPILOT_ISSET_ID, value);
  }

  public int getPhonecallDriver() {
    return this.phonecallDriver;
  }

  public CapMotorResult setPhonecallDriver(int phonecallDriver) {
    this.phonecallDriver = phonecallDriver;
    setPhonecallDriverIsSet(true);
    return this;
  }

  public void unsetPhonecallDriver() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PHONECALLDRIVER_ISSET_ID);
  }

  /** Returns true if field phonecallDriver is set (has been assigned a value) and false otherwise */
  public boolean isSetPhonecallDriver() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PHONECALLDRIVER_ISSET_ID);
  }

  public void setPhonecallDriverIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PHONECALLDRIVER_ISSET_ID, value);
  }

  public int getCapType() {
    return this.capType;
  }

  public CapMotorResult setCapType(int capType) {
    this.capType = capType;
    setCapTypeIsSet(true);
    return this;
  }

  public void unsetCapType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAPTYPE_ISSET_ID);
  }

  /** Returns true if field capType is set (has been assigned a value) and false otherwise */
  public boolean isSetCapType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAPTYPE_ISSET_ID);
  }

  public void setCapTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAPTYPE_ISSET_ID, value);
  }

  public java.lang.String getCapLocation() {
    return this.capLocation;
  }

  public CapMotorResult setCapLocation(java.lang.String capLocation) {
    this.capLocation = capLocation;
    return this;
  }

  public void unsetCapLocation() {
    this.capLocation = null;
  }

  /** Returns true if field capLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetCapLocation() {
    return this.capLocation != null;
  }

  public void setCapLocationIsSet(boolean value) {
    if (!value) {
      this.capLocation = null;
    }
  }

  public byte[] getCapFeature() {
    setCapFeature(org.apache.thrift.TBaseHelper.rightSize(capFeature));
    return capFeature == null ? null : capFeature.array();
  }

  public java.nio.ByteBuffer bufferForCapFeature() {
    return org.apache.thrift.TBaseHelper.copyBinary(capFeature);
  }

  public CapMotorResult setCapFeature(byte[] capFeature) {
    this.capFeature = capFeature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(capFeature.clone());
    return this;
  }

  public CapMotorResult setCapFeature(java.nio.ByteBuffer capFeature) {
    this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(capFeature);
    return this;
  }

  public void unsetCapFeature() {
    this.capFeature = null;
  }

  /** Returns true if field capFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetCapFeature() {
    return this.capFeature != null;
  }

  public void setCapFeatureIsSet(boolean value) {
    if (!value) {
      this.capFeature = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PLATE_LICENCE:
      if (value == null) {
        unsetPlateLicence();
      } else {
        setPlateLicence((java.lang.String)value);
      }
      break;

    case CAR_COLOR:
      if (value == null) {
        unsetCarColor();
      } else {
        setCarColor((java.lang.Integer)value);
      }
      break;

    case ORIENTATION:
      if (value == null) {
        unsetOrientation();
      } else {
        setOrientation((java.lang.Integer)value);
      }
      break;

    case PLATE_COLOR:
      if (value == null) {
        unsetPlateColor();
      } else {
        setPlateColor((java.lang.Integer)value);
      }
      break;

    case CAR_TYPE:
      if (value == null) {
        unsetCarType();
      } else {
        setCarType((java.lang.Integer)value);
      }
      break;

    case BRAND_TYPE:
      if (value == null) {
        unsetBrandType();
      } else {
        setBrandType((java.lang.Integer)value);
      }
      break;

    case BRAND_MAIN_TAG:
      if (value == null) {
        unsetBrandMainTag();
      } else {
        setBrandMainTag((java.lang.String)value);
      }
      break;

    case BRAND_SUB_TAG:
      if (value == null) {
        unsetBrandSubTag();
      } else {
        setBrandSubTag((java.lang.String)value);
      }
      break;

    case BRAND_YEAR_TAG:
      if (value == null) {
        unsetBrandYearTag();
      } else {
        setBrandYearTag((java.lang.String)value);
      }
      break;

    case CAR_MARKER_MOT:
      if (value == null) {
        unsetCarMarkerMot();
      } else {
        setCarMarkerMot((java.lang.Integer)value);
      }
      break;

    case CAR_MARKER_TISSUEBOX:
      if (value == null) {
        unsetCarMarkerTissuebox();
      } else {
        setCarMarkerTissuebox((java.lang.Integer)value);
      }
      break;

    case CAR_MARKER_PENDANT:
      if (value == null) {
        unsetCarMarkerPendant();
      } else {
        setCarMarkerPendant((java.lang.Integer)value);
      }
      break;

    case CAR_MARKER_SUNVISOR:
      if (value == null) {
        unsetCarMarkerSunvisor();
      } else {
        setCarMarkerSunvisor((java.lang.Integer)value);
      }
      break;

    case SEATBELT_DRIVER:
      if (value == null) {
        unsetSeatbeltDriver();
      } else {
        setSeatbeltDriver((java.lang.Integer)value);
      }
      break;

    case SEATBELT_COPILOT:
      if (value == null) {
        unsetSeatbeltCopilot();
      } else {
        setSeatbeltCopilot((java.lang.Integer)value);
      }
      break;

    case PHONECALL_DRIVER:
      if (value == null) {
        unsetPhonecallDriver();
      } else {
        setPhonecallDriver((java.lang.Integer)value);
      }
      break;

    case CAP_TYPE:
      if (value == null) {
        unsetCapType();
      } else {
        setCapType((java.lang.Integer)value);
      }
      break;

    case CAP_LOCATION:
      if (value == null) {
        unsetCapLocation();
      } else {
        setCapLocation((java.lang.String)value);
      }
      break;

    case CAP_FEATURE:
      if (value == null) {
        unsetCapFeature();
      } else {
        if (value instanceof byte[]) {
          setCapFeature((byte[])value);
        } else {
          setCapFeature((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATE_LICENCE:
      return getPlateLicence();

    case CAR_COLOR:
      return getCarColor();

    case ORIENTATION:
      return getOrientation();

    case PLATE_COLOR:
      return getPlateColor();

    case CAR_TYPE:
      return getCarType();

    case BRAND_TYPE:
      return getBrandType();

    case BRAND_MAIN_TAG:
      return getBrandMainTag();

    case BRAND_SUB_TAG:
      return getBrandSubTag();

    case BRAND_YEAR_TAG:
      return getBrandYearTag();

    case CAR_MARKER_MOT:
      return getCarMarkerMot();

    case CAR_MARKER_TISSUEBOX:
      return getCarMarkerTissuebox();

    case CAR_MARKER_PENDANT:
      return getCarMarkerPendant();

    case CAR_MARKER_SUNVISOR:
      return getCarMarkerSunvisor();

    case SEATBELT_DRIVER:
      return getSeatbeltDriver();

    case SEATBELT_COPILOT:
      return getSeatbeltCopilot();

    case PHONECALL_DRIVER:
      return getPhonecallDriver();

    case CAP_TYPE:
      return getCapType();

    case CAP_LOCATION:
      return getCapLocation();

    case CAP_FEATURE:
      return getCapFeature();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PLATE_LICENCE:
      return isSetPlateLicence();
    case CAR_COLOR:
      return isSetCarColor();
    case ORIENTATION:
      return isSetOrientation();
    case PLATE_COLOR:
      return isSetPlateColor();
    case CAR_TYPE:
      return isSetCarType();
    case BRAND_TYPE:
      return isSetBrandType();
    case BRAND_MAIN_TAG:
      return isSetBrandMainTag();
    case BRAND_SUB_TAG:
      return isSetBrandSubTag();
    case BRAND_YEAR_TAG:
      return isSetBrandYearTag();
    case CAR_MARKER_MOT:
      return isSetCarMarkerMot();
    case CAR_MARKER_TISSUEBOX:
      return isSetCarMarkerTissuebox();
    case CAR_MARKER_PENDANT:
      return isSetCarMarkerPendant();
    case CAR_MARKER_SUNVISOR:
      return isSetCarMarkerSunvisor();
    case SEATBELT_DRIVER:
      return isSetSeatbeltDriver();
    case SEATBELT_COPILOT:
      return isSetSeatbeltCopilot();
    case PHONECALL_DRIVER:
      return isSetPhonecallDriver();
    case CAP_TYPE:
      return isSetCapType();
    case CAP_LOCATION:
      return isSetCapLocation();
    case CAP_FEATURE:
      return isSetCapFeature();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CapMotorResult)
      return this.equals((CapMotorResult)that);
    return false;
  }

  public boolean equals(CapMotorResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_plateLicence = true && this.isSetPlateLicence();
    boolean that_present_plateLicence = true && that.isSetPlateLicence();
    if (this_present_plateLicence || that_present_plateLicence) {
      if (!(this_present_plateLicence && that_present_plateLicence))
        return false;
      if (!this.plateLicence.equals(that.plateLicence))
        return false;
    }

    boolean this_present_carColor = true;
    boolean that_present_carColor = true;
    if (this_present_carColor || that_present_carColor) {
      if (!(this_present_carColor && that_present_carColor))
        return false;
      if (this.carColor != that.carColor)
        return false;
    }

    boolean this_present_orientation = true;
    boolean that_present_orientation = true;
    if (this_present_orientation || that_present_orientation) {
      if (!(this_present_orientation && that_present_orientation))
        return false;
      if (this.orientation != that.orientation)
        return false;
    }

    boolean this_present_plateColor = true;
    boolean that_present_plateColor = true;
    if (this_present_plateColor || that_present_plateColor) {
      if (!(this_present_plateColor && that_present_plateColor))
        return false;
      if (this.plateColor != that.plateColor)
        return false;
    }

    boolean this_present_carType = true;
    boolean that_present_carType = true;
    if (this_present_carType || that_present_carType) {
      if (!(this_present_carType && that_present_carType))
        return false;
      if (this.carType != that.carType)
        return false;
    }

    boolean this_present_brandType = true;
    boolean that_present_brandType = true;
    if (this_present_brandType || that_present_brandType) {
      if (!(this_present_brandType && that_present_brandType))
        return false;
      if (this.brandType != that.brandType)
        return false;
    }

    boolean this_present_brandMainTag = true && this.isSetBrandMainTag();
    boolean that_present_brandMainTag = true && that.isSetBrandMainTag();
    if (this_present_brandMainTag || that_present_brandMainTag) {
      if (!(this_present_brandMainTag && that_present_brandMainTag))
        return false;
      if (!this.brandMainTag.equals(that.brandMainTag))
        return false;
    }

    boolean this_present_brandSubTag = true && this.isSetBrandSubTag();
    boolean that_present_brandSubTag = true && that.isSetBrandSubTag();
    if (this_present_brandSubTag || that_present_brandSubTag) {
      if (!(this_present_brandSubTag && that_present_brandSubTag))
        return false;
      if (!this.brandSubTag.equals(that.brandSubTag))
        return false;
    }

    boolean this_present_brandYearTag = true && this.isSetBrandYearTag();
    boolean that_present_brandYearTag = true && that.isSetBrandYearTag();
    if (this_present_brandYearTag || that_present_brandYearTag) {
      if (!(this_present_brandYearTag && that_present_brandYearTag))
        return false;
      if (!this.brandYearTag.equals(that.brandYearTag))
        return false;
    }

    boolean this_present_carMarkerMot = true;
    boolean that_present_carMarkerMot = true;
    if (this_present_carMarkerMot || that_present_carMarkerMot) {
      if (!(this_present_carMarkerMot && that_present_carMarkerMot))
        return false;
      if (this.carMarkerMot != that.carMarkerMot)
        return false;
    }

    boolean this_present_carMarkerTissuebox = true;
    boolean that_present_carMarkerTissuebox = true;
    if (this_present_carMarkerTissuebox || that_present_carMarkerTissuebox) {
      if (!(this_present_carMarkerTissuebox && that_present_carMarkerTissuebox))
        return false;
      if (this.carMarkerTissuebox != that.carMarkerTissuebox)
        return false;
    }

    boolean this_present_carMarkerPendant = true;
    boolean that_present_carMarkerPendant = true;
    if (this_present_carMarkerPendant || that_present_carMarkerPendant) {
      if (!(this_present_carMarkerPendant && that_present_carMarkerPendant))
        return false;
      if (this.carMarkerPendant != that.carMarkerPendant)
        return false;
    }

    boolean this_present_carMarkerSunvisor = true;
    boolean that_present_carMarkerSunvisor = true;
    if (this_present_carMarkerSunvisor || that_present_carMarkerSunvisor) {
      if (!(this_present_carMarkerSunvisor && that_present_carMarkerSunvisor))
        return false;
      if (this.carMarkerSunvisor != that.carMarkerSunvisor)
        return false;
    }

    boolean this_present_seatbeltDriver = true;
    boolean that_present_seatbeltDriver = true;
    if (this_present_seatbeltDriver || that_present_seatbeltDriver) {
      if (!(this_present_seatbeltDriver && that_present_seatbeltDriver))
        return false;
      if (this.seatbeltDriver != that.seatbeltDriver)
        return false;
    }

    boolean this_present_seatbeltCopilot = true;
    boolean that_present_seatbeltCopilot = true;
    if (this_present_seatbeltCopilot || that_present_seatbeltCopilot) {
      if (!(this_present_seatbeltCopilot && that_present_seatbeltCopilot))
        return false;
      if (this.seatbeltCopilot != that.seatbeltCopilot)
        return false;
    }

    boolean this_present_phonecallDriver = true;
    boolean that_present_phonecallDriver = true;
    if (this_present_phonecallDriver || that_present_phonecallDriver) {
      if (!(this_present_phonecallDriver && that_present_phonecallDriver))
        return false;
      if (this.phonecallDriver != that.phonecallDriver)
        return false;
    }

    boolean this_present_capType = true;
    boolean that_present_capType = true;
    if (this_present_capType || that_present_capType) {
      if (!(this_present_capType && that_present_capType))
        return false;
      if (this.capType != that.capType)
        return false;
    }

    boolean this_present_capLocation = true && this.isSetCapLocation();
    boolean that_present_capLocation = true && that.isSetCapLocation();
    if (this_present_capLocation || that_present_capLocation) {
      if (!(this_present_capLocation && that_present_capLocation))
        return false;
      if (!this.capLocation.equals(that.capLocation))
        return false;
    }

    boolean this_present_capFeature = true && this.isSetCapFeature();
    boolean that_present_capFeature = true && that.isSetCapFeature();
    if (this_present_capFeature || that_present_capFeature) {
      if (!(this_present_capFeature && that_present_capFeature))
        return false;
      if (!this.capFeature.equals(that.capFeature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPlateLicence()) ? 131071 : 524287);
    if (isSetPlateLicence())
      hashCode = hashCode * 8191 + plateLicence.hashCode();

    hashCode = hashCode * 8191 + carColor;

    hashCode = hashCode * 8191 + orientation;

    hashCode = hashCode * 8191 + plateColor;

    hashCode = hashCode * 8191 + carType;

    hashCode = hashCode * 8191 + brandType;

    hashCode = hashCode * 8191 + ((isSetBrandMainTag()) ? 131071 : 524287);
    if (isSetBrandMainTag())
      hashCode = hashCode * 8191 + brandMainTag.hashCode();

    hashCode = hashCode * 8191 + ((isSetBrandSubTag()) ? 131071 : 524287);
    if (isSetBrandSubTag())
      hashCode = hashCode * 8191 + brandSubTag.hashCode();

    hashCode = hashCode * 8191 + ((isSetBrandYearTag()) ? 131071 : 524287);
    if (isSetBrandYearTag())
      hashCode = hashCode * 8191 + brandYearTag.hashCode();

    hashCode = hashCode * 8191 + carMarkerMot;

    hashCode = hashCode * 8191 + carMarkerTissuebox;

    hashCode = hashCode * 8191 + carMarkerPendant;

    hashCode = hashCode * 8191 + carMarkerSunvisor;

    hashCode = hashCode * 8191 + seatbeltDriver;

    hashCode = hashCode * 8191 + seatbeltCopilot;

    hashCode = hashCode * 8191 + phonecallDriver;

    hashCode = hashCode * 8191 + capType;

    hashCode = hashCode * 8191 + ((isSetCapLocation()) ? 131071 : 524287);
    if (isSetCapLocation())
      hashCode = hashCode * 8191 + capLocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetCapFeature()) ? 131071 : 524287);
    if (isSetCapFeature())
      hashCode = hashCode * 8191 + capFeature.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CapMotorResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPlateLicence()).compareTo(other.isSetPlateLicence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateLicence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateLicence, other.plateLicence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarColor()).compareTo(other.isSetCarColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carColor, other.carColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrientation()).compareTo(other.isSetOrientation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrientation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientation, other.orientation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlateColor()).compareTo(other.isSetPlateColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlateColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plateColor, other.plateColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarType()).compareTo(other.isSetCarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carType, other.carType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBrandType()).compareTo(other.isSetBrandType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandType, other.brandType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBrandMainTag()).compareTo(other.isSetBrandMainTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandMainTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandMainTag, other.brandMainTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBrandSubTag()).compareTo(other.isSetBrandSubTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandSubTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandSubTag, other.brandSubTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBrandYearTag()).compareTo(other.isSetBrandYearTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrandYearTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brandYearTag, other.brandYearTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarMarkerMot()).compareTo(other.isSetCarMarkerMot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarMarkerMot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carMarkerMot, other.carMarkerMot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarMarkerTissuebox()).compareTo(other.isSetCarMarkerTissuebox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarMarkerTissuebox()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carMarkerTissuebox, other.carMarkerTissuebox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarMarkerPendant()).compareTo(other.isSetCarMarkerPendant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarMarkerPendant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carMarkerPendant, other.carMarkerPendant);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarMarkerSunvisor()).compareTo(other.isSetCarMarkerSunvisor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarMarkerSunvisor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carMarkerSunvisor, other.carMarkerSunvisor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeatbeltDriver()).compareTo(other.isSetSeatbeltDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatbeltDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatbeltDriver, other.seatbeltDriver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSeatbeltCopilot()).compareTo(other.isSetSeatbeltCopilot());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeatbeltCopilot()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seatbeltCopilot, other.seatbeltCopilot);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhonecallDriver()).compareTo(other.isSetPhonecallDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhonecallDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phonecallDriver, other.phonecallDriver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapType()).compareTo(other.isSetCapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capType, other.capType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapLocation()).compareTo(other.isSetCapLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capLocation, other.capLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapFeature()).compareTo(other.isSetCapFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capFeature, other.capFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CapMotorResult(");
    boolean first = true;

    sb.append("plateLicence:");
    if (this.plateLicence == null) {
      sb.append("null");
    } else {
      sb.append(this.plateLicence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carColor:");
    sb.append(this.carColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("orientation:");
    sb.append(this.orientation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("plateColor:");
    sb.append(this.plateColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carType:");
    sb.append(this.carType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandType:");
    sb.append(this.brandType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandMainTag:");
    if (this.brandMainTag == null) {
      sb.append("null");
    } else {
      sb.append(this.brandMainTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandSubTag:");
    if (this.brandSubTag == null) {
      sb.append("null");
    } else {
      sb.append(this.brandSubTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("brandYearTag:");
    if (this.brandYearTag == null) {
      sb.append("null");
    } else {
      sb.append(this.brandYearTag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("carMarkerMot:");
    sb.append(this.carMarkerMot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carMarkerTissuebox:");
    sb.append(this.carMarkerTissuebox);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carMarkerPendant:");
    sb.append(this.carMarkerPendant);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carMarkerSunvisor:");
    sb.append(this.carMarkerSunvisor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatbeltDriver:");
    sb.append(this.seatbeltDriver);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seatbeltCopilot:");
    sb.append(this.seatbeltCopilot);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phonecallDriver:");
    sb.append(this.phonecallDriver);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capType:");
    sb.append(this.capType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capLocation:");
    if (this.capLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.capLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capFeature:");
    if (this.capFeature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.capFeature, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CapMotorResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapMotorResultStandardScheme getScheme() {
      return new CapMotorResultStandardScheme();
    }
  }

  private static class CapMotorResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CapMotorResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CapMotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATE_LICENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plateLicence = iprot.readString();
              struct.setPlateLicenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAR_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carColor = iprot.readI32();
              struct.setCarColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIENTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orientation = iprot.readI32();
              struct.setOrientationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PLATE_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plateColor = iprot.readI32();
              struct.setPlateColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carType = iprot.readI32();
              struct.setCarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BRAND_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brandType = iprot.readI32();
              struct.setBrandTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BRAND_MAIN_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandMainTag = iprot.readString();
              struct.setBrandMainTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BRAND_SUB_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandSubTag = iprot.readString();
              struct.setBrandSubTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BRAND_YEAR_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.brandYearTag = iprot.readString();
              struct.setBrandYearTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CAR_MARKER_MOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carMarkerMot = iprot.readI32();
              struct.setCarMarkerMotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CAR_MARKER_TISSUEBOX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carMarkerTissuebox = iprot.readI32();
              struct.setCarMarkerTissueboxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CAR_MARKER_PENDANT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carMarkerPendant = iprot.readI32();
              struct.setCarMarkerPendantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CAR_MARKER_SUNVISOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carMarkerSunvisor = iprot.readI32();
              struct.setCarMarkerSunvisorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SEATBELT_DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatbeltDriver = iprot.readI32();
              struct.setSeatbeltDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SEATBELT_COPILOT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seatbeltCopilot = iprot.readI32();
              struct.setSeatbeltCopilotIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // PHONECALL_DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.phonecallDriver = iprot.readI32();
              struct.setPhonecallDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capType = iprot.readI32();
              struct.setCapTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // CAP_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capLocation = iprot.readString();
              struct.setCapLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CAP_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capFeature = iprot.readBinary();
              struct.setCapFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CapMotorResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.plateLicence != null) {
        oprot.writeFieldBegin(PLATE_LICENCE_FIELD_DESC);
        oprot.writeString(struct.plateLicence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAR_COLOR_FIELD_DESC);
      oprot.writeI32(struct.carColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ORIENTATION_FIELD_DESC);
      oprot.writeI32(struct.orientation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PLATE_COLOR_FIELD_DESC);
      oprot.writeI32(struct.plateColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_TYPE_FIELD_DESC);
      oprot.writeI32(struct.carType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BRAND_TYPE_FIELD_DESC);
      oprot.writeI32(struct.brandType);
      oprot.writeFieldEnd();
      if (struct.brandMainTag != null) {
        oprot.writeFieldBegin(BRAND_MAIN_TAG_FIELD_DESC);
        oprot.writeString(struct.brandMainTag);
        oprot.writeFieldEnd();
      }
      if (struct.brandSubTag != null) {
        oprot.writeFieldBegin(BRAND_SUB_TAG_FIELD_DESC);
        oprot.writeString(struct.brandSubTag);
        oprot.writeFieldEnd();
      }
      if (struct.brandYearTag != null) {
        oprot.writeFieldBegin(BRAND_YEAR_TAG_FIELD_DESC);
        oprot.writeString(struct.brandYearTag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CAR_MARKER_MOT_FIELD_DESC);
      oprot.writeI32(struct.carMarkerMot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_MARKER_TISSUEBOX_FIELD_DESC);
      oprot.writeI32(struct.carMarkerTissuebox);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_MARKER_PENDANT_FIELD_DESC);
      oprot.writeI32(struct.carMarkerPendant);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_MARKER_SUNVISOR_FIELD_DESC);
      oprot.writeI32(struct.carMarkerSunvisor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATBELT_DRIVER_FIELD_DESC);
      oprot.writeI32(struct.seatbeltDriver);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEATBELT_COPILOT_FIELD_DESC);
      oprot.writeI32(struct.seatbeltCopilot);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PHONECALL_DRIVER_FIELD_DESC);
      oprot.writeI32(struct.phonecallDriver);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.capType);
      oprot.writeFieldEnd();
      if (struct.capLocation != null) {
        oprot.writeFieldBegin(CAP_LOCATION_FIELD_DESC);
        oprot.writeString(struct.capLocation);
        oprot.writeFieldEnd();
      }
      if (struct.capFeature != null) {
        oprot.writeFieldBegin(CAP_FEATURE_FIELD_DESC);
        oprot.writeBinary(struct.capFeature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CapMotorResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapMotorResultTupleScheme getScheme() {
      return new CapMotorResultTupleScheme();
    }
  }

  private static class CapMotorResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CapMotorResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CapMotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPlateLicence()) {
        optionals.set(0);
      }
      if (struct.isSetCarColor()) {
        optionals.set(1);
      }
      if (struct.isSetOrientation()) {
        optionals.set(2);
      }
      if (struct.isSetPlateColor()) {
        optionals.set(3);
      }
      if (struct.isSetCarType()) {
        optionals.set(4);
      }
      if (struct.isSetBrandType()) {
        optionals.set(5);
      }
      if (struct.isSetBrandMainTag()) {
        optionals.set(6);
      }
      if (struct.isSetBrandSubTag()) {
        optionals.set(7);
      }
      if (struct.isSetBrandYearTag()) {
        optionals.set(8);
      }
      if (struct.isSetCarMarkerMot()) {
        optionals.set(9);
      }
      if (struct.isSetCarMarkerTissuebox()) {
        optionals.set(10);
      }
      if (struct.isSetCarMarkerPendant()) {
        optionals.set(11);
      }
      if (struct.isSetCarMarkerSunvisor()) {
        optionals.set(12);
      }
      if (struct.isSetSeatbeltDriver()) {
        optionals.set(13);
      }
      if (struct.isSetSeatbeltCopilot()) {
        optionals.set(14);
      }
      if (struct.isSetPhonecallDriver()) {
        optionals.set(15);
      }
      if (struct.isSetCapType()) {
        optionals.set(16);
      }
      if (struct.isSetCapLocation()) {
        optionals.set(17);
      }
      if (struct.isSetCapFeature()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetPlateLicence()) {
        oprot.writeString(struct.plateLicence);
      }
      if (struct.isSetCarColor()) {
        oprot.writeI32(struct.carColor);
      }
      if (struct.isSetOrientation()) {
        oprot.writeI32(struct.orientation);
      }
      if (struct.isSetPlateColor()) {
        oprot.writeI32(struct.plateColor);
      }
      if (struct.isSetCarType()) {
        oprot.writeI32(struct.carType);
      }
      if (struct.isSetBrandType()) {
        oprot.writeI32(struct.brandType);
      }
      if (struct.isSetBrandMainTag()) {
        oprot.writeString(struct.brandMainTag);
      }
      if (struct.isSetBrandSubTag()) {
        oprot.writeString(struct.brandSubTag);
      }
      if (struct.isSetBrandYearTag()) {
        oprot.writeString(struct.brandYearTag);
      }
      if (struct.isSetCarMarkerMot()) {
        oprot.writeI32(struct.carMarkerMot);
      }
      if (struct.isSetCarMarkerTissuebox()) {
        oprot.writeI32(struct.carMarkerTissuebox);
      }
      if (struct.isSetCarMarkerPendant()) {
        oprot.writeI32(struct.carMarkerPendant);
      }
      if (struct.isSetCarMarkerSunvisor()) {
        oprot.writeI32(struct.carMarkerSunvisor);
      }
      if (struct.isSetSeatbeltDriver()) {
        oprot.writeI32(struct.seatbeltDriver);
      }
      if (struct.isSetSeatbeltCopilot()) {
        oprot.writeI32(struct.seatbeltCopilot);
      }
      if (struct.isSetPhonecallDriver()) {
        oprot.writeI32(struct.phonecallDriver);
      }
      if (struct.isSetCapType()) {
        oprot.writeI32(struct.capType);
      }
      if (struct.isSetCapLocation()) {
        oprot.writeString(struct.capLocation);
      }
      if (struct.isSetCapFeature()) {
        oprot.writeBinary(struct.capFeature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CapMotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.plateLicence = iprot.readString();
        struct.setPlateLicenceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carColor = iprot.readI32();
        struct.setCarColorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orientation = iprot.readI32();
        struct.setOrientationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.plateColor = iprot.readI32();
        struct.setPlateColorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.carType = iprot.readI32();
        struct.setCarTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.brandType = iprot.readI32();
        struct.setBrandTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.brandMainTag = iprot.readString();
        struct.setBrandMainTagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.brandSubTag = iprot.readString();
        struct.setBrandSubTagIsSet(true);
      }
      if (incoming.get(8)) {
        struct.brandYearTag = iprot.readString();
        struct.setBrandYearTagIsSet(true);
      }
      if (incoming.get(9)) {
        struct.carMarkerMot = iprot.readI32();
        struct.setCarMarkerMotIsSet(true);
      }
      if (incoming.get(10)) {
        struct.carMarkerTissuebox = iprot.readI32();
        struct.setCarMarkerTissueboxIsSet(true);
      }
      if (incoming.get(11)) {
        struct.carMarkerPendant = iprot.readI32();
        struct.setCarMarkerPendantIsSet(true);
      }
      if (incoming.get(12)) {
        struct.carMarkerSunvisor = iprot.readI32();
        struct.setCarMarkerSunvisorIsSet(true);
      }
      if (incoming.get(13)) {
        struct.seatbeltDriver = iprot.readI32();
        struct.setSeatbeltDriverIsSet(true);
      }
      if (incoming.get(14)) {
        struct.seatbeltCopilot = iprot.readI32();
        struct.setSeatbeltCopilotIsSet(true);
      }
      if (incoming.get(15)) {
        struct.phonecallDriver = iprot.readI32();
        struct.setPhonecallDriverIsSet(true);
      }
      if (incoming.get(16)) {
        struct.capType = iprot.readI32();
        struct.setCapTypeIsSet(true);
      }
      if (incoming.get(17)) {
        struct.capLocation = iprot.readString();
        struct.setCapLocationIsSet(true);
      }
      if (incoming.get(18)) {
        struct.capFeature = iprot.readBinary();
        struct.setCapFeatureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


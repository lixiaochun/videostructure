package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class InfoForMonitor implements org.apache.thrift.TBase<InfoForMonitor, InfoForMonitor._Fields>, java.io.Serializable, Cloneable, Comparable<InfoForMonitor> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InfoForMonitor");

  private static final org.apache.thrift.protocol.TField LST_SUB_SVR_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("lstSubSvrInfo", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LST_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("lstChannel", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField LST_MANAGE_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("lstManageChannel", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField I_SVR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("iSvrType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STR_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("strIP", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField I_LBPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("iLBPort", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField I_NET_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("iNetPort", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField I_CONTROL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("iControlPort", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InfoForMonitorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InfoForMonitorTupleSchemeFactory();

  public java.util.List<InfoForMonitor> lstSubSvrInfo; // required
  public java.util.List<ChannelInfoForMonitor> lstChannel; // required
  public java.util.List<ChannelInfoForMonitor> lstManageChannel; // required
  public int iSvrType; // required
  public java.lang.String strIP; // required
  public int iLBPort; // required
  public int iNetPort; // required
  public int iControlPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LST_SUB_SVR_INFO((short)1, "lstSubSvrInfo"),
    LST_CHANNEL((short)2, "lstChannel"),
    LST_MANAGE_CHANNEL((short)3, "lstManageChannel"),
    I_SVR_TYPE((short)4, "iSvrType"),
    STR_IP((short)5, "strIP"),
    I_LBPORT((short)6, "iLBPort"),
    I_NET_PORT((short)7, "iNetPort"),
    I_CONTROL_PORT((short)8, "iControlPort");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LST_SUB_SVR_INFO
          return LST_SUB_SVR_INFO;
        case 2: // LST_CHANNEL
          return LST_CHANNEL;
        case 3: // LST_MANAGE_CHANNEL
          return LST_MANAGE_CHANNEL;
        case 4: // I_SVR_TYPE
          return I_SVR_TYPE;
        case 5: // STR_IP
          return STR_IP;
        case 6: // I_LBPORT
          return I_LBPORT;
        case 7: // I_NET_PORT
          return I_NET_PORT;
        case 8: // I_CONTROL_PORT
          return I_CONTROL_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISVRTYPE_ISSET_ID = 0;
  private static final int __ILBPORT_ISSET_ID = 1;
  private static final int __INETPORT_ISSET_ID = 2;
  private static final int __ICONTROLPORT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LST_SUB_SVR_INFO, new org.apache.thrift.meta_data.FieldMetaData("lstSubSvrInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "InfoForMonitor"))));
    tmpMap.put(_Fields.LST_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("lstChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelInfoForMonitor.class))));
    tmpMap.put(_Fields.LST_MANAGE_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("lstManageChannel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelInfoForMonitor.class))));
    tmpMap.put(_Fields.I_SVR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("iSvrType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STR_IP, new org.apache.thrift.meta_data.FieldMetaData("strIP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.I_LBPORT, new org.apache.thrift.meta_data.FieldMetaData("iLBPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_NET_PORT, new org.apache.thrift.meta_data.FieldMetaData("iNetPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_CONTROL_PORT, new org.apache.thrift.meta_data.FieldMetaData("iControlPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InfoForMonitor.class, metaDataMap);
  }

  public InfoForMonitor() {
  }

  public InfoForMonitor(
    java.util.List<InfoForMonitor> lstSubSvrInfo,
    java.util.List<ChannelInfoForMonitor> lstChannel,
    java.util.List<ChannelInfoForMonitor> lstManageChannel,
    int iSvrType,
    java.lang.String strIP,
    int iLBPort,
    int iNetPort,
    int iControlPort)
  {
    this();
    this.lstSubSvrInfo = lstSubSvrInfo;
    this.lstChannel = lstChannel;
    this.lstManageChannel = lstManageChannel;
    this.iSvrType = iSvrType;
    setISvrTypeIsSet(true);
    this.strIP = strIP;
    this.iLBPort = iLBPort;
    setILBPortIsSet(true);
    this.iNetPort = iNetPort;
    setINetPortIsSet(true);
    this.iControlPort = iControlPort;
    setIControlPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InfoForMonitor(InfoForMonitor other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLstSubSvrInfo()) {
      java.util.List<InfoForMonitor> __this__lstSubSvrInfo = new java.util.ArrayList<InfoForMonitor>(other.lstSubSvrInfo.size());
      for (InfoForMonitor other_element : other.lstSubSvrInfo) {
        __this__lstSubSvrInfo.add(other_element);
      }
      this.lstSubSvrInfo = __this__lstSubSvrInfo;
    }
    if (other.isSetLstChannel()) {
      java.util.List<ChannelInfoForMonitor> __this__lstChannel = new java.util.ArrayList<ChannelInfoForMonitor>(other.lstChannel.size());
      for (ChannelInfoForMonitor other_element : other.lstChannel) {
        __this__lstChannel.add(new ChannelInfoForMonitor(other_element));
      }
      this.lstChannel = __this__lstChannel;
    }
    if (other.isSetLstManageChannel()) {
      java.util.List<ChannelInfoForMonitor> __this__lstManageChannel = new java.util.ArrayList<ChannelInfoForMonitor>(other.lstManageChannel.size());
      for (ChannelInfoForMonitor other_element : other.lstManageChannel) {
        __this__lstManageChannel.add(new ChannelInfoForMonitor(other_element));
      }
      this.lstManageChannel = __this__lstManageChannel;
    }
    this.iSvrType = other.iSvrType;
    if (other.isSetStrIP()) {
      this.strIP = other.strIP;
    }
    this.iLBPort = other.iLBPort;
    this.iNetPort = other.iNetPort;
    this.iControlPort = other.iControlPort;
  }

  public InfoForMonitor deepCopy() {
    return new InfoForMonitor(this);
  }

  @Override
  public void clear() {
    this.lstSubSvrInfo = null;
    this.lstChannel = null;
    this.lstManageChannel = null;
    setISvrTypeIsSet(false);
    this.iSvrType = 0;
    this.strIP = null;
    setILBPortIsSet(false);
    this.iLBPort = 0;
    setINetPortIsSet(false);
    this.iNetPort = 0;
    setIControlPortIsSet(false);
    this.iControlPort = 0;
  }

  public int getLstSubSvrInfoSize() {
    return (this.lstSubSvrInfo == null) ? 0 : this.lstSubSvrInfo.size();
  }

  public java.util.Iterator<InfoForMonitor> getLstSubSvrInfoIterator() {
    return (this.lstSubSvrInfo == null) ? null : this.lstSubSvrInfo.iterator();
  }

  public void addToLstSubSvrInfo(InfoForMonitor elem) {
    if (this.lstSubSvrInfo == null) {
      this.lstSubSvrInfo = new java.util.ArrayList<InfoForMonitor>();
    }
    this.lstSubSvrInfo.add(elem);
  }

  public java.util.List<InfoForMonitor> getLstSubSvrInfo() {
    return this.lstSubSvrInfo;
  }

  public InfoForMonitor setLstSubSvrInfo(java.util.List<InfoForMonitor> lstSubSvrInfo) {
    this.lstSubSvrInfo = lstSubSvrInfo;
    return this;
  }

  public void unsetLstSubSvrInfo() {
    this.lstSubSvrInfo = null;
  }

  /** Returns true if field lstSubSvrInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLstSubSvrInfo() {
    return this.lstSubSvrInfo != null;
  }

  public void setLstSubSvrInfoIsSet(boolean value) {
    if (!value) {
      this.lstSubSvrInfo = null;
    }
  }

  public int getLstChannelSize() {
    return (this.lstChannel == null) ? 0 : this.lstChannel.size();
  }

  public java.util.Iterator<ChannelInfoForMonitor> getLstChannelIterator() {
    return (this.lstChannel == null) ? null : this.lstChannel.iterator();
  }

  public void addToLstChannel(ChannelInfoForMonitor elem) {
    if (this.lstChannel == null) {
      this.lstChannel = new java.util.ArrayList<ChannelInfoForMonitor>();
    }
    this.lstChannel.add(elem);
  }

  public java.util.List<ChannelInfoForMonitor> getLstChannel() {
    return this.lstChannel;
  }

  public InfoForMonitor setLstChannel(java.util.List<ChannelInfoForMonitor> lstChannel) {
    this.lstChannel = lstChannel;
    return this;
  }

  public void unsetLstChannel() {
    this.lstChannel = null;
  }

  /** Returns true if field lstChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetLstChannel() {
    return this.lstChannel != null;
  }

  public void setLstChannelIsSet(boolean value) {
    if (!value) {
      this.lstChannel = null;
    }
  }

  public int getLstManageChannelSize() {
    return (this.lstManageChannel == null) ? 0 : this.lstManageChannel.size();
  }

  public java.util.Iterator<ChannelInfoForMonitor> getLstManageChannelIterator() {
    return (this.lstManageChannel == null) ? null : this.lstManageChannel.iterator();
  }

  public void addToLstManageChannel(ChannelInfoForMonitor elem) {
    if (this.lstManageChannel == null) {
      this.lstManageChannel = new java.util.ArrayList<ChannelInfoForMonitor>();
    }
    this.lstManageChannel.add(elem);
  }

  public java.util.List<ChannelInfoForMonitor> getLstManageChannel() {
    return this.lstManageChannel;
  }

  public InfoForMonitor setLstManageChannel(java.util.List<ChannelInfoForMonitor> lstManageChannel) {
    this.lstManageChannel = lstManageChannel;
    return this;
  }

  public void unsetLstManageChannel() {
    this.lstManageChannel = null;
  }

  /** Returns true if field lstManageChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetLstManageChannel() {
    return this.lstManageChannel != null;
  }

  public void setLstManageChannelIsSet(boolean value) {
    if (!value) {
      this.lstManageChannel = null;
    }
  }

  public int getISvrType() {
    return this.iSvrType;
  }

  public InfoForMonitor setISvrType(int iSvrType) {
    this.iSvrType = iSvrType;
    setISvrTypeIsSet(true);
    return this;
  }

  public void unsetISvrType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVRTYPE_ISSET_ID);
  }

  /** Returns true if field iSvrType is set (has been assigned a value) and false otherwise */
  public boolean isSetISvrType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVRTYPE_ISSET_ID);
  }

  public void setISvrTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVRTYPE_ISSET_ID, value);
  }

  public java.lang.String getStrIP() {
    return this.strIP;
  }

  public InfoForMonitor setStrIP(java.lang.String strIP) {
    this.strIP = strIP;
    return this;
  }

  public void unsetStrIP() {
    this.strIP = null;
  }

  /** Returns true if field strIP is set (has been assigned a value) and false otherwise */
  public boolean isSetStrIP() {
    return this.strIP != null;
  }

  public void setStrIPIsSet(boolean value) {
    if (!value) {
      this.strIP = null;
    }
  }

  public int getILBPort() {
    return this.iLBPort;
  }

  public InfoForMonitor setILBPort(int iLBPort) {
    this.iLBPort = iLBPort;
    setILBPortIsSet(true);
    return this;
  }

  public void unsetILBPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ILBPORT_ISSET_ID);
  }

  /** Returns true if field iLBPort is set (has been assigned a value) and false otherwise */
  public boolean isSetILBPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ILBPORT_ISSET_ID);
  }

  public void setILBPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ILBPORT_ISSET_ID, value);
  }

  public int getINetPort() {
    return this.iNetPort;
  }

  public InfoForMonitor setINetPort(int iNetPort) {
    this.iNetPort = iNetPort;
    setINetPortIsSet(true);
    return this;
  }

  public void unsetINetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INETPORT_ISSET_ID);
  }

  /** Returns true if field iNetPort is set (has been assigned a value) and false otherwise */
  public boolean isSetINetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INETPORT_ISSET_ID);
  }

  public void setINetPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INETPORT_ISSET_ID, value);
  }

  public int getIControlPort() {
    return this.iControlPort;
  }

  public InfoForMonitor setIControlPort(int iControlPort) {
    this.iControlPort = iControlPort;
    setIControlPortIsSet(true);
    return this;
  }

  public void unsetIControlPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ICONTROLPORT_ISSET_ID);
  }

  /** Returns true if field iControlPort is set (has been assigned a value) and false otherwise */
  public boolean isSetIControlPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ICONTROLPORT_ISSET_ID);
  }

  public void setIControlPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ICONTROLPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case LST_SUB_SVR_INFO:
      if (value == null) {
        unsetLstSubSvrInfo();
      } else {
        setLstSubSvrInfo((java.util.List<InfoForMonitor>)value);
      }
      break;

    case LST_CHANNEL:
      if (value == null) {
        unsetLstChannel();
      } else {
        setLstChannel((java.util.List<ChannelInfoForMonitor>)value);
      }
      break;

    case LST_MANAGE_CHANNEL:
      if (value == null) {
        unsetLstManageChannel();
      } else {
        setLstManageChannel((java.util.List<ChannelInfoForMonitor>)value);
      }
      break;

    case I_SVR_TYPE:
      if (value == null) {
        unsetISvrType();
      } else {
        setISvrType((java.lang.Integer)value);
      }
      break;

    case STR_IP:
      if (value == null) {
        unsetStrIP();
      } else {
        setStrIP((java.lang.String)value);
      }
      break;

    case I_LBPORT:
      if (value == null) {
        unsetILBPort();
      } else {
        setILBPort((java.lang.Integer)value);
      }
      break;

    case I_NET_PORT:
      if (value == null) {
        unsetINetPort();
      } else {
        setINetPort((java.lang.Integer)value);
      }
      break;

    case I_CONTROL_PORT:
      if (value == null) {
        unsetIControlPort();
      } else {
        setIControlPort((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LST_SUB_SVR_INFO:
      return getLstSubSvrInfo();

    case LST_CHANNEL:
      return getLstChannel();

    case LST_MANAGE_CHANNEL:
      return getLstManageChannel();

    case I_SVR_TYPE:
      return getISvrType();

    case STR_IP:
      return getStrIP();

    case I_LBPORT:
      return getILBPort();

    case I_NET_PORT:
      return getINetPort();

    case I_CONTROL_PORT:
      return getIControlPort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LST_SUB_SVR_INFO:
      return isSetLstSubSvrInfo();
    case LST_CHANNEL:
      return isSetLstChannel();
    case LST_MANAGE_CHANNEL:
      return isSetLstManageChannel();
    case I_SVR_TYPE:
      return isSetISvrType();
    case STR_IP:
      return isSetStrIP();
    case I_LBPORT:
      return isSetILBPort();
    case I_NET_PORT:
      return isSetINetPort();
    case I_CONTROL_PORT:
      return isSetIControlPort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InfoForMonitor)
      return this.equals((InfoForMonitor)that);
    return false;
  }

  public boolean equals(InfoForMonitor that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lstSubSvrInfo = true && this.isSetLstSubSvrInfo();
    boolean that_present_lstSubSvrInfo = true && that.isSetLstSubSvrInfo();
    if (this_present_lstSubSvrInfo || that_present_lstSubSvrInfo) {
      if (!(this_present_lstSubSvrInfo && that_present_lstSubSvrInfo))
        return false;
      if (!this.lstSubSvrInfo.equals(that.lstSubSvrInfo))
        return false;
    }

    boolean this_present_lstChannel = true && this.isSetLstChannel();
    boolean that_present_lstChannel = true && that.isSetLstChannel();
    if (this_present_lstChannel || that_present_lstChannel) {
      if (!(this_present_lstChannel && that_present_lstChannel))
        return false;
      if (!this.lstChannel.equals(that.lstChannel))
        return false;
    }

    boolean this_present_lstManageChannel = true && this.isSetLstManageChannel();
    boolean that_present_lstManageChannel = true && that.isSetLstManageChannel();
    if (this_present_lstManageChannel || that_present_lstManageChannel) {
      if (!(this_present_lstManageChannel && that_present_lstManageChannel))
        return false;
      if (!this.lstManageChannel.equals(that.lstManageChannel))
        return false;
    }

    boolean this_present_iSvrType = true;
    boolean that_present_iSvrType = true;
    if (this_present_iSvrType || that_present_iSvrType) {
      if (!(this_present_iSvrType && that_present_iSvrType))
        return false;
      if (this.iSvrType != that.iSvrType)
        return false;
    }

    boolean this_present_strIP = true && this.isSetStrIP();
    boolean that_present_strIP = true && that.isSetStrIP();
    if (this_present_strIP || that_present_strIP) {
      if (!(this_present_strIP && that_present_strIP))
        return false;
      if (!this.strIP.equals(that.strIP))
        return false;
    }

    boolean this_present_iLBPort = true;
    boolean that_present_iLBPort = true;
    if (this_present_iLBPort || that_present_iLBPort) {
      if (!(this_present_iLBPort && that_present_iLBPort))
        return false;
      if (this.iLBPort != that.iLBPort)
        return false;
    }

    boolean this_present_iNetPort = true;
    boolean that_present_iNetPort = true;
    if (this_present_iNetPort || that_present_iNetPort) {
      if (!(this_present_iNetPort && that_present_iNetPort))
        return false;
      if (this.iNetPort != that.iNetPort)
        return false;
    }

    boolean this_present_iControlPort = true;
    boolean that_present_iControlPort = true;
    if (this_present_iControlPort || that_present_iControlPort) {
      if (!(this_present_iControlPort && that_present_iControlPort))
        return false;
      if (this.iControlPort != that.iControlPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLstSubSvrInfo()) ? 131071 : 524287);
    if (isSetLstSubSvrInfo())
      hashCode = hashCode * 8191 + lstSubSvrInfo.hashCode();

    hashCode = hashCode * 8191 + ((isSetLstChannel()) ? 131071 : 524287);
    if (isSetLstChannel())
      hashCode = hashCode * 8191 + lstChannel.hashCode();

    hashCode = hashCode * 8191 + ((isSetLstManageChannel()) ? 131071 : 524287);
    if (isSetLstManageChannel())
      hashCode = hashCode * 8191 + lstManageChannel.hashCode();

    hashCode = hashCode * 8191 + iSvrType;

    hashCode = hashCode * 8191 + ((isSetStrIP()) ? 131071 : 524287);
    if (isSetStrIP())
      hashCode = hashCode * 8191 + strIP.hashCode();

    hashCode = hashCode * 8191 + iLBPort;

    hashCode = hashCode * 8191 + iNetPort;

    hashCode = hashCode * 8191 + iControlPort;

    return hashCode;
  }

  @Override
  public int compareTo(InfoForMonitor other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetLstSubSvrInfo()).compareTo(other.isSetLstSubSvrInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLstSubSvrInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstSubSvrInfo, other.lstSubSvrInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLstChannel()).compareTo(other.isSetLstChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLstChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstChannel, other.lstChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLstManageChannel()).compareTo(other.isSetLstManageChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLstManageChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstManageChannel, other.lstManageChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetISvrType()).compareTo(other.isSetISvrType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetISvrType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iSvrType, other.iSvrType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStrIP()).compareTo(other.isSetStrIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strIP, other.strIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetILBPort()).compareTo(other.isSetILBPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetILBPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iLBPort, other.iLBPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetINetPort()).compareTo(other.isSetINetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetINetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iNetPort, other.iNetPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIControlPort()).compareTo(other.isSetIControlPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIControlPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iControlPort, other.iControlPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InfoForMonitor(");
    boolean first = true;

    sb.append("lstSubSvrInfo:");
    if (this.lstSubSvrInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.lstSubSvrInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lstChannel:");
    if (this.lstChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.lstChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lstManageChannel:");
    if (this.lstManageChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.lstManageChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iSvrType:");
    sb.append(this.iSvrType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strIP:");
    if (this.strIP == null) {
      sb.append("null");
    } else {
      sb.append(this.strIP);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iLBPort:");
    sb.append(this.iLBPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iNetPort:");
    sb.append(this.iNetPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iControlPort:");
    sb.append(this.iControlPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InfoForMonitorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InfoForMonitorStandardScheme getScheme() {
      return new InfoForMonitorStandardScheme();
    }
  }

  private static class InfoForMonitorStandardScheme extends org.apache.thrift.scheme.StandardScheme<InfoForMonitor> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LST_SUB_SVR_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.lstSubSvrInfo = new java.util.ArrayList<InfoForMonitor>(_list32.size);
                InfoForMonitor _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = new InfoForMonitor();
                  _elem33.read(iprot);
                  struct.lstSubSvrInfo.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setLstSubSvrInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LST_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.lstChannel = new java.util.ArrayList<ChannelInfoForMonitor>(_list35.size);
                ChannelInfoForMonitor _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = new ChannelInfoForMonitor();
                  _elem36.read(iprot);
                  struct.lstChannel.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setLstChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LST_MANAGE_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.lstManageChannel = new java.util.ArrayList<ChannelInfoForMonitor>(_list38.size);
                ChannelInfoForMonitor _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = new ChannelInfoForMonitor();
                  _elem39.read(iprot);
                  struct.lstManageChannel.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setLstManageChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I_SVR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iSvrType = iprot.readI32();
              struct.setISvrTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STR_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strIP = iprot.readString();
              struct.setStrIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I_LBPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iLBPort = iprot.readI32();
              struct.setILBPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I_NET_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iNetPort = iprot.readI32();
              struct.setINetPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // I_CONTROL_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iControlPort = iprot.readI32();
              struct.setIControlPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InfoForMonitor struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lstSubSvrInfo != null) {
        oprot.writeFieldBegin(LST_SUB_SVR_INFO_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lstSubSvrInfo.size()));
          for (InfoForMonitor _iter41 : struct.lstSubSvrInfo)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lstChannel != null) {
        oprot.writeFieldBegin(LST_CHANNEL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lstChannel.size()));
          for (ChannelInfoForMonitor _iter42 : struct.lstChannel)
          {
            _iter42.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.lstManageChannel != null) {
        oprot.writeFieldBegin(LST_MANAGE_CHANNEL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.lstManageChannel.size()));
          for (ChannelInfoForMonitor _iter43 : struct.lstManageChannel)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I_SVR_TYPE_FIELD_DESC);
      oprot.writeI32(struct.iSvrType);
      oprot.writeFieldEnd();
      if (struct.strIP != null) {
        oprot.writeFieldBegin(STR_IP_FIELD_DESC);
        oprot.writeString(struct.strIP);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I_LBPORT_FIELD_DESC);
      oprot.writeI32(struct.iLBPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_NET_PORT_FIELD_DESC);
      oprot.writeI32(struct.iNetPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_CONTROL_PORT_FIELD_DESC);
      oprot.writeI32(struct.iControlPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InfoForMonitorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InfoForMonitorTupleScheme getScheme() {
      return new InfoForMonitorTupleScheme();
    }
  }

  private static class InfoForMonitorTupleScheme extends org.apache.thrift.scheme.TupleScheme<InfoForMonitor> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLstSubSvrInfo()) {
        optionals.set(0);
      }
      if (struct.isSetLstChannel()) {
        optionals.set(1);
      }
      if (struct.isSetLstManageChannel()) {
        optionals.set(2);
      }
      if (struct.isSetISvrType()) {
        optionals.set(3);
      }
      if (struct.isSetStrIP()) {
        optionals.set(4);
      }
      if (struct.isSetILBPort()) {
        optionals.set(5);
      }
      if (struct.isSetINetPort()) {
        optionals.set(6);
      }
      if (struct.isSetIControlPort()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetLstSubSvrInfo()) {
        {
          oprot.writeI32(struct.lstSubSvrInfo.size());
          for (InfoForMonitor _iter44 : struct.lstSubSvrInfo)
          {
            _iter44.write(oprot);
          }
        }
      }
      if (struct.isSetLstChannel()) {
        {
          oprot.writeI32(struct.lstChannel.size());
          for (ChannelInfoForMonitor _iter45 : struct.lstChannel)
          {
            _iter45.write(oprot);
          }
        }
      }
      if (struct.isSetLstManageChannel()) {
        {
          oprot.writeI32(struct.lstManageChannel.size());
          for (ChannelInfoForMonitor _iter46 : struct.lstManageChannel)
          {
            _iter46.write(oprot);
          }
        }
      }
      if (struct.isSetISvrType()) {
        oprot.writeI32(struct.iSvrType);
      }
      if (struct.isSetStrIP()) {
        oprot.writeString(struct.strIP);
      }
      if (struct.isSetILBPort()) {
        oprot.writeI32(struct.iLBPort);
      }
      if (struct.isSetINetPort()) {
        oprot.writeI32(struct.iNetPort);
      }
      if (struct.isSetIControlPort()) {
        oprot.writeI32(struct.iControlPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InfoForMonitor struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lstSubSvrInfo = new java.util.ArrayList<InfoForMonitor>(_list47.size);
          InfoForMonitor _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = new InfoForMonitor();
            _elem48.read(iprot);
            struct.lstSubSvrInfo.add(_elem48);
          }
        }
        struct.setLstSubSvrInfoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list50 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lstChannel = new java.util.ArrayList<ChannelInfoForMonitor>(_list50.size);
          ChannelInfoForMonitor _elem51;
          for (int _i52 = 0; _i52 < _list50.size; ++_i52)
          {
            _elem51 = new ChannelInfoForMonitor();
            _elem51.read(iprot);
            struct.lstChannel.add(_elem51);
          }
        }
        struct.setLstChannelIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.lstManageChannel = new java.util.ArrayList<ChannelInfoForMonitor>(_list53.size);
          ChannelInfoForMonitor _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = new ChannelInfoForMonitor();
            _elem54.read(iprot);
            struct.lstManageChannel.add(_elem54);
          }
        }
        struct.setLstManageChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.iSvrType = iprot.readI32();
        struct.setISvrTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.strIP = iprot.readString();
        struct.setStrIPIsSet(true);
      }
      if (incoming.get(5)) {
        struct.iLBPort = iprot.readI32();
        struct.setILBPortIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iNetPort = iprot.readI32();
        struct.setINetPortIsSet(true);
      }
      if (incoming.get(7)) {
        struct.iControlPort = iprot.readI32();
        struct.setIControlPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


package com.sensing.core.thrift.cap.service;

import com.sensing.core.thrift.cap.bean.CapChannelConfig;
import com.sensing.core.thrift.cap.bean.CapFacesSet;
import com.sensing.core.thrift.cap.bean.CapFeaturesSet;
import com.sensing.core.thrift.cap.bean.CapReturn;
import com.sensing.core.thrift.cap.bean.CapSceneImageResult;
import com.sensing.core.thrift.cap.bean.InfoForMonitor;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class CaptureServer {

  public interface Iface {

    public CapReturn AddChannel(CapChannelConfig cfg) throws org.apache.thrift.TException;

    public CapReturn DelChannel(java.lang.String strChannelID) throws org.apache.thrift.TException;

    public CapReturn DelChannelByRegionID(int iRegionID) throws org.apache.thrift.TException;

    public CapReturn ModifyChannel(CapChannelConfig cfg) throws org.apache.thrift.TException;

    public java.util.List<CapFacesSet> DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException;

    public CapReturn OpenCloseChannels(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag) throws org.apache.thrift.TException;

    public CapReturn GetVideoProgress(java.lang.String strChannelID) throws org.apache.thrift.TException;

    public CapReturn NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException;

    public CapReturn ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException;

    public CapSceneImageResult GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException;

    public InfoForMonitor GetServersInfo() throws org.apache.thrift.TException;

    public java.util.List<CapFeaturesSet> DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void AddChannel(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void DelChannel(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void DelChannelByRegionID(int iRegionID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void ModifyChannel(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException;

    public void OpenCloseChannels(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void GetVideoProgress(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void NotifyMessage(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void ReceiveMessage(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException;

    public void GetServersInfo(org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor> resultHandler) throws org.apache.thrift.TException;

    public void DetectFeatures(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CapReturn AddChannel(CapChannelConfig cfg) throws org.apache.thrift.TException
    {
      send_AddChannel(cfg);
      return recv_AddChannel();
    }

    public void send_AddChannel(CapChannelConfig cfg) throws org.apache.thrift.TException
    {
      AddChannel_args args = new AddChannel_args();
      args.setCfg(cfg);
      sendBase("AddChannel", args);
    }

    public CapReturn recv_AddChannel() throws org.apache.thrift.TException
    {
      AddChannel_result result = new AddChannel_result();
      receiveBase(result, "AddChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddChannel failed: unknown result");
    }

    public CapReturn DelChannel(java.lang.String strChannelID) throws org.apache.thrift.TException
    {
      send_DelChannel(strChannelID);
      return recv_DelChannel();
    }

    public void send_DelChannel(java.lang.String strChannelID) throws org.apache.thrift.TException
    {
      DelChannel_args args = new DelChannel_args();
      args.setStrChannelID(strChannelID);
      sendBase("DelChannel", args);
    }

    public CapReturn recv_DelChannel() throws org.apache.thrift.TException
    {
      DelChannel_result result = new DelChannel_result();
      receiveBase(result, "DelChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DelChannel failed: unknown result");
    }

    public CapReturn DelChannelByRegionID(int iRegionID) throws org.apache.thrift.TException
    {
      send_DelChannelByRegionID(iRegionID);
      return recv_DelChannelByRegionID();
    }

    public void send_DelChannelByRegionID(int iRegionID) throws org.apache.thrift.TException
    {
      DelChannelByRegionID_args args = new DelChannelByRegionID_args();
      args.setIRegionID(iRegionID);
      sendBase("DelChannelByRegionID", args);
    }

    public CapReturn recv_DelChannelByRegionID() throws org.apache.thrift.TException
    {
      DelChannelByRegionID_result result = new DelChannelByRegionID_result();
      receiveBase(result, "DelChannelByRegionID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DelChannelByRegionID failed: unknown result");
    }

    public CapReturn ModifyChannel(CapChannelConfig cfg) throws org.apache.thrift.TException
    {
      send_ModifyChannel(cfg);
      return recv_ModifyChannel();
    }

    public void send_ModifyChannel(CapChannelConfig cfg) throws org.apache.thrift.TException
    {
      ModifyChannel_args args = new ModifyChannel_args();
      args.setCfg(cfg);
      sendBase("ModifyChannel", args);
    }

    public CapReturn recv_ModifyChannel() throws org.apache.thrift.TException
    {
      ModifyChannel_result result = new ModifyChannel_result();
      receiveBase(result, "ModifyChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ModifyChannel failed: unknown result");
    }

    public java.util.List<CapFacesSet> DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException
    {
      send_DetectFaces(lstImgs);
      return recv_DetectFaces();
    }

    public void send_DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException
    {
      DetectFaces_args args = new DetectFaces_args();
      args.setLstImgs(lstImgs);
      sendBase("DetectFaces", args);
    }

    public java.util.List<CapFacesSet> recv_DetectFaces() throws org.apache.thrift.TException
    {
      DetectFaces_result result = new DetectFaces_result();
      receiveBase(result, "DetectFaces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DetectFaces failed: unknown result");
    }

    public CapReturn OpenCloseChannels(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag) throws org.apache.thrift.TException
    {
      send_OpenCloseChannels(lstChnls, iOpenFlag, iAllFlag);
      return recv_OpenCloseChannels();
    }

    public void send_OpenCloseChannels(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag) throws org.apache.thrift.TException
    {
      OpenCloseChannels_args args = new OpenCloseChannels_args();
      args.setLstChnls(lstChnls);
      args.setIOpenFlag(iOpenFlag);
      args.setIAllFlag(iAllFlag);
      sendBase("OpenCloseChannels", args);
    }

    public CapReturn recv_OpenCloseChannels() throws org.apache.thrift.TException
    {
      OpenCloseChannels_result result = new OpenCloseChannels_result();
      receiveBase(result, "OpenCloseChannels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "OpenCloseChannels failed: unknown result");
    }

    public CapReturn GetVideoProgress(java.lang.String strChannelID) throws org.apache.thrift.TException
    {
      send_GetVideoProgress(strChannelID);
      return recv_GetVideoProgress();
    }

    public void send_GetVideoProgress(java.lang.String strChannelID) throws org.apache.thrift.TException
    {
      GetVideoProgress_args args = new GetVideoProgress_args();
      args.setStrChannelID(strChannelID);
      sendBase("GetVideoProgress", args);
    }

    public CapReturn recv_GetVideoProgress() throws org.apache.thrift.TException
    {
      GetVideoProgress_result result = new GetVideoProgress_result();
      receiveBase(result, "GetVideoProgress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetVideoProgress failed: unknown result");
    }

    public CapReturn NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException
    {
      send_NotifyMessage(iMsg, strNotifyJson);
      return recv_NotifyMessage();
    }

    public void send_NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException
    {
      NotifyMessage_args args = new NotifyMessage_args();
      args.setIMsg(iMsg);
      args.setStrNotifyJson(strNotifyJson);
      sendBase("NotifyMessage", args);
    }

    public CapReturn recv_NotifyMessage() throws org.apache.thrift.TException
    {
      NotifyMessage_result result = new NotifyMessage_result();
      receiveBase(result, "NotifyMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "NotifyMessage failed: unknown result");
    }

    public CapReturn ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException
    {
      send_ReceiveMessage(iMsg, strReceiveJson);
      return recv_ReceiveMessage();
    }

    public void send_ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException
    {
      ReceiveMessage_args args = new ReceiveMessage_args();
      args.setIMsg(iMsg);
      args.setStrReceiveJson(strReceiveJson);
      sendBase("ReceiveMessage", args);
    }

    public CapReturn recv_ReceiveMessage() throws org.apache.thrift.TException
    {
      ReceiveMessage_result result = new ReceiveMessage_result();
      receiveBase(result, "ReceiveMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReceiveMessage failed: unknown result");
    }

    public CapSceneImageResult GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException
    {
      send_GetSceneImage(strChannelID, strCapID);
      return recv_GetSceneImage();
    }

    public void send_GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException
    {
      GetSceneImage_args args = new GetSceneImage_args();
      args.setStrChannelID(strChannelID);
      args.setStrCapID(strCapID);
      sendBase("GetSceneImage", args);
    }

    public CapSceneImageResult recv_GetSceneImage() throws org.apache.thrift.TException
    {
      GetSceneImage_result result = new GetSceneImage_result();
      receiveBase(result, "GetSceneImage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSceneImage failed: unknown result");
    }

    public InfoForMonitor GetServersInfo() throws org.apache.thrift.TException
    {
      send_GetServersInfo();
      return recv_GetServersInfo();
    }

    public void send_GetServersInfo() throws org.apache.thrift.TException
    {
      GetServersInfo_args args = new GetServersInfo_args();
      sendBase("GetServersInfo", args);
    }

    public InfoForMonitor recv_GetServersInfo() throws org.apache.thrift.TException
    {
      GetServersInfo_result result = new GetServersInfo_result();
      receiveBase(result, "GetServersInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetServersInfo failed: unknown result");
    }

    public java.util.List<CapFeaturesSet> DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException
    {
      send_DetectFeatures(imgBytes);
      return recv_DetectFeatures();
    }

    public void send_DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException
    {
      DetectFeatures_args args = new DetectFeatures_args();
      args.setImgBytes(imgBytes);
      sendBase("DetectFeatures", args);
    }

    public java.util.List<CapFeaturesSet> recv_DetectFeatures() throws org.apache.thrift.TException
    {
      DetectFeatures_result result = new DetectFeatures_result();
      receiveBase(result, "DetectFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DetectFeatures failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void AddChannel(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddChannel_call method_call = new AddChannel_call(cfg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddChannel_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private CapChannelConfig cfg;
      public AddChannel_call(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cfg = cfg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddChannel_args args = new AddChannel_args();
        args.setCfg(cfg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddChannel();
      }
    }

    public void DelChannel(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelChannel_call method_call = new DelChannel_call(strChannelID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelChannel_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private java.lang.String strChannelID;
      public DelChannel_call(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strChannelID = strChannelID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelChannel_args args = new DelChannel_args();
        args.setStrChannelID(strChannelID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DelChannel();
      }
    }

    public void DelChannelByRegionID(int iRegionID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelChannelByRegionID_call method_call = new DelChannelByRegionID_call(iRegionID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelChannelByRegionID_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private int iRegionID;
      public DelChannelByRegionID_call(int iRegionID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iRegionID = iRegionID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelChannelByRegionID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelChannelByRegionID_args args = new DelChannelByRegionID_args();
        args.setIRegionID(iRegionID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DelChannelByRegionID();
      }
    }

    public void ModifyChannel(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ModifyChannel_call method_call = new ModifyChannel_call(cfg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ModifyChannel_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private CapChannelConfig cfg;
      public ModifyChannel_call(CapChannelConfig cfg, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cfg = cfg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ModifyChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ModifyChannel_args args = new ModifyChannel_args();
        args.setCfg(cfg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ModifyChannel();
      }
    }

    public void DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DetectFaces_call method_call = new DetectFaces_call(lstImgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DetectFaces_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CapFacesSet>> {
      private java.util.List<java.nio.ByteBuffer> lstImgs;
      public DetectFaces_call(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lstImgs = lstImgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DetectFaces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DetectFaces_args args = new DetectFaces_args();
        args.setLstImgs(lstImgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CapFacesSet> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DetectFaces();
      }
    }

    public void OpenCloseChannels(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      OpenCloseChannels_call method_call = new OpenCloseChannels_call(lstChnls, iOpenFlag, iAllFlag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class OpenCloseChannels_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private java.util.List<java.lang.String> lstChnls;
      private int iOpenFlag;
      private int iAllFlag;
      public OpenCloseChannels_call(java.util.List<java.lang.String> lstChnls, int iOpenFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lstChnls = lstChnls;
        this.iOpenFlag = iOpenFlag;
        this.iAllFlag = iAllFlag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("OpenCloseChannels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        OpenCloseChannels_args args = new OpenCloseChannels_args();
        args.setLstChnls(lstChnls);
        args.setIOpenFlag(iOpenFlag);
        args.setIAllFlag(iAllFlag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_OpenCloseChannels();
      }
    }

    public void GetVideoProgress(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetVideoProgress_call method_call = new GetVideoProgress_call(strChannelID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetVideoProgress_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private java.lang.String strChannelID;
      public GetVideoProgress_call(java.lang.String strChannelID, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strChannelID = strChannelID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetVideoProgress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetVideoProgress_args args = new GetVideoProgress_args();
        args.setStrChannelID(strChannelID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetVideoProgress();
      }
    }

    public void NotifyMessage(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      NotifyMessage_call method_call = new NotifyMessage_call(iMsg, strNotifyJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class NotifyMessage_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private int iMsg;
      private java.lang.String strNotifyJson;
      public NotifyMessage_call(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iMsg = iMsg;
        this.strNotifyJson = strNotifyJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("NotifyMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        NotifyMessage_args args = new NotifyMessage_args();
        args.setIMsg(iMsg);
        args.setStrNotifyJson(strNotifyJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_NotifyMessage();
      }
    }

    public void ReceiveMessage(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReceiveMessage_call method_call = new ReceiveMessage_call(iMsg, strReceiveJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReceiveMessage_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private int iMsg;
      private java.lang.String strReceiveJson;
      public ReceiveMessage_call(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iMsg = iMsg;
        this.strReceiveJson = strReceiveJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReceiveMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReceiveMessage_args args = new ReceiveMessage_args();
        args.setIMsg(iMsg);
        args.setStrReceiveJson(strReceiveJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReceiveMessage();
      }
    }

    public void GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSceneImage_call method_call = new GetSceneImage_call(strChannelID, strCapID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSceneImage_call extends org.apache.thrift.async.TAsyncMethodCall<CapSceneImageResult> {
      private java.lang.String strChannelID;
      private java.lang.String strCapID;
      public GetSceneImage_call(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strChannelID = strChannelID;
        this.strCapID = strCapID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSceneImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSceneImage_args args = new GetSceneImage_args();
        args.setStrChannelID(strChannelID);
        args.setStrCapID(strCapID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapSceneImageResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSceneImage();
      }
    }

    public void GetServersInfo(org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetServersInfo_call method_call = new GetServersInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetServersInfo_call extends org.apache.thrift.async.TAsyncMethodCall<InfoForMonitor> {
      public GetServersInfo_call(org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetServersInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetServersInfo_args args = new GetServersInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public InfoForMonitor getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetServersInfo();
      }
    }

    public void DetectFeatures(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DetectFeatures_call method_call = new DetectFeatures_call(imgBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DetectFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CapFeaturesSet>> {
      private java.nio.ByteBuffer imgBytes;
      public DetectFeatures_call(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imgBytes = imgBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DetectFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DetectFeatures_args args = new DetectFeatures_args();
        args.setImgBytes(imgBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CapFeaturesSet> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DetectFeatures();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("AddChannel", new AddChannel());
      processMap.put("DelChannel", new DelChannel());
      processMap.put("DelChannelByRegionID", new DelChannelByRegionID());
      processMap.put("ModifyChannel", new ModifyChannel());
      processMap.put("DetectFaces", new DetectFaces());
      processMap.put("OpenCloseChannels", new OpenCloseChannels());
      processMap.put("GetVideoProgress", new GetVideoProgress());
      processMap.put("NotifyMessage", new NotifyMessage());
      processMap.put("ReceiveMessage", new ReceiveMessage());
      processMap.put("GetSceneImage", new GetSceneImage());
      processMap.put("GetServersInfo", new GetServersInfo());
      processMap.put("DetectFeatures", new DetectFeatures());
      return processMap;
    }

    public static class AddChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddChannel_args> {
      public AddChannel() {
        super("AddChannel");
      }

      public AddChannel_args getEmptyArgsInstance() {
        return new AddChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddChannel_result getResult(I iface, AddChannel_args args) throws org.apache.thrift.TException {
        AddChannel_result result = new AddChannel_result();
        result.success = iface.AddChannel(args.cfg);
        return result;
      }
    }

    public static class DelChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelChannel_args> {
      public DelChannel() {
        super("DelChannel");
      }

      public DelChannel_args getEmptyArgsInstance() {
        return new DelChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DelChannel_result getResult(I iface, DelChannel_args args) throws org.apache.thrift.TException {
        DelChannel_result result = new DelChannel_result();
        result.success = iface.DelChannel(args.strChannelID);
        return result;
      }
    }

    public static class DelChannelByRegionID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelChannelByRegionID_args> {
      public DelChannelByRegionID() {
        super("DelChannelByRegionID");
      }

      public DelChannelByRegionID_args getEmptyArgsInstance() {
        return new DelChannelByRegionID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DelChannelByRegionID_result getResult(I iface, DelChannelByRegionID_args args) throws org.apache.thrift.TException {
        DelChannelByRegionID_result result = new DelChannelByRegionID_result();
        result.success = iface.DelChannelByRegionID(args.iRegionID);
        return result;
      }
    }

    public static class ModifyChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ModifyChannel_args> {
      public ModifyChannel() {
        super("ModifyChannel");
      }

      public ModifyChannel_args getEmptyArgsInstance() {
        return new ModifyChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ModifyChannel_result getResult(I iface, ModifyChannel_args args) throws org.apache.thrift.TException {
        ModifyChannel_result result = new ModifyChannel_result();
        result.success = iface.ModifyChannel(args.cfg);
        return result;
      }
    }

    public static class DetectFaces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DetectFaces_args> {
      public DetectFaces() {
        super("DetectFaces");
      }

      public DetectFaces_args getEmptyArgsInstance() {
        return new DetectFaces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DetectFaces_result getResult(I iface, DetectFaces_args args) throws org.apache.thrift.TException {
        DetectFaces_result result = new DetectFaces_result();
        result.success = iface.DetectFaces(args.lstImgs);
        return result;
      }
    }

    public static class OpenCloseChannels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, OpenCloseChannels_args> {
      public OpenCloseChannels() {
        super("OpenCloseChannels");
      }

      public OpenCloseChannels_args getEmptyArgsInstance() {
        return new OpenCloseChannels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public OpenCloseChannels_result getResult(I iface, OpenCloseChannels_args args) throws org.apache.thrift.TException {
        OpenCloseChannels_result result = new OpenCloseChannels_result();
        result.success = iface.OpenCloseChannels(args.lstChnls, args.iOpenFlag, args.iAllFlag);
        return result;
      }
    }

    public static class GetVideoProgress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetVideoProgress_args> {
      public GetVideoProgress() {
        super("GetVideoProgress");
      }

      public GetVideoProgress_args getEmptyArgsInstance() {
        return new GetVideoProgress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetVideoProgress_result getResult(I iface, GetVideoProgress_args args) throws org.apache.thrift.TException {
        GetVideoProgress_result result = new GetVideoProgress_result();
        result.success = iface.GetVideoProgress(args.strChannelID);
        return result;
      }
    }

    public static class NotifyMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, NotifyMessage_args> {
      public NotifyMessage() {
        super("NotifyMessage");
      }

      public NotifyMessage_args getEmptyArgsInstance() {
        return new NotifyMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public NotifyMessage_result getResult(I iface, NotifyMessage_args args) throws org.apache.thrift.TException {
        NotifyMessage_result result = new NotifyMessage_result();
        result.success = iface.NotifyMessage(args.iMsg, args.strNotifyJson);
        return result;
      }
    }

    public static class ReceiveMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReceiveMessage_args> {
      public ReceiveMessage() {
        super("ReceiveMessage");
      }

      public ReceiveMessage_args getEmptyArgsInstance() {
        return new ReceiveMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReceiveMessage_result getResult(I iface, ReceiveMessage_args args) throws org.apache.thrift.TException {
        ReceiveMessage_result result = new ReceiveMessage_result();
        result.success = iface.ReceiveMessage(args.iMsg, args.strReceiveJson);
        return result;
      }
    }

    public static class GetSceneImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSceneImage_args> {
      public GetSceneImage() {
        super("GetSceneImage");
      }

      public GetSceneImage_args getEmptyArgsInstance() {
        return new GetSceneImage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSceneImage_result getResult(I iface, GetSceneImage_args args) throws org.apache.thrift.TException {
        GetSceneImage_result result = new GetSceneImage_result();
        result.success = iface.GetSceneImage(args.strChannelID, args.strCapID);
        return result;
      }
    }

    public static class GetServersInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetServersInfo_args> {
      public GetServersInfo() {
        super("GetServersInfo");
      }

      public GetServersInfo_args getEmptyArgsInstance() {
        return new GetServersInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetServersInfo_result getResult(I iface, GetServersInfo_args args) throws org.apache.thrift.TException {
        GetServersInfo_result result = new GetServersInfo_result();
        result.success = iface.GetServersInfo();
        return result;
      }
    }

    public static class DetectFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DetectFeatures_args> {
      public DetectFeatures() {
        super("DetectFeatures");
      }

      public DetectFeatures_args getEmptyArgsInstance() {
        return new DetectFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DetectFeatures_result getResult(I iface, DetectFeatures_args args) throws org.apache.thrift.TException {
        DetectFeatures_result result = new DetectFeatures_result();
        result.success = iface.DetectFeatures(args.imgBytes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("AddChannel", new AddChannel());
      processMap.put("DelChannel", new DelChannel());
      processMap.put("DelChannelByRegionID", new DelChannelByRegionID());
      processMap.put("ModifyChannel", new ModifyChannel());
      processMap.put("DetectFaces", new DetectFaces());
      processMap.put("OpenCloseChannels", new OpenCloseChannels());
      processMap.put("GetVideoProgress", new GetVideoProgress());
      processMap.put("NotifyMessage", new NotifyMessage());
      processMap.put("ReceiveMessage", new ReceiveMessage());
      processMap.put("GetSceneImage", new GetSceneImage());
      processMap.put("GetServersInfo", new GetServersInfo());
      processMap.put("DetectFeatures", new DetectFeatures());
      return processMap;
    }

    public static class AddChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddChannel_args, CapReturn> {
      public AddChannel() {
        super("AddChannel");
      }

      public AddChannel_args getEmptyArgsInstance() {
        return new AddChannel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            AddChannel_result result = new AddChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AddChannel_result result = new AddChannel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddChannel_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.AddChannel(args.cfg,resultHandler);
      }
    }

    public static class DelChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DelChannel_args, CapReturn> {
      public DelChannel() {
        super("DelChannel");
      }

      public DelChannel_args getEmptyArgsInstance() {
        return new DelChannel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            DelChannel_result result = new DelChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DelChannel_result result = new DelChannel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DelChannel_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.DelChannel(args.strChannelID,resultHandler);
      }
    }

    public static class DelChannelByRegionID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DelChannelByRegionID_args, CapReturn> {
      public DelChannelByRegionID() {
        super("DelChannelByRegionID");
      }

      public DelChannelByRegionID_args getEmptyArgsInstance() {
        return new DelChannelByRegionID_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            DelChannelByRegionID_result result = new DelChannelByRegionID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DelChannelByRegionID_result result = new DelChannelByRegionID_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DelChannelByRegionID_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.DelChannelByRegionID(args.iRegionID,resultHandler);
      }
    }

    public static class ModifyChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ModifyChannel_args, CapReturn> {
      public ModifyChannel() {
        super("ModifyChannel");
      }

      public ModifyChannel_args getEmptyArgsInstance() {
        return new ModifyChannel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            ModifyChannel_result result = new ModifyChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ModifyChannel_result result = new ModifyChannel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ModifyChannel_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.ModifyChannel(args.cfg,resultHandler);
      }
    }

    public static class DetectFaces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DetectFaces_args, java.util.List<CapFacesSet>> {
      public DetectFaces() {
        super("DetectFaces");
      }

      public DetectFaces_args getEmptyArgsInstance() {
        return new DetectFaces_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>>() { 
          public void onComplete(java.util.List<CapFacesSet> o) {
            DetectFaces_result result = new DetectFaces_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DetectFaces_result result = new DetectFaces_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DetectFaces_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException {
        iface.DetectFaces(args.lstImgs,resultHandler);
      }
    }

    public static class OpenCloseChannels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, OpenCloseChannels_args, CapReturn> {
      public OpenCloseChannels() {
        super("OpenCloseChannels");
      }

      public OpenCloseChannels_args getEmptyArgsInstance() {
        return new OpenCloseChannels_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            OpenCloseChannels_result result = new OpenCloseChannels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            OpenCloseChannels_result result = new OpenCloseChannels_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, OpenCloseChannels_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.OpenCloseChannels(args.lstChnls, args.iOpenFlag, args.iAllFlag,resultHandler);
      }
    }

    public static class GetVideoProgress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetVideoProgress_args, CapReturn> {
      public GetVideoProgress() {
        super("GetVideoProgress");
      }

      public GetVideoProgress_args getEmptyArgsInstance() {
        return new GetVideoProgress_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            GetVideoProgress_result result = new GetVideoProgress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetVideoProgress_result result = new GetVideoProgress_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetVideoProgress_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.GetVideoProgress(args.strChannelID,resultHandler);
      }
    }

    public static class NotifyMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, NotifyMessage_args, CapReturn> {
      public NotifyMessage() {
        super("NotifyMessage");
      }

      public NotifyMessage_args getEmptyArgsInstance() {
        return new NotifyMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            NotifyMessage_result result = new NotifyMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            NotifyMessage_result result = new NotifyMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, NotifyMessage_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.NotifyMessage(args.iMsg, args.strNotifyJson,resultHandler);
      }
    }

    public static class ReceiveMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReceiveMessage_args, CapReturn> {
      public ReceiveMessage() {
        super("ReceiveMessage");
      }

      public ReceiveMessage_args getEmptyArgsInstance() {
        return new ReceiveMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            ReceiveMessage_result result = new ReceiveMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ReceiveMessage_result result = new ReceiveMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReceiveMessage_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.ReceiveMessage(args.iMsg, args.strReceiveJson,resultHandler);
      }
    }

    public static class GetSceneImage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSceneImage_args, CapSceneImageResult> {
      public GetSceneImage() {
        super("GetSceneImage");
      }

      public GetSceneImage_args getEmptyArgsInstance() {
        return new GetSceneImage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult>() { 
          public void onComplete(CapSceneImageResult o) {
            GetSceneImage_result result = new GetSceneImage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetSceneImage_result result = new GetSceneImage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSceneImage_args args, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException {
        iface.GetSceneImage(args.strChannelID, args.strCapID,resultHandler);
      }
    }

    public static class GetServersInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetServersInfo_args, InfoForMonitor> {
      public GetServersInfo() {
        super("GetServersInfo");
      }

      public GetServersInfo_args getEmptyArgsInstance() {
        return new GetServersInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor>() { 
          public void onComplete(InfoForMonitor o) {
            GetServersInfo_result result = new GetServersInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetServersInfo_result result = new GetServersInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetServersInfo_args args, org.apache.thrift.async.AsyncMethodCallback<InfoForMonitor> resultHandler) throws org.apache.thrift.TException {
        iface.GetServersInfo(resultHandler);
      }
    }

    public static class DetectFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DetectFeatures_args, java.util.List<CapFeaturesSet>> {
      public DetectFeatures() {
        super("DetectFeatures");
      }

      public DetectFeatures_args getEmptyArgsInstance() {
        return new DetectFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>>() { 
          public void onComplete(java.util.List<CapFeaturesSet> o) {
            DetectFeatures_result result = new DetectFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DetectFeatures_result result = new DetectFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DetectFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException {
        iface.DetectFeatures(args.imgBytes,resultHandler);
      }
    }

  }

  public static class AddChannel_args implements org.apache.thrift.TBase<AddChannel_args, AddChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddChannel_args");

    private static final org.apache.thrift.protocol.TField CFG_FIELD_DESC = new org.apache.thrift.protocol.TField("cfg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddChannel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddChannel_argsTupleSchemeFactory();

    public CapChannelConfig cfg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CFG((short)1, "cfg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CFG
            return CFG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CFG, new org.apache.thrift.meta_data.FieldMetaData("cfg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapChannelConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddChannel_args.class, metaDataMap);
    }

    public AddChannel_args() {
    }

    public AddChannel_args(
      CapChannelConfig cfg)
    {
      this();
      this.cfg = cfg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddChannel_args(AddChannel_args other) {
      if (other.isSetCfg()) {
        this.cfg = new CapChannelConfig(other.cfg);
      }
    }

    public AddChannel_args deepCopy() {
      return new AddChannel_args(this);
    }

    @Override
    public void clear() {
      this.cfg = null;
    }

    public CapChannelConfig getCfg() {
      return this.cfg;
    }

    public AddChannel_args setCfg(CapChannelConfig cfg) {
      this.cfg = cfg;
      return this;
    }

    public void unsetCfg() {
      this.cfg = null;
    }

    /** Returns true if field cfg is set (has been assigned a value) and false otherwise */
    public boolean isSetCfg() {
      return this.cfg != null;
    }

    public void setCfgIsSet(boolean value) {
      if (!value) {
        this.cfg = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CFG:
        if (value == null) {
          unsetCfg();
        } else {
          setCfg((CapChannelConfig)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CFG:
        return getCfg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CFG:
        return isSetCfg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddChannel_args)
        return this.equals((AddChannel_args)that);
      return false;
    }

    public boolean equals(AddChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cfg = true && this.isSetCfg();
      boolean that_present_cfg = true && that.isSetCfg();
      if (this_present_cfg || that_present_cfg) {
        if (!(this_present_cfg && that_present_cfg))
          return false;
        if (!this.cfg.equals(that.cfg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCfg()) ? 131071 : 524287);
      if (isSetCfg())
        hashCode = hashCode * 8191 + cfg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AddChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCfg()).compareTo(other.isSetCfg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCfg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cfg, other.cfg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddChannel_args(");
      boolean first = true;

      sb.append("cfg:");
      if (this.cfg == null) {
        sb.append("null");
      } else {
        sb.append(this.cfg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cfg != null) {
        cfg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddChannel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddChannel_argsStandardScheme getScheme() {
        return new AddChannel_argsStandardScheme();
      }
    }

    private static class AddChannel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CFG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cfg = new CapChannelConfig();
                struct.cfg.read(iprot);
                struct.setCfgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cfg != null) {
          oprot.writeFieldBegin(CFG_FIELD_DESC);
          struct.cfg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddChannel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddChannel_argsTupleScheme getScheme() {
        return new AddChannel_argsTupleScheme();
      }
    }

    private static class AddChannel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCfg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCfg()) {
          struct.cfg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cfg = new CapChannelConfig();
          struct.cfg.read(iprot);
          struct.setCfgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AddChannel_result implements org.apache.thrift.TBase<AddChannel_result, AddChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddChannel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddChannel_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddChannel_result.class, metaDataMap);
    }

    public AddChannel_result() {
    }

    public AddChannel_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddChannel_result(AddChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public AddChannel_result deepCopy() {
      return new AddChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public AddChannel_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddChannel_result)
        return this.equals((AddChannel_result)that);
      return false;
    }

    public boolean equals(AddChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AddChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddChannel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddChannel_resultStandardScheme getScheme() {
        return new AddChannel_resultStandardScheme();
      }
    }

    private static class AddChannel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddChannel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddChannel_resultTupleScheme getScheme() {
        return new AddChannel_resultTupleScheme();
      }
    }

    private static class AddChannel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DelChannel_args implements org.apache.thrift.TBase<DelChannel_args, DelChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<DelChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelChannel_args");

    private static final org.apache.thrift.protocol.TField STR_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strChannelID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DelChannel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DelChannel_argsTupleSchemeFactory();

    public java.lang.String strChannelID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_CHANNEL_ID((short)1, "strChannelID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_CHANNEL_ID
            return STR_CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("strChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelChannel_args.class, metaDataMap);
    }

    public DelChannel_args() {
    }

    public DelChannel_args(
      java.lang.String strChannelID)
    {
      this();
      this.strChannelID = strChannelID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelChannel_args(DelChannel_args other) {
      if (other.isSetStrChannelID()) {
        this.strChannelID = other.strChannelID;
      }
    }

    public DelChannel_args deepCopy() {
      return new DelChannel_args(this);
    }

    @Override
    public void clear() {
      this.strChannelID = null;
    }

    public java.lang.String getStrChannelID() {
      return this.strChannelID;
    }

    public DelChannel_args setStrChannelID(java.lang.String strChannelID) {
      this.strChannelID = strChannelID;
      return this;
    }

    public void unsetStrChannelID() {
      this.strChannelID = null;
    }

    /** Returns true if field strChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrChannelID() {
      return this.strChannelID != null;
    }

    public void setStrChannelIDIsSet(boolean value) {
      if (!value) {
        this.strChannelID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STR_CHANNEL_ID:
        if (value == null) {
          unsetStrChannelID();
        } else {
          setStrChannelID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_CHANNEL_ID:
        return getStrChannelID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR_CHANNEL_ID:
        return isSetStrChannelID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DelChannel_args)
        return this.equals((DelChannel_args)that);
      return false;
    }

    public boolean equals(DelChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_strChannelID = true && this.isSetStrChannelID();
      boolean that_present_strChannelID = true && that.isSetStrChannelID();
      if (this_present_strChannelID || that_present_strChannelID) {
        if (!(this_present_strChannelID && that_present_strChannelID))
          return false;
        if (!this.strChannelID.equals(that.strChannelID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStrChannelID()) ? 131071 : 524287);
      if (isSetStrChannelID())
        hashCode = hashCode * 8191 + strChannelID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DelChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStrChannelID()).compareTo(other.isSetStrChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strChannelID, other.strChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DelChannel_args(");
      boolean first = true;

      sb.append("strChannelID:");
      if (this.strChannelID == null) {
        sb.append("null");
      } else {
        sb.append(this.strChannelID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelChannel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannel_argsStandardScheme getScheme() {
        return new DelChannel_argsStandardScheme();
      }
    }

    private static class DelChannel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DelChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strChannelID = iprot.readString();
                struct.setStrChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strChannelID != null) {
          oprot.writeFieldBegin(STR_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.strChannelID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelChannel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannel_argsTupleScheme getScheme() {
        return new DelChannel_argsTupleScheme();
      }
    }

    private static class DelChannel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DelChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStrChannelID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrChannelID()) {
          oprot.writeString(struct.strChannelID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strChannelID = iprot.readString();
          struct.setStrChannelIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DelChannel_result implements org.apache.thrift.TBase<DelChannel_result, DelChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<DelChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DelChannel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DelChannel_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelChannel_result.class, metaDataMap);
    }

    public DelChannel_result() {
    }

    public DelChannel_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelChannel_result(DelChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public DelChannel_result deepCopy() {
      return new DelChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public DelChannel_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DelChannel_result)
        return this.equals((DelChannel_result)that);
      return false;
    }

    public boolean equals(DelChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DelChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DelChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelChannel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannel_resultStandardScheme getScheme() {
        return new DelChannel_resultStandardScheme();
      }
    }

    private static class DelChannel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DelChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelChannel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannel_resultTupleScheme getScheme() {
        return new DelChannel_resultTupleScheme();
      }
    }

    private static class DelChannel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DelChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DelChannelByRegionID_args implements org.apache.thrift.TBase<DelChannelByRegionID_args, DelChannelByRegionID_args._Fields>, java.io.Serializable, Cloneable, Comparable<DelChannelByRegionID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelChannelByRegionID_args");

    private static final org.apache.thrift.protocol.TField I_REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("iRegionID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DelChannelByRegionID_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DelChannelByRegionID_argsTupleSchemeFactory();

    public int iRegionID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_REGION_ID((short)1, "iRegionID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_REGION_ID
            return I_REGION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IREGIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("iRegionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelChannelByRegionID_args.class, metaDataMap);
    }

    public DelChannelByRegionID_args() {
    }

    public DelChannelByRegionID_args(
      int iRegionID)
    {
      this();
      this.iRegionID = iRegionID;
      setIRegionIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelChannelByRegionID_args(DelChannelByRegionID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.iRegionID = other.iRegionID;
    }

    public DelChannelByRegionID_args deepCopy() {
      return new DelChannelByRegionID_args(this);
    }

    @Override
    public void clear() {
      setIRegionIDIsSet(false);
      this.iRegionID = 0;
    }

    public int getIRegionID() {
      return this.iRegionID;
    }

    public DelChannelByRegionID_args setIRegionID(int iRegionID) {
      this.iRegionID = iRegionID;
      setIRegionIDIsSet(true);
      return this;
    }

    public void unsetIRegionID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IREGIONID_ISSET_ID);
    }

    /** Returns true if field iRegionID is set (has been assigned a value) and false otherwise */
    public boolean isSetIRegionID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IREGIONID_ISSET_ID);
    }

    public void setIRegionIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IREGIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case I_REGION_ID:
        if (value == null) {
          unsetIRegionID();
        } else {
          setIRegionID((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_REGION_ID:
        return getIRegionID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_REGION_ID:
        return isSetIRegionID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DelChannelByRegionID_args)
        return this.equals((DelChannelByRegionID_args)that);
      return false;
    }

    public boolean equals(DelChannelByRegionID_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iRegionID = true;
      boolean that_present_iRegionID = true;
      if (this_present_iRegionID || that_present_iRegionID) {
        if (!(this_present_iRegionID && that_present_iRegionID))
          return false;
        if (this.iRegionID != that.iRegionID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + iRegionID;

      return hashCode;
    }

    @Override
    public int compareTo(DelChannelByRegionID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIRegionID()).compareTo(other.isSetIRegionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIRegionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iRegionID, other.iRegionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DelChannelByRegionID_args(");
      boolean first = true;

      sb.append("iRegionID:");
      sb.append(this.iRegionID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelChannelByRegionID_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannelByRegionID_argsStandardScheme getScheme() {
        return new DelChannelByRegionID_argsStandardScheme();
      }
    }

    private static class DelChannelByRegionID_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DelChannelByRegionID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelChannelByRegionID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_REGION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iRegionID = iprot.readI32();
                struct.setIRegionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelChannelByRegionID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(I_REGION_ID_FIELD_DESC);
        oprot.writeI32(struct.iRegionID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelChannelByRegionID_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannelByRegionID_argsTupleScheme getScheme() {
        return new DelChannelByRegionID_argsTupleScheme();
      }
    }

    private static class DelChannelByRegionID_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DelChannelByRegionID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelChannelByRegionID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIRegionID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetIRegionID()) {
          oprot.writeI32(struct.iRegionID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelChannelByRegionID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.iRegionID = iprot.readI32();
          struct.setIRegionIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DelChannelByRegionID_result implements org.apache.thrift.TBase<DelChannelByRegionID_result, DelChannelByRegionID_result._Fields>, java.io.Serializable, Cloneable, Comparable<DelChannelByRegionID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelChannelByRegionID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DelChannelByRegionID_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DelChannelByRegionID_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelChannelByRegionID_result.class, metaDataMap);
    }

    public DelChannelByRegionID_result() {
    }

    public DelChannelByRegionID_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelChannelByRegionID_result(DelChannelByRegionID_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public DelChannelByRegionID_result deepCopy() {
      return new DelChannelByRegionID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public DelChannelByRegionID_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DelChannelByRegionID_result)
        return this.equals((DelChannelByRegionID_result)that);
      return false;
    }

    public boolean equals(DelChannelByRegionID_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DelChannelByRegionID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DelChannelByRegionID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelChannelByRegionID_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannelByRegionID_resultStandardScheme getScheme() {
        return new DelChannelByRegionID_resultStandardScheme();
      }
    }

    private static class DelChannelByRegionID_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DelChannelByRegionID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelChannelByRegionID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelChannelByRegionID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelChannelByRegionID_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DelChannelByRegionID_resultTupleScheme getScheme() {
        return new DelChannelByRegionID_resultTupleScheme();
      }
    }

    private static class DelChannelByRegionID_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DelChannelByRegionID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelChannelByRegionID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelChannelByRegionID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ModifyChannel_args implements org.apache.thrift.TBase<ModifyChannel_args, ModifyChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyChannel_args");

    private static final org.apache.thrift.protocol.TField CFG_FIELD_DESC = new org.apache.thrift.protocol.TField("cfg", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModifyChannel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModifyChannel_argsTupleSchemeFactory();

    public CapChannelConfig cfg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CFG((short)1, "cfg");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CFG
            return CFG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CFG, new org.apache.thrift.meta_data.FieldMetaData("cfg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapChannelConfig.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyChannel_args.class, metaDataMap);
    }

    public ModifyChannel_args() {
    }

    public ModifyChannel_args(
      CapChannelConfig cfg)
    {
      this();
      this.cfg = cfg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyChannel_args(ModifyChannel_args other) {
      if (other.isSetCfg()) {
        this.cfg = new CapChannelConfig(other.cfg);
      }
    }

    public ModifyChannel_args deepCopy() {
      return new ModifyChannel_args(this);
    }

    @Override
    public void clear() {
      this.cfg = null;
    }

    public CapChannelConfig getCfg() {
      return this.cfg;
    }

    public ModifyChannel_args setCfg(CapChannelConfig cfg) {
      this.cfg = cfg;
      return this;
    }

    public void unsetCfg() {
      this.cfg = null;
    }

    /** Returns true if field cfg is set (has been assigned a value) and false otherwise */
    public boolean isSetCfg() {
      return this.cfg != null;
    }

    public void setCfgIsSet(boolean value) {
      if (!value) {
        this.cfg = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CFG:
        if (value == null) {
          unsetCfg();
        } else {
          setCfg((CapChannelConfig)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CFG:
        return getCfg();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CFG:
        return isSetCfg();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyChannel_args)
        return this.equals((ModifyChannel_args)that);
      return false;
    }

    public boolean equals(ModifyChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cfg = true && this.isSetCfg();
      boolean that_present_cfg = true && that.isSetCfg();
      if (this_present_cfg || that_present_cfg) {
        if (!(this_present_cfg && that_present_cfg))
          return false;
        if (!this.cfg.equals(that.cfg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCfg()) ? 131071 : 524287);
      if (isSetCfg())
        hashCode = hashCode * 8191 + cfg.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ModifyChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCfg()).compareTo(other.isSetCfg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCfg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cfg, other.cfg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ModifyChannel_args(");
      boolean first = true;

      sb.append("cfg:");
      if (this.cfg == null) {
        sb.append("null");
      } else {
        sb.append(this.cfg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cfg != null) {
        cfg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyChannel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyChannel_argsStandardScheme getScheme() {
        return new ModifyChannel_argsStandardScheme();
      }
    }

    private static class ModifyChannel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModifyChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CFG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cfg = new CapChannelConfig();
                struct.cfg.read(iprot);
                struct.setCfgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cfg != null) {
          oprot.writeFieldBegin(CFG_FIELD_DESC);
          struct.cfg.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyChannel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyChannel_argsTupleScheme getScheme() {
        return new ModifyChannel_argsTupleScheme();
      }
    }

    private static class ModifyChannel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModifyChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCfg()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCfg()) {
          struct.cfg.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cfg = new CapChannelConfig();
          struct.cfg.read(iprot);
          struct.setCfgIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ModifyChannel_result implements org.apache.thrift.TBase<ModifyChannel_result, ModifyChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModifyChannel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModifyChannel_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyChannel_result.class, metaDataMap);
    }

    public ModifyChannel_result() {
    }

    public ModifyChannel_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyChannel_result(ModifyChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public ModifyChannel_result deepCopy() {
      return new ModifyChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public ModifyChannel_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyChannel_result)
        return this.equals((ModifyChannel_result)that);
      return false;
    }

    public boolean equals(ModifyChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ModifyChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ModifyChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyChannel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyChannel_resultStandardScheme getScheme() {
        return new ModifyChannel_resultStandardScheme();
      }
    }

    private static class ModifyChannel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModifyChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyChannel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyChannel_resultTupleScheme getScheme() {
        return new ModifyChannel_resultTupleScheme();
      }
    }

    private static class ModifyChannel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModifyChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFaces_args implements org.apache.thrift.TBase<DetectFaces_args, DetectFaces_args._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFaces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFaces_args");

    private static final org.apache.thrift.protocol.TField LST_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("lstImgs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFaces_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFaces_argsTupleSchemeFactory();

    public java.util.List<java.nio.ByteBuffer> lstImgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LST_IMGS((short)1, "lstImgs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LST_IMGS
            return LST_IMGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LST_IMGS, new org.apache.thrift.meta_data.FieldMetaData("lstImgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFaces_args.class, metaDataMap);
    }

    public DetectFaces_args() {
    }

    public DetectFaces_args(
      java.util.List<java.nio.ByteBuffer> lstImgs)
    {
      this();
      this.lstImgs = lstImgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFaces_args(DetectFaces_args other) {
      if (other.isSetLstImgs()) {
        java.util.List<java.nio.ByteBuffer> __this__lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(other.lstImgs);
        this.lstImgs = __this__lstImgs;
      }
    }

    public DetectFaces_args deepCopy() {
      return new DetectFaces_args(this);
    }

    @Override
    public void clear() {
      this.lstImgs = null;
    }

    public int getLstImgsSize() {
      return (this.lstImgs == null) ? 0 : this.lstImgs.size();
    }

    public java.util.Iterator<java.nio.ByteBuffer> getLstImgsIterator() {
      return (this.lstImgs == null) ? null : this.lstImgs.iterator();
    }

    public void addToLstImgs(java.nio.ByteBuffer elem) {
      if (this.lstImgs == null) {
        this.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.lstImgs.add(elem);
    }

    public java.util.List<java.nio.ByteBuffer> getLstImgs() {
      return this.lstImgs;
    }

    public DetectFaces_args setLstImgs(java.util.List<java.nio.ByteBuffer> lstImgs) {
      this.lstImgs = lstImgs;
      return this;
    }

    public void unsetLstImgs() {
      this.lstImgs = null;
    }

    /** Returns true if field lstImgs is set (has been assigned a value) and false otherwise */
    public boolean isSetLstImgs() {
      return this.lstImgs != null;
    }

    public void setLstImgsIsSet(boolean value) {
      if (!value) {
        this.lstImgs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LST_IMGS:
        if (value == null) {
          unsetLstImgs();
        } else {
          setLstImgs((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LST_IMGS:
        return getLstImgs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LST_IMGS:
        return isSetLstImgs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFaces_args)
        return this.equals((DetectFaces_args)that);
      return false;
    }

    public boolean equals(DetectFaces_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lstImgs = true && this.isSetLstImgs();
      boolean that_present_lstImgs = true && that.isSetLstImgs();
      if (this_present_lstImgs || that_present_lstImgs) {
        if (!(this_present_lstImgs && that_present_lstImgs))
          return false;
        if (!this.lstImgs.equals(that.lstImgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLstImgs()) ? 131071 : 524287);
      if (isSetLstImgs())
        hashCode = hashCode * 8191 + lstImgs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFaces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLstImgs()).compareTo(other.isSetLstImgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLstImgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstImgs, other.lstImgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFaces_args(");
      boolean first = true;

      sb.append("lstImgs:");
      if (this.lstImgs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.lstImgs, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFaces_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_argsStandardScheme getScheme() {
        return new DetectFaces_argsStandardScheme();
      }
    }

    private static class DetectFaces_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFaces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LST_IMGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(_list88.size);
                  java.nio.ByteBuffer _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = iprot.readBinary();
                    struct.lstImgs.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setLstImgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFaces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lstImgs != null) {
          oprot.writeFieldBegin(LST_IMGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lstImgs.size()));
            for (java.nio.ByteBuffer _iter91 : struct.lstImgs)
            {
              oprot.writeBinary(_iter91);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFaces_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_argsTupleScheme getScheme() {
        return new DetectFaces_argsTupleScheme();
      }
    }

    private static class DetectFaces_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFaces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLstImgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLstImgs()) {
          {
            oprot.writeI32(struct.lstImgs.size());
            for (java.nio.ByteBuffer _iter92 : struct.lstImgs)
            {
              oprot.writeBinary(_iter92);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(_list93.size);
            java.nio.ByteBuffer _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = iprot.readBinary();
              struct.lstImgs.add(_elem94);
            }
          }
          struct.setLstImgsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFaces_result implements org.apache.thrift.TBase<DetectFaces_result, DetectFaces_result._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFaces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFaces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFaces_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFaces_resultTupleSchemeFactory();

    public java.util.List<CapFacesSet> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapFacesSet.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFaces_result.class, metaDataMap);
    }

    public DetectFaces_result() {
    }

    public DetectFaces_result(
      java.util.List<CapFacesSet> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFaces_result(DetectFaces_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CapFacesSet> __this__success = new java.util.ArrayList<CapFacesSet>(other.success.size());
        for (CapFacesSet other_element : other.success) {
          __this__success.add(new CapFacesSet(other_element));
        }
        this.success = __this__success;
      }
    }

    public DetectFaces_result deepCopy() {
      return new DetectFaces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CapFacesSet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CapFacesSet elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CapFacesSet>();
      }
      this.success.add(elem);
    }

    public java.util.List<CapFacesSet> getSuccess() {
      return this.success;
    }

    public DetectFaces_result setSuccess(java.util.List<CapFacesSet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CapFacesSet>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFaces_result)
        return this.equals((DetectFaces_result)that);
      return false;
    }

    public boolean equals(DetectFaces_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFaces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFaces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFaces_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_resultStandardScheme getScheme() {
        return new DetectFaces_resultStandardScheme();
      }
    }

    private static class DetectFaces_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFaces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CapFacesSet>(_list96.size);
                  CapFacesSet _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new CapFacesSet();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFaces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CapFacesSet _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFaces_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_resultTupleScheme getScheme() {
        return new DetectFaces_resultTupleScheme();
      }
    }

    private static class DetectFaces_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFaces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CapFacesSet _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CapFacesSet>(_list101.size);
            CapFacesSet _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new CapFacesSet();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class OpenCloseChannels_args implements org.apache.thrift.TBase<OpenCloseChannels_args, OpenCloseChannels_args._Fields>, java.io.Serializable, Cloneable, Comparable<OpenCloseChannels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenCloseChannels_args");

    private static final org.apache.thrift.protocol.TField LST_CHNLS_FIELD_DESC = new org.apache.thrift.protocol.TField("lstChnls", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField I_OPEN_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("iOpenFlag", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField I_ALL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("iAllFlag", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenCloseChannels_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenCloseChannels_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> lstChnls; // required
    public int iOpenFlag; // required
    public int iAllFlag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LST_CHNLS((short)1, "lstChnls"),
      I_OPEN_FLAG((short)2, "iOpenFlag"),
      I_ALL_FLAG((short)3, "iAllFlag");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LST_CHNLS
            return LST_CHNLS;
          case 2: // I_OPEN_FLAG
            return I_OPEN_FLAG;
          case 3: // I_ALL_FLAG
            return I_ALL_FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IOPENFLAG_ISSET_ID = 0;
    private static final int __IALLFLAG_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LST_CHNLS, new org.apache.thrift.meta_data.FieldMetaData("lstChnls", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.I_OPEN_FLAG, new org.apache.thrift.meta_data.FieldMetaData("iOpenFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.I_ALL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("iAllFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenCloseChannels_args.class, metaDataMap);
    }

    public OpenCloseChannels_args() {
    }

    public OpenCloseChannels_args(
      java.util.List<java.lang.String> lstChnls,
      int iOpenFlag,
      int iAllFlag)
    {
      this();
      this.lstChnls = lstChnls;
      this.iOpenFlag = iOpenFlag;
      setIOpenFlagIsSet(true);
      this.iAllFlag = iAllFlag;
      setIAllFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OpenCloseChannels_args(OpenCloseChannels_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetLstChnls()) {
        java.util.List<java.lang.String> __this__lstChnls = new java.util.ArrayList<java.lang.String>(other.lstChnls);
        this.lstChnls = __this__lstChnls;
      }
      this.iOpenFlag = other.iOpenFlag;
      this.iAllFlag = other.iAllFlag;
    }

    public OpenCloseChannels_args deepCopy() {
      return new OpenCloseChannels_args(this);
    }

    @Override
    public void clear() {
      this.lstChnls = null;
      setIOpenFlagIsSet(false);
      this.iOpenFlag = 0;
      setIAllFlagIsSet(false);
      this.iAllFlag = 0;
    }

    public int getLstChnlsSize() {
      return (this.lstChnls == null) ? 0 : this.lstChnls.size();
    }

    public java.util.Iterator<java.lang.String> getLstChnlsIterator() {
      return (this.lstChnls == null) ? null : this.lstChnls.iterator();
    }

    public void addToLstChnls(java.lang.String elem) {
      if (this.lstChnls == null) {
        this.lstChnls = new java.util.ArrayList<java.lang.String>();
      }
      this.lstChnls.add(elem);
    }

    public java.util.List<java.lang.String> getLstChnls() {
      return this.lstChnls;
    }

    public OpenCloseChannels_args setLstChnls(java.util.List<java.lang.String> lstChnls) {
      this.lstChnls = lstChnls;
      return this;
    }

    public void unsetLstChnls() {
      this.lstChnls = null;
    }

    /** Returns true if field lstChnls is set (has been assigned a value) and false otherwise */
    public boolean isSetLstChnls() {
      return this.lstChnls != null;
    }

    public void setLstChnlsIsSet(boolean value) {
      if (!value) {
        this.lstChnls = null;
      }
    }

    public int getIOpenFlag() {
      return this.iOpenFlag;
    }

    public OpenCloseChannels_args setIOpenFlag(int iOpenFlag) {
      this.iOpenFlag = iOpenFlag;
      setIOpenFlagIsSet(true);
      return this;
    }

    public void unsetIOpenFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOPENFLAG_ISSET_ID);
    }

    /** Returns true if field iOpenFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetIOpenFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOPENFLAG_ISSET_ID);
    }

    public void setIOpenFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOPENFLAG_ISSET_ID, value);
    }

    public int getIAllFlag() {
      return this.iAllFlag;
    }

    public OpenCloseChannels_args setIAllFlag(int iAllFlag) {
      this.iAllFlag = iAllFlag;
      setIAllFlagIsSet(true);
      return this;
    }

    public void unsetIAllFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IALLFLAG_ISSET_ID);
    }

    /** Returns true if field iAllFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetIAllFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IALLFLAG_ISSET_ID);
    }

    public void setIAllFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IALLFLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LST_CHNLS:
        if (value == null) {
          unsetLstChnls();
        } else {
          setLstChnls((java.util.List<java.lang.String>)value);
        }
        break;

      case I_OPEN_FLAG:
        if (value == null) {
          unsetIOpenFlag();
        } else {
          setIOpenFlag((java.lang.Integer)value);
        }
        break;

      case I_ALL_FLAG:
        if (value == null) {
          unsetIAllFlag();
        } else {
          setIAllFlag((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LST_CHNLS:
        return getLstChnls();

      case I_OPEN_FLAG:
        return getIOpenFlag();

      case I_ALL_FLAG:
        return getIAllFlag();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LST_CHNLS:
        return isSetLstChnls();
      case I_OPEN_FLAG:
        return isSetIOpenFlag();
      case I_ALL_FLAG:
        return isSetIAllFlag();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof OpenCloseChannels_args)
        return this.equals((OpenCloseChannels_args)that);
      return false;
    }

    public boolean equals(OpenCloseChannels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lstChnls = true && this.isSetLstChnls();
      boolean that_present_lstChnls = true && that.isSetLstChnls();
      if (this_present_lstChnls || that_present_lstChnls) {
        if (!(this_present_lstChnls && that_present_lstChnls))
          return false;
        if (!this.lstChnls.equals(that.lstChnls))
          return false;
      }

      boolean this_present_iOpenFlag = true;
      boolean that_present_iOpenFlag = true;
      if (this_present_iOpenFlag || that_present_iOpenFlag) {
        if (!(this_present_iOpenFlag && that_present_iOpenFlag))
          return false;
        if (this.iOpenFlag != that.iOpenFlag)
          return false;
      }

      boolean this_present_iAllFlag = true;
      boolean that_present_iAllFlag = true;
      if (this_present_iAllFlag || that_present_iAllFlag) {
        if (!(this_present_iAllFlag && that_present_iAllFlag))
          return false;
        if (this.iAllFlag != that.iAllFlag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLstChnls()) ? 131071 : 524287);
      if (isSetLstChnls())
        hashCode = hashCode * 8191 + lstChnls.hashCode();

      hashCode = hashCode * 8191 + iOpenFlag;

      hashCode = hashCode * 8191 + iAllFlag;

      return hashCode;
    }

    @Override
    public int compareTo(OpenCloseChannels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLstChnls()).compareTo(other.isSetLstChnls());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLstChnls()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstChnls, other.lstChnls);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIOpenFlag()).compareTo(other.isSetIOpenFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIOpenFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iOpenFlag, other.iOpenFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIAllFlag()).compareTo(other.isSetIAllFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIAllFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAllFlag, other.iAllFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenCloseChannels_args(");
      boolean first = true;

      sb.append("lstChnls:");
      if (this.lstChnls == null) {
        sb.append("null");
      } else {
        sb.append(this.lstChnls);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iOpenFlag:");
      sb.append(this.iOpenFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iAllFlag:");
      sb.append(this.iAllFlag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OpenCloseChannels_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannels_argsStandardScheme getScheme() {
        return new OpenCloseChannels_argsStandardScheme();
      }
    }

    private static class OpenCloseChannels_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenCloseChannels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OpenCloseChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LST_CHNLS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.lstChnls = new java.util.ArrayList<java.lang.String>(_list104.size);
                  java.lang.String _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = iprot.readString();
                    struct.lstChnls.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setLstChnlsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_OPEN_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iOpenFlag = iprot.readI32();
                struct.setIOpenFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // I_ALL_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iAllFlag = iprot.readI32();
                struct.setIAllFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OpenCloseChannels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lstChnls != null) {
          oprot.writeFieldBegin(LST_CHNLS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lstChnls.size()));
            for (java.lang.String _iter107 : struct.lstChnls)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_OPEN_FLAG_FIELD_DESC);
        oprot.writeI32(struct.iOpenFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_ALL_FLAG_FIELD_DESC);
        oprot.writeI32(struct.iAllFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OpenCloseChannels_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannels_argsTupleScheme getScheme() {
        return new OpenCloseChannels_argsTupleScheme();
      }
    }

    private static class OpenCloseChannels_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenCloseChannels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLstChnls()) {
          optionals.set(0);
        }
        if (struct.isSetIOpenFlag()) {
          optionals.set(1);
        }
        if (struct.isSetIAllFlag()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLstChnls()) {
          {
            oprot.writeI32(struct.lstChnls.size());
            for (java.lang.String _iter108 : struct.lstChnls)
            {
              oprot.writeString(_iter108);
            }
          }
        }
        if (struct.isSetIOpenFlag()) {
          oprot.writeI32(struct.iOpenFlag);
        }
        if (struct.isSetIAllFlag()) {
          oprot.writeI32(struct.iAllFlag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.lstChnls = new java.util.ArrayList<java.lang.String>(_list109.size);
            java.lang.String _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = iprot.readString();
              struct.lstChnls.add(_elem110);
            }
          }
          struct.setLstChnlsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iOpenFlag = iprot.readI32();
          struct.setIOpenFlagIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iAllFlag = iprot.readI32();
          struct.setIAllFlagIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class OpenCloseChannels_result implements org.apache.thrift.TBase<OpenCloseChannels_result, OpenCloseChannels_result._Fields>, java.io.Serializable, Cloneable, Comparable<OpenCloseChannels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenCloseChannels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenCloseChannels_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenCloseChannels_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenCloseChannels_result.class, metaDataMap);
    }

    public OpenCloseChannels_result() {
    }

    public OpenCloseChannels_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OpenCloseChannels_result(OpenCloseChannels_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public OpenCloseChannels_result deepCopy() {
      return new OpenCloseChannels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public OpenCloseChannels_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof OpenCloseChannels_result)
        return this.equals((OpenCloseChannels_result)that);
      return false;
    }

    public boolean equals(OpenCloseChannels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(OpenCloseChannels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenCloseChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OpenCloseChannels_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannels_resultStandardScheme getScheme() {
        return new OpenCloseChannels_resultStandardScheme();
      }
    }

    private static class OpenCloseChannels_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenCloseChannels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OpenCloseChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OpenCloseChannels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OpenCloseChannels_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannels_resultTupleScheme getScheme() {
        return new OpenCloseChannels_resultTupleScheme();
      }
    }

    private static class OpenCloseChannels_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenCloseChannels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetVideoProgress_args implements org.apache.thrift.TBase<GetVideoProgress_args, GetVideoProgress_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetVideoProgress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVideoProgress_args");

    private static final org.apache.thrift.protocol.TField STR_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strChannelID", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetVideoProgress_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetVideoProgress_argsTupleSchemeFactory();

    public java.lang.String strChannelID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_CHANNEL_ID((short)1, "strChannelID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_CHANNEL_ID
            return STR_CHANNEL_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("strChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVideoProgress_args.class, metaDataMap);
    }

    public GetVideoProgress_args() {
    }

    public GetVideoProgress_args(
      java.lang.String strChannelID)
    {
      this();
      this.strChannelID = strChannelID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVideoProgress_args(GetVideoProgress_args other) {
      if (other.isSetStrChannelID()) {
        this.strChannelID = other.strChannelID;
      }
    }

    public GetVideoProgress_args deepCopy() {
      return new GetVideoProgress_args(this);
    }

    @Override
    public void clear() {
      this.strChannelID = null;
    }

    public java.lang.String getStrChannelID() {
      return this.strChannelID;
    }

    public GetVideoProgress_args setStrChannelID(java.lang.String strChannelID) {
      this.strChannelID = strChannelID;
      return this;
    }

    public void unsetStrChannelID() {
      this.strChannelID = null;
    }

    /** Returns true if field strChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrChannelID() {
      return this.strChannelID != null;
    }

    public void setStrChannelIDIsSet(boolean value) {
      if (!value) {
        this.strChannelID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STR_CHANNEL_ID:
        if (value == null) {
          unsetStrChannelID();
        } else {
          setStrChannelID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_CHANNEL_ID:
        return getStrChannelID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR_CHANNEL_ID:
        return isSetStrChannelID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVideoProgress_args)
        return this.equals((GetVideoProgress_args)that);
      return false;
    }

    public boolean equals(GetVideoProgress_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_strChannelID = true && this.isSetStrChannelID();
      boolean that_present_strChannelID = true && that.isSetStrChannelID();
      if (this_present_strChannelID || that_present_strChannelID) {
        if (!(this_present_strChannelID && that_present_strChannelID))
          return false;
        if (!this.strChannelID.equals(that.strChannelID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStrChannelID()) ? 131071 : 524287);
      if (isSetStrChannelID())
        hashCode = hashCode * 8191 + strChannelID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetVideoProgress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStrChannelID()).compareTo(other.isSetStrChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strChannelID, other.strChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetVideoProgress_args(");
      boolean first = true;

      sb.append("strChannelID:");
      if (this.strChannelID == null) {
        sb.append("null");
      } else {
        sb.append(this.strChannelID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVideoProgress_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetVideoProgress_argsStandardScheme getScheme() {
        return new GetVideoProgress_argsStandardScheme();
      }
    }

    private static class GetVideoProgress_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetVideoProgress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVideoProgress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strChannelID = iprot.readString();
                struct.setStrChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVideoProgress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strChannelID != null) {
          oprot.writeFieldBegin(STR_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.strChannelID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVideoProgress_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetVideoProgress_argsTupleScheme getScheme() {
        return new GetVideoProgress_argsTupleScheme();
      }
    }

    private static class GetVideoProgress_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetVideoProgress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVideoProgress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStrChannelID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStrChannelID()) {
          oprot.writeString(struct.strChannelID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVideoProgress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.strChannelID = iprot.readString();
          struct.setStrChannelIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetVideoProgress_result implements org.apache.thrift.TBase<GetVideoProgress_result, GetVideoProgress_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetVideoProgress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetVideoProgress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetVideoProgress_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetVideoProgress_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetVideoProgress_result.class, metaDataMap);
    }

    public GetVideoProgress_result() {
    }

    public GetVideoProgress_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetVideoProgress_result(GetVideoProgress_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public GetVideoProgress_result deepCopy() {
      return new GetVideoProgress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public GetVideoProgress_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetVideoProgress_result)
        return this.equals((GetVideoProgress_result)that);
      return false;
    }

    public boolean equals(GetVideoProgress_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetVideoProgress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetVideoProgress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetVideoProgress_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetVideoProgress_resultStandardScheme getScheme() {
        return new GetVideoProgress_resultStandardScheme();
      }
    }

    private static class GetVideoProgress_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetVideoProgress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetVideoProgress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetVideoProgress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetVideoProgress_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetVideoProgress_resultTupleScheme getScheme() {
        return new GetVideoProgress_resultTupleScheme();
      }
    }

    private static class GetVideoProgress_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetVideoProgress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetVideoProgress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetVideoProgress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class NotifyMessage_args implements org.apache.thrift.TBase<NotifyMessage_args, NotifyMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyMessage_args");

    private static final org.apache.thrift.protocol.TField I_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("iMsg", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STR_NOTIFY_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("strNotifyJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifyMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifyMessage_argsTupleSchemeFactory();

    public int iMsg; // required
    public java.lang.String strNotifyJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_MSG((short)1, "iMsg"),
      STR_NOTIFY_JSON((short)2, "strNotifyJson");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_MSG
            return I_MSG;
          case 2: // STR_NOTIFY_JSON
            return STR_NOTIFY_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_MSG, new org.apache.thrift.meta_data.FieldMetaData("iMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_NOTIFY_JSON, new org.apache.thrift.meta_data.FieldMetaData("strNotifyJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyMessage_args.class, metaDataMap);
    }

    public NotifyMessage_args() {
    }

    public NotifyMessage_args(
      int iMsg,
      java.lang.String strNotifyJson)
    {
      this();
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      this.strNotifyJson = strNotifyJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NotifyMessage_args(NotifyMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.iMsg = other.iMsg;
      if (other.isSetStrNotifyJson()) {
        this.strNotifyJson = other.strNotifyJson;
      }
    }

    public NotifyMessage_args deepCopy() {
      return new NotifyMessage_args(this);
    }

    @Override
    public void clear() {
      setIMsgIsSet(false);
      this.iMsg = 0;
      this.strNotifyJson = null;
    }

    public int getIMsg() {
      return this.iMsg;
    }

    public NotifyMessage_args setIMsg(int iMsg) {
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      return this;
    }

    public void unsetIMsg() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    /** Returns true if field iMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetIMsg() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    public void setIMsgIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMSG_ISSET_ID, value);
    }

    public java.lang.String getStrNotifyJson() {
      return this.strNotifyJson;
    }

    public NotifyMessage_args setStrNotifyJson(java.lang.String strNotifyJson) {
      this.strNotifyJson = strNotifyJson;
      return this;
    }

    public void unsetStrNotifyJson() {
      this.strNotifyJson = null;
    }

    /** Returns true if field strNotifyJson is set (has been assigned a value) and false otherwise */
    public boolean isSetStrNotifyJson() {
      return this.strNotifyJson != null;
    }

    public void setStrNotifyJsonIsSet(boolean value) {
      if (!value) {
        this.strNotifyJson = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case I_MSG:
        if (value == null) {
          unsetIMsg();
        } else {
          setIMsg((java.lang.Integer)value);
        }
        break;

      case STR_NOTIFY_JSON:
        if (value == null) {
          unsetStrNotifyJson();
        } else {
          setStrNotifyJson((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_MSG:
        return getIMsg();

      case STR_NOTIFY_JSON:
        return getStrNotifyJson();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_MSG:
        return isSetIMsg();
      case STR_NOTIFY_JSON:
        return isSetStrNotifyJson();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof NotifyMessage_args)
        return this.equals((NotifyMessage_args)that);
      return false;
    }

    public boolean equals(NotifyMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iMsg = true;
      boolean that_present_iMsg = true;
      if (this_present_iMsg || that_present_iMsg) {
        if (!(this_present_iMsg && that_present_iMsg))
          return false;
        if (this.iMsg != that.iMsg)
          return false;
      }

      boolean this_present_strNotifyJson = true && this.isSetStrNotifyJson();
      boolean that_present_strNotifyJson = true && that.isSetStrNotifyJson();
      if (this_present_strNotifyJson || that_present_strNotifyJson) {
        if (!(this_present_strNotifyJson && that_present_strNotifyJson))
          return false;
        if (!this.strNotifyJson.equals(that.strNotifyJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + iMsg;

      hashCode = hashCode * 8191 + ((isSetStrNotifyJson()) ? 131071 : 524287);
      if (isSetStrNotifyJson())
        hashCode = hashCode * 8191 + strNotifyJson.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(NotifyMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIMsg()).compareTo(other.isSetIMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMsg, other.iMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrNotifyJson()).compareTo(other.isSetStrNotifyJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrNotifyJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strNotifyJson, other.strNotifyJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("NotifyMessage_args(");
      boolean first = true;

      sb.append("iMsg:");
      sb.append(this.iMsg);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strNotifyJson:");
      if (this.strNotifyJson == null) {
        sb.append("null");
      } else {
        sb.append(this.strNotifyJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NotifyMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_argsStandardScheme getScheme() {
        return new NotifyMessage_argsStandardScheme();
      }
    }

    private static class NotifyMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifyMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iMsg = iprot.readI32();
                struct.setIMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_NOTIFY_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strNotifyJson = iprot.readString();
                struct.setStrNotifyJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(I_MSG_FIELD_DESC);
        oprot.writeI32(struct.iMsg);
        oprot.writeFieldEnd();
        if (struct.strNotifyJson != null) {
          oprot.writeFieldBegin(STR_NOTIFY_JSON_FIELD_DESC);
          oprot.writeString(struct.strNotifyJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NotifyMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_argsTupleScheme getScheme() {
        return new NotifyMessage_argsTupleScheme();
      }
    }

    private static class NotifyMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifyMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIMsg()) {
          optionals.set(0);
        }
        if (struct.isSetStrNotifyJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIMsg()) {
          oprot.writeI32(struct.iMsg);
        }
        if (struct.isSetStrNotifyJson()) {
          oprot.writeString(struct.strNotifyJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.iMsg = iprot.readI32();
          struct.setIMsgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strNotifyJson = iprot.readString();
          struct.setStrNotifyJsonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class NotifyMessage_result implements org.apache.thrift.TBase<NotifyMessage_result, NotifyMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifyMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifyMessage_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyMessage_result.class, metaDataMap);
    }

    public NotifyMessage_result() {
    }

    public NotifyMessage_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NotifyMessage_result(NotifyMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public NotifyMessage_result deepCopy() {
      return new NotifyMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public NotifyMessage_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof NotifyMessage_result)
        return this.equals((NotifyMessage_result)that);
      return false;
    }

    public boolean equals(NotifyMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(NotifyMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("NotifyMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NotifyMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_resultStandardScheme getScheme() {
        return new NotifyMessage_resultStandardScheme();
      }
    }

    private static class NotifyMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifyMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NotifyMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_resultTupleScheme getScheme() {
        return new NotifyMessage_resultTupleScheme();
      }
    }

    private static class NotifyMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifyMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReceiveMessage_args implements org.apache.thrift.TBase<ReceiveMessage_args, ReceiveMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReceiveMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReceiveMessage_args");

    private static final org.apache.thrift.protocol.TField I_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("iMsg", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STR_RECEIVE_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("strReceiveJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReceiveMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReceiveMessage_argsTupleSchemeFactory();

    public int iMsg; // required
    public java.lang.String strReceiveJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_MSG((short)1, "iMsg"),
      STR_RECEIVE_JSON((short)2, "strReceiveJson");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_MSG
            return I_MSG;
          case 2: // STR_RECEIVE_JSON
            return STR_RECEIVE_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_MSG, new org.apache.thrift.meta_data.FieldMetaData("iMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_RECEIVE_JSON, new org.apache.thrift.meta_data.FieldMetaData("strReceiveJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiveMessage_args.class, metaDataMap);
    }

    public ReceiveMessage_args() {
    }

    public ReceiveMessage_args(
      int iMsg,
      java.lang.String strReceiveJson)
    {
      this();
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      this.strReceiveJson = strReceiveJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReceiveMessage_args(ReceiveMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.iMsg = other.iMsg;
      if (other.isSetStrReceiveJson()) {
        this.strReceiveJson = other.strReceiveJson;
      }
    }

    public ReceiveMessage_args deepCopy() {
      return new ReceiveMessage_args(this);
    }

    @Override
    public void clear() {
      setIMsgIsSet(false);
      this.iMsg = 0;
      this.strReceiveJson = null;
    }

    public int getIMsg() {
      return this.iMsg;
    }

    public ReceiveMessage_args setIMsg(int iMsg) {
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      return this;
    }

    public void unsetIMsg() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    /** Returns true if field iMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetIMsg() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    public void setIMsgIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMSG_ISSET_ID, value);
    }

    public java.lang.String getStrReceiveJson() {
      return this.strReceiveJson;
    }

    public ReceiveMessage_args setStrReceiveJson(java.lang.String strReceiveJson) {
      this.strReceiveJson = strReceiveJson;
      return this;
    }

    public void unsetStrReceiveJson() {
      this.strReceiveJson = null;
    }

    /** Returns true if field strReceiveJson is set (has been assigned a value) and false otherwise */
    public boolean isSetStrReceiveJson() {
      return this.strReceiveJson != null;
    }

    public void setStrReceiveJsonIsSet(boolean value) {
      if (!value) {
        this.strReceiveJson = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case I_MSG:
        if (value == null) {
          unsetIMsg();
        } else {
          setIMsg((java.lang.Integer)value);
        }
        break;

      case STR_RECEIVE_JSON:
        if (value == null) {
          unsetStrReceiveJson();
        } else {
          setStrReceiveJson((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_MSG:
        return getIMsg();

      case STR_RECEIVE_JSON:
        return getStrReceiveJson();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_MSG:
        return isSetIMsg();
      case STR_RECEIVE_JSON:
        return isSetStrReceiveJson();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReceiveMessage_args)
        return this.equals((ReceiveMessage_args)that);
      return false;
    }

    public boolean equals(ReceiveMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iMsg = true;
      boolean that_present_iMsg = true;
      if (this_present_iMsg || that_present_iMsg) {
        if (!(this_present_iMsg && that_present_iMsg))
          return false;
        if (this.iMsg != that.iMsg)
          return false;
      }

      boolean this_present_strReceiveJson = true && this.isSetStrReceiveJson();
      boolean that_present_strReceiveJson = true && that.isSetStrReceiveJson();
      if (this_present_strReceiveJson || that_present_strReceiveJson) {
        if (!(this_present_strReceiveJson && that_present_strReceiveJson))
          return false;
        if (!this.strReceiveJson.equals(that.strReceiveJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + iMsg;

      hashCode = hashCode * 8191 + ((isSetStrReceiveJson()) ? 131071 : 524287);
      if (isSetStrReceiveJson())
        hashCode = hashCode * 8191 + strReceiveJson.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ReceiveMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIMsg()).compareTo(other.isSetIMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMsg, other.iMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrReceiveJson()).compareTo(other.isSetStrReceiveJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrReceiveJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strReceiveJson, other.strReceiveJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReceiveMessage_args(");
      boolean first = true;

      sb.append("iMsg:");
      sb.append(this.iMsg);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strReceiveJson:");
      if (this.strReceiveJson == null) {
        sb.append("null");
      } else {
        sb.append(this.strReceiveJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReceiveMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_argsStandardScheme getScheme() {
        return new ReceiveMessage_argsStandardScheme();
      }
    }

    private static class ReceiveMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReceiveMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iMsg = iprot.readI32();
                struct.setIMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_RECEIVE_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strReceiveJson = iprot.readString();
                struct.setStrReceiveJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(I_MSG_FIELD_DESC);
        oprot.writeI32(struct.iMsg);
        oprot.writeFieldEnd();
        if (struct.strReceiveJson != null) {
          oprot.writeFieldBegin(STR_RECEIVE_JSON_FIELD_DESC);
          oprot.writeString(struct.strReceiveJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReceiveMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_argsTupleScheme getScheme() {
        return new ReceiveMessage_argsTupleScheme();
      }
    }

    private static class ReceiveMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReceiveMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIMsg()) {
          optionals.set(0);
        }
        if (struct.isSetStrReceiveJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIMsg()) {
          oprot.writeI32(struct.iMsg);
        }
        if (struct.isSetStrReceiveJson()) {
          oprot.writeString(struct.strReceiveJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.iMsg = iprot.readI32();
          struct.setIMsgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strReceiveJson = iprot.readString();
          struct.setStrReceiveJsonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReceiveMessage_result implements org.apache.thrift.TBase<ReceiveMessage_result, ReceiveMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReceiveMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReceiveMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReceiveMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReceiveMessage_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiveMessage_result.class, metaDataMap);
    }

    public ReceiveMessage_result() {
    }

    public ReceiveMessage_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReceiveMessage_result(ReceiveMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public ReceiveMessage_result deepCopy() {
      return new ReceiveMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public ReceiveMessage_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReceiveMessage_result)
        return this.equals((ReceiveMessage_result)that);
      return false;
    }

    public boolean equals(ReceiveMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ReceiveMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReceiveMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReceiveMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_resultStandardScheme getScheme() {
        return new ReceiveMessage_resultStandardScheme();
      }
    }

    private static class ReceiveMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReceiveMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReceiveMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_resultTupleScheme getScheme() {
        return new ReceiveMessage_resultTupleScheme();
      }
    }

    private static class ReceiveMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReceiveMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneImage_args implements org.apache.thrift.TBase<GetSceneImage_args, GetSceneImage_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneImage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneImage_args");

    private static final org.apache.thrift.protocol.TField STR_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strChannelID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STR_CAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strCapID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneImage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneImage_argsTupleSchemeFactory();

    public java.lang.String strChannelID; // required
    public java.lang.String strCapID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_CHANNEL_ID((short)1, "strChannelID"),
      STR_CAP_ID((short)2, "strCapID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_CHANNEL_ID
            return STR_CHANNEL_ID;
          case 2: // STR_CAP_ID
            return STR_CAP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("strChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STR_CAP_ID, new org.apache.thrift.meta_data.FieldMetaData("strCapID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneImage_args.class, metaDataMap);
    }

    public GetSceneImage_args() {
    }

    public GetSceneImage_args(
      java.lang.String strChannelID,
      java.lang.String strCapID)
    {
      this();
      this.strChannelID = strChannelID;
      this.strCapID = strCapID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneImage_args(GetSceneImage_args other) {
      if (other.isSetStrChannelID()) {
        this.strChannelID = other.strChannelID;
      }
      if (other.isSetStrCapID()) {
        this.strCapID = other.strCapID;
      }
    }

    public GetSceneImage_args deepCopy() {
      return new GetSceneImage_args(this);
    }

    @Override
    public void clear() {
      this.strChannelID = null;
      this.strCapID = null;
    }

    public java.lang.String getStrChannelID() {
      return this.strChannelID;
    }

    public GetSceneImage_args setStrChannelID(java.lang.String strChannelID) {
      this.strChannelID = strChannelID;
      return this;
    }

    public void unsetStrChannelID() {
      this.strChannelID = null;
    }

    /** Returns true if field strChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrChannelID() {
      return this.strChannelID != null;
    }

    public void setStrChannelIDIsSet(boolean value) {
      if (!value) {
        this.strChannelID = null;
      }
    }

    public java.lang.String getStrCapID() {
      return this.strCapID;
    }

    public GetSceneImage_args setStrCapID(java.lang.String strCapID) {
      this.strCapID = strCapID;
      return this;
    }

    public void unsetStrCapID() {
      this.strCapID = null;
    }

    /** Returns true if field strCapID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrCapID() {
      return this.strCapID != null;
    }

    public void setStrCapIDIsSet(boolean value) {
      if (!value) {
        this.strCapID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STR_CHANNEL_ID:
        if (value == null) {
          unsetStrChannelID();
        } else {
          setStrChannelID((java.lang.String)value);
        }
        break;

      case STR_CAP_ID:
        if (value == null) {
          unsetStrCapID();
        } else {
          setStrCapID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_CHANNEL_ID:
        return getStrChannelID();

      case STR_CAP_ID:
        return getStrCapID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR_CHANNEL_ID:
        return isSetStrChannelID();
      case STR_CAP_ID:
        return isSetStrCapID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneImage_args)
        return this.equals((GetSceneImage_args)that);
      return false;
    }

    public boolean equals(GetSceneImage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_strChannelID = true && this.isSetStrChannelID();
      boolean that_present_strChannelID = true && that.isSetStrChannelID();
      if (this_present_strChannelID || that_present_strChannelID) {
        if (!(this_present_strChannelID && that_present_strChannelID))
          return false;
        if (!this.strChannelID.equals(that.strChannelID))
          return false;
      }

      boolean this_present_strCapID = true && this.isSetStrCapID();
      boolean that_present_strCapID = true && that.isSetStrCapID();
      if (this_present_strCapID || that_present_strCapID) {
        if (!(this_present_strCapID && that_present_strCapID))
          return false;
        if (!this.strCapID.equals(that.strCapID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStrChannelID()) ? 131071 : 524287);
      if (isSetStrChannelID())
        hashCode = hashCode * 8191 + strChannelID.hashCode();

      hashCode = hashCode * 8191 + ((isSetStrCapID()) ? 131071 : 524287);
      if (isSetStrCapID())
        hashCode = hashCode * 8191 + strCapID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStrChannelID()).compareTo(other.isSetStrChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strChannelID, other.strChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrCapID()).compareTo(other.isSetStrCapID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrCapID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strCapID, other.strCapID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneImage_args(");
      boolean first = true;

      sb.append("strChannelID:");
      if (this.strChannelID == null) {
        sb.append("null");
      } else {
        sb.append(this.strChannelID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strCapID:");
      if (this.strCapID == null) {
        sb.append("null");
      } else {
        sb.append(this.strCapID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneImage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_argsStandardScheme getScheme() {
        return new GetSceneImage_argsStandardScheme();
      }
    }

    private static class GetSceneImage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strChannelID = iprot.readString();
                struct.setStrChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_CAP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strCapID = iprot.readString();
                struct.setStrCapIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strChannelID != null) {
          oprot.writeFieldBegin(STR_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.strChannelID);
          oprot.writeFieldEnd();
        }
        if (struct.strCapID != null) {
          oprot.writeFieldBegin(STR_CAP_ID_FIELD_DESC);
          oprot.writeString(struct.strCapID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneImage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_argsTupleScheme getScheme() {
        return new GetSceneImage_argsTupleScheme();
      }
    }

    private static class GetSceneImage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStrChannelID()) {
          optionals.set(0);
        }
        if (struct.isSetStrCapID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrChannelID()) {
          oprot.writeString(struct.strChannelID);
        }
        if (struct.isSetStrCapID()) {
          oprot.writeString(struct.strCapID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strChannelID = iprot.readString();
          struct.setStrChannelIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strCapID = iprot.readString();
          struct.setStrCapIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneImage_result implements org.apache.thrift.TBase<GetSceneImage_result, GetSceneImage_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneImage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneImage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneImage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneImage_resultTupleSchemeFactory();

    public CapSceneImageResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapSceneImageResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneImage_result.class, metaDataMap);
    }

    public GetSceneImage_result() {
    }

    public GetSceneImage_result(
      CapSceneImageResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneImage_result(GetSceneImage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapSceneImageResult(other.success);
      }
    }

    public GetSceneImage_result deepCopy() {
      return new GetSceneImage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapSceneImageResult getSuccess() {
      return this.success;
    }

    public GetSceneImage_result setSuccess(CapSceneImageResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapSceneImageResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneImage_result)
        return this.equals((GetSceneImage_result)that);
      return false;
    }

    public boolean equals(GetSceneImage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneImage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_resultStandardScheme getScheme() {
        return new GetSceneImage_resultStandardScheme();
      }
    }

    private static class GetSceneImage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapSceneImageResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneImage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_resultTupleScheme getScheme() {
        return new GetSceneImage_resultTupleScheme();
      }
    }

    private static class GetSceneImage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapSceneImageResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetServersInfo_args implements org.apache.thrift.TBase<GetServersInfo_args, GetServersInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetServersInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetServersInfo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetServersInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetServersInfo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetServersInfo_args.class, metaDataMap);
    }

    public GetServersInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetServersInfo_args(GetServersInfo_args other) {
    }

    public GetServersInfo_args deepCopy() {
      return new GetServersInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetServersInfo_args)
        return this.equals((GetServersInfo_args)that);
      return false;
    }

    public boolean equals(GetServersInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetServersInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetServersInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetServersInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_argsStandardScheme getScheme() {
        return new GetServersInfo_argsStandardScheme();
      }
    }

    private static class GetServersInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetServersInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetServersInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_argsTupleScheme getScheme() {
        return new GetServersInfo_argsTupleScheme();
      }
    }

    private static class GetServersInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetServersInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetServersInfo_result implements org.apache.thrift.TBase<GetServersInfo_result, GetServersInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetServersInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetServersInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetServersInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetServersInfo_resultTupleSchemeFactory();

    public InfoForMonitor success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "InfoForMonitor")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetServersInfo_result.class, metaDataMap);
    }

    public GetServersInfo_result() {
    }

    public GetServersInfo_result(
      InfoForMonitor success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetServersInfo_result(GetServersInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new InfoForMonitor(other.success);
      }
    }

    public GetServersInfo_result deepCopy() {
      return new GetServersInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public InfoForMonitor getSuccess() {
      return this.success;
    }

    public GetServersInfo_result setSuccess(InfoForMonitor success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((InfoForMonitor)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetServersInfo_result)
        return this.equals((GetServersInfo_result)that);
      return false;
    }

    public boolean equals(GetServersInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetServersInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetServersInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetServersInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_resultStandardScheme getScheme() {
        return new GetServersInfo_resultStandardScheme();
      }
    }

    private static class GetServersInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetServersInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new InfoForMonitor();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetServersInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_resultTupleScheme getScheme() {
        return new GetServersInfo_resultTupleScheme();
      }
    }

    private static class GetServersInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetServersInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new InfoForMonitor();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFeatures_args implements org.apache.thrift.TBase<DetectFeatures_args, DetectFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFeatures_args");

    private static final org.apache.thrift.protocol.TField IMG_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("imgBytes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFeatures_argsTupleSchemeFactory();

    public java.nio.ByteBuffer imgBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMG_BYTES((short)1, "imgBytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMG_BYTES
            return IMG_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMG_BYTES, new org.apache.thrift.meta_data.FieldMetaData("imgBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFeatures_args.class, metaDataMap);
    }

    public DetectFeatures_args() {
    }

    public DetectFeatures_args(
      java.nio.ByteBuffer imgBytes)
    {
      this();
      this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFeatures_args(DetectFeatures_args other) {
      if (other.isSetImgBytes()) {
        this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(other.imgBytes);
      }
    }

    public DetectFeatures_args deepCopy() {
      return new DetectFeatures_args(this);
    }

    @Override
    public void clear() {
      this.imgBytes = null;
    }

    public byte[] getImgBytes() {
      setImgBytes(org.apache.thrift.TBaseHelper.rightSize(imgBytes));
      return imgBytes == null ? null : imgBytes.array();
    }

    public java.nio.ByteBuffer bufferForImgBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
    }

    public DetectFeatures_args setImgBytes(byte[] imgBytes) {
      this.imgBytes = imgBytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(imgBytes.clone());
      return this;
    }

    public DetectFeatures_args setImgBytes(java.nio.ByteBuffer imgBytes) {
      this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
      return this;
    }

    public void unsetImgBytes() {
      this.imgBytes = null;
    }

    /** Returns true if field imgBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetImgBytes() {
      return this.imgBytes != null;
    }

    public void setImgBytesIsSet(boolean value) {
      if (!value) {
        this.imgBytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IMG_BYTES:
        if (value == null) {
          unsetImgBytes();
        } else {
          if (value instanceof byte[]) {
            setImgBytes((byte[])value);
          } else {
            setImgBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IMG_BYTES:
        return getImgBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IMG_BYTES:
        return isSetImgBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFeatures_args)
        return this.equals((DetectFeatures_args)that);
      return false;
    }

    public boolean equals(DetectFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_imgBytes = true && this.isSetImgBytes();
      boolean that_present_imgBytes = true && that.isSetImgBytes();
      if (this_present_imgBytes || that_present_imgBytes) {
        if (!(this_present_imgBytes && that_present_imgBytes))
          return false;
        if (!this.imgBytes.equals(that.imgBytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImgBytes()) ? 131071 : 524287);
      if (isSetImgBytes())
        hashCode = hashCode * 8191 + imgBytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetImgBytes()).compareTo(other.isSetImgBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImgBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgBytes, other.imgBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFeatures_args(");
      boolean first = true;

      sb.append("imgBytes:");
      if (this.imgBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.imgBytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_argsStandardScheme getScheme() {
        return new DetectFeatures_argsStandardScheme();
      }
    }

    private static class DetectFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMG_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imgBytes = iprot.readBinary();
                struct.setImgBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imgBytes != null) {
          oprot.writeFieldBegin(IMG_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.imgBytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_argsTupleScheme getScheme() {
        return new DetectFeatures_argsTupleScheme();
      }
    }

    private static class DetectFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetImgBytes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetImgBytes()) {
          oprot.writeBinary(struct.imgBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.imgBytes = iprot.readBinary();
          struct.setImgBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFeatures_result implements org.apache.thrift.TBase<DetectFeatures_result, DetectFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFeatures_resultTupleSchemeFactory();

    public java.util.List<CapFeaturesSet> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapFeaturesSet.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFeatures_result.class, metaDataMap);
    }

    public DetectFeatures_result() {
    }

    public DetectFeatures_result(
      java.util.List<CapFeaturesSet> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFeatures_result(DetectFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CapFeaturesSet> __this__success = new java.util.ArrayList<CapFeaturesSet>(other.success.size());
        for (CapFeaturesSet other_element : other.success) {
          __this__success.add(new CapFeaturesSet(other_element));
        }
        this.success = __this__success;
      }
    }

    public DetectFeatures_result deepCopy() {
      return new DetectFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CapFeaturesSet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CapFeaturesSet elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CapFeaturesSet>();
      }
      this.success.add(elem);
    }

    public java.util.List<CapFeaturesSet> getSuccess() {
      return this.success;
    }

    public DetectFeatures_result setSuccess(java.util.List<CapFeaturesSet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CapFeaturesSet>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFeatures_result)
        return this.equals((DetectFeatures_result)that);
      return false;
    }

    public boolean equals(DetectFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_resultStandardScheme getScheme() {
        return new DetectFeatures_resultStandardScheme();
      }
    }

    private static class DetectFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CapFeaturesSet>(_list112.size);
                  CapFeaturesSet _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new CapFeaturesSet();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CapFeaturesSet _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_resultTupleScheme getScheme() {
        return new DetectFeatures_resultTupleScheme();
      }
    }

    private static class DetectFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CapFeaturesSet _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CapFeaturesSet>(_list117.size);
            CapFeaturesSet _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new CapFeaturesSet();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

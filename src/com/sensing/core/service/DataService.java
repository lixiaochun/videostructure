package com.sensing.core.service;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.sensing.core.bean.ChannelQueryResult;
import com.sensing.core.bean.ReturnMsg;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-10-12")
public class DataService {

  public interface Iface {

    public ChannelQueryResult QueryChannelsByRegionID(int regionID, int nStartNum, int nCount) throws org.apache.thrift.TException;

    public ReturnMsg ModifyStaticVideoStatic(String uuid, int state) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void QueryChannelsByRegionID(int regionID, int nStartNum, int nCount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ModifyStaticVideoStatic(String uuid, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ChannelQueryResult QueryChannelsByRegionID(int regionID, int nStartNum, int nCount) throws org.apache.thrift.TException
    {
      send_QueryChannelsByRegionID(regionID, nStartNum, nCount);
      return recv_QueryChannelsByRegionID();
    }

    public void send_QueryChannelsByRegionID(int regionID, int nStartNum, int nCount) throws org.apache.thrift.TException
    {
      QueryChannelsByRegionID_args args = new QueryChannelsByRegionID_args();
      args.setRegionID(regionID);
      args.setNStartNum(nStartNum);
      args.setNCount(nCount);
      sendBase("QueryChannelsByRegionID", args);
    }

    public ChannelQueryResult recv_QueryChannelsByRegionID() throws org.apache.thrift.TException
    {
      QueryChannelsByRegionID_result result = new QueryChannelsByRegionID_result();
      receiveBase(result, "QueryChannelsByRegionID");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QueryChannelsByRegionID failed: unknown result");
    }

    public ReturnMsg ModifyStaticVideoStatic(String uuid, int state) throws org.apache.thrift.TException
    {
      send_ModifyStaticVideoStatic(uuid, state);
      return recv_ModifyStaticVideoStatic();
    }

    public void send_ModifyStaticVideoStatic(String uuid, int state) throws org.apache.thrift.TException
    {
      ModifyStaticVideoStatic_args args = new ModifyStaticVideoStatic_args();
      args.setUuid(uuid);
      args.setState(state);
      sendBase("ModifyStaticVideoStatic", args);
    }

    public ReturnMsg recv_ModifyStaticVideoStatic() throws org.apache.thrift.TException
    {
      ModifyStaticVideoStatic_result result = new ModifyStaticVideoStatic_result();
      receiveBase(result, "ModifyStaticVideoStatic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ModifyStaticVideoStatic failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void QueryChannelsByRegionID(int regionID, int nStartNum, int nCount, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryChannelsByRegionID_call method_call = new QueryChannelsByRegionID_call(regionID, nStartNum, nCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryChannelsByRegionID_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int regionID;
      private int nStartNum;
      private int nCount;
      public QueryChannelsByRegionID_call(int regionID, int nStartNum, int nCount, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regionID = regionID;
        this.nStartNum = nStartNum;
        this.nCount = nCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryChannelsByRegionID", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QueryChannelsByRegionID_args args = new QueryChannelsByRegionID_args();
        args.setRegionID(regionID);
        args.setNStartNum(nStartNum);
        args.setNCount(nCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ChannelQueryResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QueryChannelsByRegionID();
      }
    }

    public void ModifyStaticVideoStatic(String uuid, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ModifyStaticVideoStatic_call method_call = new ModifyStaticVideoStatic_call(uuid, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ModifyStaticVideoStatic_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uuid;
      private int state;
      public ModifyStaticVideoStatic_call(String uuid, int state, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuid = uuid;
        this.state = state;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ModifyStaticVideoStatic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ModifyStaticVideoStatic_args args = new ModifyStaticVideoStatic_args();
        args.setUuid(uuid);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ReturnMsg getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ModifyStaticVideoStatic();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("QueryChannelsByRegionID", new QueryChannelsByRegionID());
      processMap.put("ModifyStaticVideoStatic", new ModifyStaticVideoStatic());
      return processMap;
    }

    public static class QueryChannelsByRegionID<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryChannelsByRegionID_args> {
      public QueryChannelsByRegionID() {
        super("QueryChannelsByRegionID");
      }

      public QueryChannelsByRegionID_args getEmptyArgsInstance() {
        return new QueryChannelsByRegionID_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QueryChannelsByRegionID_result getResult(I iface, QueryChannelsByRegionID_args args) throws org.apache.thrift.TException {
        QueryChannelsByRegionID_result result = new QueryChannelsByRegionID_result();
        result.success = iface.QueryChannelsByRegionID(args.regionID, args.nStartNum, args.nCount);
        return result;
      }
    }

    public static class ModifyStaticVideoStatic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ModifyStaticVideoStatic_args> {
      public ModifyStaticVideoStatic() {
        super("ModifyStaticVideoStatic");
      }

      public ModifyStaticVideoStatic_args getEmptyArgsInstance() {
        return new ModifyStaticVideoStatic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ModifyStaticVideoStatic_result getResult(I iface, ModifyStaticVideoStatic_args args) throws org.apache.thrift.TException {
        ModifyStaticVideoStatic_result result = new ModifyStaticVideoStatic_result();
        result.success = iface.ModifyStaticVideoStatic(args.uuid, args.state);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("QueryChannelsByRegionID", new QueryChannelsByRegionID());
      processMap.put("ModifyStaticVideoStatic", new ModifyStaticVideoStatic());
      return processMap;
    }

    public static class QueryChannelsByRegionID<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryChannelsByRegionID_args, ChannelQueryResult> {
      public QueryChannelsByRegionID() {
        super("QueryChannelsByRegionID");
      }

      public QueryChannelsByRegionID_args getEmptyArgsInstance() {
        return new QueryChannelsByRegionID_args();
      }

      public AsyncMethodCallback<ChannelQueryResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ChannelQueryResult>() { 
          public void onComplete(ChannelQueryResult o) {
            QueryChannelsByRegionID_result result = new QueryChannelsByRegionID_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            QueryChannelsByRegionID_result result = new QueryChannelsByRegionID_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QueryChannelsByRegionID_args args, org.apache.thrift.async.AsyncMethodCallback<ChannelQueryResult> resultHandler) throws TException {
        iface.QueryChannelsByRegionID(args.regionID, args.nStartNum, args.nCount,resultHandler);
      }
    }

    public static class ModifyStaticVideoStatic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ModifyStaticVideoStatic_args, ReturnMsg> {
      public ModifyStaticVideoStatic() {
        super("ModifyStaticVideoStatic");
      }

      public ModifyStaticVideoStatic_args getEmptyArgsInstance() {
        return new ModifyStaticVideoStatic_args();
      }

      public AsyncMethodCallback<ReturnMsg> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ReturnMsg>() { 
          public void onComplete(ReturnMsg o) {
            ModifyStaticVideoStatic_result result = new ModifyStaticVideoStatic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ModifyStaticVideoStatic_result result = new ModifyStaticVideoStatic_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ModifyStaticVideoStatic_args args, org.apache.thrift.async.AsyncMethodCallback<ReturnMsg> resultHandler) throws TException {
        iface.ModifyStaticVideoStatic(args.uuid, args.state,resultHandler);
      }
    }

  }

  public static class QueryChannelsByRegionID_args implements org.apache.thrift.TBase<QueryChannelsByRegionID_args, QueryChannelsByRegionID_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryChannelsByRegionID_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryChannelsByRegionID_args");

    private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField N_START_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("nStartNum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField N_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nCount", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryChannelsByRegionID_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryChannelsByRegionID_argsTupleSchemeFactory());
    }

    public int regionID; // required
    public int nStartNum; // required
    public int nCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGION_ID((short)1, "regionID"),
      N_START_NUM((short)2, "nStartNum"),
      N_COUNT((short)3, "nCount");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGION_ID
            return REGION_ID;
          case 2: // N_START_NUM
            return N_START_NUM;
          case 3: // N_COUNT
            return N_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REGIONID_ISSET_ID = 0;
    private static final int __NSTARTNUM_ISSET_ID = 1;
    private static final int __NCOUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.N_START_NUM, new org.apache.thrift.meta_data.FieldMetaData("nStartNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.N_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryChannelsByRegionID_args.class, metaDataMap);
    }

    public QueryChannelsByRegionID_args() {
    }

    public QueryChannelsByRegionID_args(
      int regionID,
      int nStartNum,
      int nCount)
    {
      this();
      this.regionID = regionID;
      setRegionIDIsSet(true);
      this.nStartNum = nStartNum;
      setNStartNumIsSet(true);
      this.nCount = nCount;
      setNCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryChannelsByRegionID_args(QueryChannelsByRegionID_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.regionID = other.regionID;
      this.nStartNum = other.nStartNum;
      this.nCount = other.nCount;
    }

    public QueryChannelsByRegionID_args deepCopy() {
      return new QueryChannelsByRegionID_args(this);
    }

    @Override
    public void clear() {
      setRegionIDIsSet(false);
      this.regionID = 0;
      setNStartNumIsSet(false);
      this.nStartNum = 0;
      setNCountIsSet(false);
      this.nCount = 0;
    }

    public int getRegionID() {
      return this.regionID;
    }

    public QueryChannelsByRegionID_args setRegionID(int regionID) {
      this.regionID = regionID;
      setRegionIDIsSet(true);
      return this;
    }

    public void unsetRegionID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REGIONID_ISSET_ID);
    }

    /** Returns true if field regionID is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionID() {
      return EncodingUtils.testBit(__isset_bitfield, __REGIONID_ISSET_ID);
    }

    public void setRegionIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REGIONID_ISSET_ID, value);
    }

    public int getNStartNum() {
      return this.nStartNum;
    }

    public QueryChannelsByRegionID_args setNStartNum(int nStartNum) {
      this.nStartNum = nStartNum;
      setNStartNumIsSet(true);
      return this;
    }

    public void unsetNStartNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NSTARTNUM_ISSET_ID);
    }

    /** Returns true if field nStartNum is set (has been assigned a value) and false otherwise */
    public boolean isSetNStartNum() {
      return EncodingUtils.testBit(__isset_bitfield, __NSTARTNUM_ISSET_ID);
    }

    public void setNStartNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NSTARTNUM_ISSET_ID, value);
    }

    public int getNCount() {
      return this.nCount;
    }

    public QueryChannelsByRegionID_args setNCount(int nCount) {
      this.nCount = nCount;
      setNCountIsSet(true);
      return this;
    }

    public void unsetNCount() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NCOUNT_ISSET_ID);
    }

    /** Returns true if field nCount is set (has been assigned a value) and false otherwise */
    public boolean isSetNCount() {
      return EncodingUtils.testBit(__isset_bitfield, __NCOUNT_ISSET_ID);
    }

    public void setNCountIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGION_ID:
        if (value == null) {
          unsetRegionID();
        } else {
          setRegionID((Integer)value);
        }
        break;

      case N_START_NUM:
        if (value == null) {
          unsetNStartNum();
        } else {
          setNStartNum((Integer)value);
        }
        break;

      case N_COUNT:
        if (value == null) {
          unsetNCount();
        } else {
          setNCount((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGION_ID:
        return getRegionID();

      case N_START_NUM:
        return getNStartNum();

      case N_COUNT:
        return getNCount();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGION_ID:
        return isSetRegionID();
      case N_START_NUM:
        return isSetNStartNum();
      case N_COUNT:
        return isSetNCount();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryChannelsByRegionID_args)
        return this.equals((QueryChannelsByRegionID_args)that);
      return false;
    }

    public boolean equals(QueryChannelsByRegionID_args that) {
      if (that == null)
        return false;

      boolean this_present_regionID = true;
      boolean that_present_regionID = true;
      if (this_present_regionID || that_present_regionID) {
        if (!(this_present_regionID && that_present_regionID))
          return false;
        if (this.regionID != that.regionID)
          return false;
      }

      boolean this_present_nStartNum = true;
      boolean that_present_nStartNum = true;
      if (this_present_nStartNum || that_present_nStartNum) {
        if (!(this_present_nStartNum && that_present_nStartNum))
          return false;
        if (this.nStartNum != that.nStartNum)
          return false;
      }

      boolean this_present_nCount = true;
      boolean that_present_nCount = true;
      if (this_present_nCount || that_present_nCount) {
        if (!(this_present_nCount && that_present_nCount))
          return false;
        if (this.nCount != that.nCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_regionID = true;
      list.add(present_regionID);
      if (present_regionID)
        list.add(regionID);

      boolean present_nStartNum = true;
      list.add(present_nStartNum);
      if (present_nStartNum)
        list.add(nStartNum);

      boolean present_nCount = true;
      list.add(present_nCount);
      if (present_nCount)
        list.add(nCount);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryChannelsByRegionID_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRegionID()).compareTo(other.isSetRegionID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionID, other.regionID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNStartNum()).compareTo(other.isSetNStartNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNStartNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nStartNum, other.nStartNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNCount()).compareTo(other.isSetNCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nCount, other.nCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryChannelsByRegionID_args(");
      boolean first = true;

      sb.append("regionID:");
      sb.append(this.regionID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nStartNum:");
      sb.append(this.nStartNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nCount:");
      sb.append(this.nCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryChannelsByRegionID_argsStandardSchemeFactory implements SchemeFactory {
      public QueryChannelsByRegionID_argsStandardScheme getScheme() {
        return new QueryChannelsByRegionID_argsStandardScheme();
      }
    }

    private static class QueryChannelsByRegionID_argsStandardScheme extends StandardScheme<QueryChannelsByRegionID_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryChannelsByRegionID_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.regionID = iprot.readI32();
                struct.setRegionIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_START_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nStartNum = iprot.readI32();
                struct.setNStartNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // N_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nCount = iprot.readI32();
                struct.setNCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryChannelsByRegionID_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
        oprot.writeI32(struct.regionID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(N_START_NUM_FIELD_DESC);
        oprot.writeI32(struct.nStartNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(N_COUNT_FIELD_DESC);
        oprot.writeI32(struct.nCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryChannelsByRegionID_argsTupleSchemeFactory implements SchemeFactory {
      public QueryChannelsByRegionID_argsTupleScheme getScheme() {
        return new QueryChannelsByRegionID_argsTupleScheme();
      }
    }

    private static class QueryChannelsByRegionID_argsTupleScheme extends TupleScheme<QueryChannelsByRegionID_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryChannelsByRegionID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRegionID()) {
          optionals.set(0);
        }
        if (struct.isSetNStartNum()) {
          optionals.set(1);
        }
        if (struct.isSetNCount()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRegionID()) {
          oprot.writeI32(struct.regionID);
        }
        if (struct.isSetNStartNum()) {
          oprot.writeI32(struct.nStartNum);
        }
        if (struct.isSetNCount()) {
          oprot.writeI32(struct.nCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryChannelsByRegionID_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.regionID = iprot.readI32();
          struct.setRegionIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nStartNum = iprot.readI32();
          struct.setNStartNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nCount = iprot.readI32();
          struct.setNCountIsSet(true);
        }
      }
    }

  }

  public static class QueryChannelsByRegionID_result implements org.apache.thrift.TBase<QueryChannelsByRegionID_result, QueryChannelsByRegionID_result._Fields>, java.io.Serializable, Cloneable, Comparable<QueryChannelsByRegionID_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryChannelsByRegionID_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new QueryChannelsByRegionID_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new QueryChannelsByRegionID_resultTupleSchemeFactory());
    }

    public ChannelQueryResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ChannelQueryResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryChannelsByRegionID_result.class, metaDataMap);
    }

    public QueryChannelsByRegionID_result() {
    }

    public QueryChannelsByRegionID_result(
      ChannelQueryResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryChannelsByRegionID_result(QueryChannelsByRegionID_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelQueryResult(other.success);
      }
    }

    public QueryChannelsByRegionID_result deepCopy() {
      return new QueryChannelsByRegionID_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ChannelQueryResult getSuccess() {
      return this.success;
    }

    public QueryChannelsByRegionID_result setSuccess(ChannelQueryResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ChannelQueryResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryChannelsByRegionID_result)
        return this.equals((QueryChannelsByRegionID_result)that);
      return false;
    }

    public boolean equals(QueryChannelsByRegionID_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(QueryChannelsByRegionID_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("QueryChannelsByRegionID_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryChannelsByRegionID_resultStandardSchemeFactory implements SchemeFactory {
      public QueryChannelsByRegionID_resultStandardScheme getScheme() {
        return new QueryChannelsByRegionID_resultStandardScheme();
      }
    }

    private static class QueryChannelsByRegionID_resultStandardScheme extends StandardScheme<QueryChannelsByRegionID_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryChannelsByRegionID_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ChannelQueryResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryChannelsByRegionID_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryChannelsByRegionID_resultTupleSchemeFactory implements SchemeFactory {
      public QueryChannelsByRegionID_resultTupleScheme getScheme() {
        return new QueryChannelsByRegionID_resultTupleScheme();
      }
    }

    private static class QueryChannelsByRegionID_resultTupleScheme extends TupleScheme<QueryChannelsByRegionID_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryChannelsByRegionID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryChannelsByRegionID_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ChannelQueryResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ModifyStaticVideoStatic_args implements org.apache.thrift.TBase<ModifyStaticVideoStatic_args, ModifyStaticVideoStatic_args._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyStaticVideoStatic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyStaticVideoStatic_args");

    private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ModifyStaticVideoStatic_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ModifyStaticVideoStatic_argsTupleSchemeFactory());
    }

    public String uuid; // required
    public int state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UUID((short)1, "uuid"),
      STATE((short)2, "state");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UUID
            return UUID;
          case 2: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyStaticVideoStatic_args.class, metaDataMap);
    }

    public ModifyStaticVideoStatic_args() {
    }

    public ModifyStaticVideoStatic_args(
      String uuid,
      int state)
    {
      this();
      this.uuid = uuid;
      this.state = state;
      setStateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyStaticVideoStatic_args(ModifyStaticVideoStatic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUuid()) {
        this.uuid = other.uuid;
      }
      this.state = other.state;
    }

    public ModifyStaticVideoStatic_args deepCopy() {
      return new ModifyStaticVideoStatic_args(this);
    }

    @Override
    public void clear() {
      this.uuid = null;
      setStateIsSet(false);
      this.state = 0;
    }

    public String getUuid() {
      return this.uuid;
    }

    public ModifyStaticVideoStatic_args setUuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    public void unsetUuid() {
      this.uuid = null;
    }

    /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
    public boolean isSetUuid() {
      return this.uuid != null;
    }

    public void setUuidIsSet(boolean value) {
      if (!value) {
        this.uuid = null;
      }
    }

    public int getState() {
      return this.state;
    }

    public ModifyStaticVideoStatic_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UUID:
        if (value == null) {
          unsetUuid();
        } else {
          setUuid((String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UUID:
        return getUuid();

      case STATE:
        return getState();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UUID:
        return isSetUuid();
      case STATE:
        return isSetState();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyStaticVideoStatic_args)
        return this.equals((ModifyStaticVideoStatic_args)that);
      return false;
    }

    public boolean equals(ModifyStaticVideoStatic_args that) {
      if (that == null)
        return false;

      boolean this_present_uuid = true && this.isSetUuid();
      boolean that_present_uuid = true && that.isSetUuid();
      if (this_present_uuid || that_present_uuid) {
        if (!(this_present_uuid && that_present_uuid))
          return false;
        if (!this.uuid.equals(that.uuid))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_uuid = true && (isSetUuid());
      list.add(present_uuid);
      if (present_uuid)
        list.add(uuid);

      boolean present_state = true;
      list.add(present_state);
      if (present_state)
        list.add(state);

      return list.hashCode();
    }

    @Override
    public int compareTo(ModifyStaticVideoStatic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ModifyStaticVideoStatic_args(");
      boolean first = true;

      sb.append("uuid:");
      if (this.uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.uuid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyStaticVideoStatic_argsStandardSchemeFactory implements SchemeFactory {
      public ModifyStaticVideoStatic_argsStandardScheme getScheme() {
        return new ModifyStaticVideoStatic_argsStandardScheme();
      }
    }

    private static class ModifyStaticVideoStatic_argsStandardScheme extends StandardScheme<ModifyStaticVideoStatic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyStaticVideoStatic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuid = iprot.readString();
                struct.setUuidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyStaticVideoStatic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuid != null) {
          oprot.writeFieldBegin(UUID_FIELD_DESC);
          oprot.writeString(struct.uuid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyStaticVideoStatic_argsTupleSchemeFactory implements SchemeFactory {
      public ModifyStaticVideoStatic_argsTupleScheme getScheme() {
        return new ModifyStaticVideoStatic_argsTupleScheme();
      }
    }

    private static class ModifyStaticVideoStatic_argsTupleScheme extends TupleScheme<ModifyStaticVideoStatic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyStaticVideoStatic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUuid()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUuid()) {
          oprot.writeString(struct.uuid);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyStaticVideoStatic_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uuid = iprot.readString();
          struct.setUuidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
      }
    }

  }

  public static class ModifyStaticVideoStatic_result implements org.apache.thrift.TBase<ModifyStaticVideoStatic_result, ModifyStaticVideoStatic_result._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyStaticVideoStatic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyStaticVideoStatic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ModifyStaticVideoStatic_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ModifyStaticVideoStatic_resultTupleSchemeFactory());
    }

    public ReturnMsg success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReturnMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyStaticVideoStatic_result.class, metaDataMap);
    }

    public ModifyStaticVideoStatic_result() {
    }

    public ModifyStaticVideoStatic_result(
      ReturnMsg success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyStaticVideoStatic_result(ModifyStaticVideoStatic_result other) {
      if (other.isSetSuccess()) {
        this.success = new ReturnMsg(other.success);
      }
    }

    public ModifyStaticVideoStatic_result deepCopy() {
      return new ModifyStaticVideoStatic_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ReturnMsg getSuccess() {
      return this.success;
    }

    public ModifyStaticVideoStatic_result setSuccess(ReturnMsg success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ReturnMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyStaticVideoStatic_result)
        return this.equals((ModifyStaticVideoStatic_result)that);
      return false;
    }

    public boolean equals(ModifyStaticVideoStatic_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ModifyStaticVideoStatic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ModifyStaticVideoStatic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyStaticVideoStatic_resultStandardSchemeFactory implements SchemeFactory {
      public ModifyStaticVideoStatic_resultStandardScheme getScheme() {
        return new ModifyStaticVideoStatic_resultStandardScheme();
      }
    }

    private static class ModifyStaticVideoStatic_resultStandardScheme extends StandardScheme<ModifyStaticVideoStatic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyStaticVideoStatic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ReturnMsg();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyStaticVideoStatic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyStaticVideoStatic_resultTupleSchemeFactory implements SchemeFactory {
      public ModifyStaticVideoStatic_resultTupleScheme getScheme() {
        return new ModifyStaticVideoStatic_resultTupleScheme();
      }
    }

    private static class ModifyStaticVideoStatic_resultTupleScheme extends TupleScheme<ModifyStaticVideoStatic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyStaticVideoStatic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyStaticVideoStatic_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ReturnMsg();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}

package com.sensing.core.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import com.sensing.core.bean.Channel;
import com.sensing.core.bean.ReturnMsg;
import com.sensing.core.cacahes.PreviewCache;
import com.sensing.core.cacahes.SessionCache;
import com.sensing.core.service.ICapAttrConvertService;
import com.sensing.core.service.ICapService;
import com.sensing.core.service.IExportExcelService;
import com.sensing.core.service.IPreviewService;
import com.sensing.core.service.IRpcLogService;
import com.sensing.core.service.ITaskService;
import com.sensing.core.service.impl.ChannelServiceImpl;
import com.sensing.core.utils.BaseController;
import com.sensing.core.utils.RemoteShellExecutor;
import com.sensing.core.utils.ResponseBean;
import com.sensing.core.utils.props.PropUtils;
import com.sensing.core.utils.results.ResultUtils;
import com.sensing.core.utils.task.JobsAndTaskTimer;
import com.sensing.core.utils.time.DateUtil;

@Controller
@RequestMapping("/utils")
@SuppressWarnings("all")
public class UtilsController extends BaseController {

    private static final Log log = LogFactory.getLog(UtilsController.class);

    @Autowired
    public ICapAttrConvertService capAttrConvertService;
    @Autowired
    public IRpcLogService rpcLogService;
    @Autowired
    public ICapService capService;
    @Resource
    private MongoTemplate mongoTemplate;
    @Resource
    public IExportExcelService exportExcelService;
    @Resource
    public IPreviewService previewService;
    @Resource
    public JobsAndTaskTimer jobsAndTaskTimer;
    @Resource
    public ChannelServiceImpl channelServiceImpl;
    @Resource
    public ITaskService taskService;
    
    /**
     * 离线视频完成之后，被抓拍调用通知修改db中的状态
     * @param p
     * @return
     * @author mingxingyu
     * @date   2019年3月14日 下午1:34:54
     */
    @ResponseBody
    @RequestMapping("/callStaticVideo")
    public ResponseBean callStaticVideo(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
        	String deviceUuid = p.getString("deviceId");
        	Integer status = p.getInteger("status");
        	ReturnMsg msg = taskService.callStaticVideo(deviceUuid, status);

        	result.setError(msg.getRes());
        	result.setMessage(msg.getMsg());
        } catch (Exception e) {
            log.error(e);
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }
    
    /**
     * 用户调用该接口，记录操作的日志
     * @param p
     * @return
     * @author mingxingyu
     * @date   2019年3月5日 上午10:28:25
     */
    @ResponseBody
    @RequestMapping("/logTag")
    public ResponseBean logTag(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
            result = ResultUtils.success();
        } catch (Exception e) {
            log.error(e);
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }
    /**
     * 前端视频预览关闭的通知
     *
     * @param p
     * @return
     * @author mingxingyu
     * @date 2019年1月30日 下午3:10:29
     */
    @ResponseBody
    @RequestMapping("/previewClosed")
    public ResponseBean previewClosed(@RequestBody JSONObject p) {
    	ResponseBean result = new ResponseBean();
    	try {
    		String userId = getUuid();
    		if (StringUtils.isBlank(userId)) {
    			result = ResultUtils.REQUIRED_EMPTY_ERROR();
    		}
//    		previewService.delDevice(userId);
    		result = ResultUtils.success();
    	} catch (Exception e) {
    		log.error(e);
    		result.setError(100);
    		result.setMessage(e.getMessage());
    	}
    	return result;
    }

    /**
     * 前端视频预览定时通讯
     *
     * @param p
     * @return
     * @author mingxingyu
     * @date 2019年1月30日 下午3:10:29
     */
    @ResponseBody
    @RequestMapping("/previewOnline")
    public ResponseBean previewOnline(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
            String userId = getUuid();
            String deviceId = p.getString("deviceId");
            if (StringUtils.isBlank(userId) || StringUtils.isBlank(deviceId)) {
                result = ResultUtils.REQUIRED_EMPTY_ERROR();
            }
            result = previewService.updateData(userId, deviceId);
        } catch (Exception e) {
            log.error("previewOnline,打开画框" + com.sensing.core.utils.StringUtils.getStackTrace(e));
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
     * 查询在线用户的数量
     *
     * @param p
     * @return
     * @author mingxingyu
     * @date 2018年12月18日 下午4:30:11
     */
    @ResponseBody
    @RequestMapping("/queryOnlineUserCount")
    public ResponseBean queryOnlineUserCount(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
            result = ResultUtils.success("userOnlineCount", SessionCache.getSessionSize());
        } catch (Exception e) {
            log.error(e);
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
     * 打开抓拍通道画框的接口
     *
     * @param p
     * @return
     * @author mingxingyu
     * @date 2018年12月6日 下午4:01:49
     */
    @ResponseBody
    @RequestMapping("/openChannelFrame")
    public ResponseBean openChannelFrame(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
            String channelUuid = p.getString("channelUuid");
            if (StringUtils.isNotBlank(channelUuid)) {
                //打开通道后，要延迟2s打开画框，否则报错-4104，尝试3次
                Integer integer = openFrame(channelUuid, 3);
                if (integer == 1) {
                    result = ResultUtils.success();
                } else {
                    result = ResultUtils.error(-1, "openChannelFrame调用失败");
                }
            } else {
                result = ResultUtils.REQUIRED_EMPTY_ERROR();
            }

        } catch (Exception e) {
            log.error(com.sensing.core.utils.StringUtils.getStackTrace(e));
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    public Integer openFrame(String channelUuid, int count) throws Exception {
        int result = 0;
        while (true) {
            Integer integer = capService.openChannelFrame(channelUuid);
            if (integer == null || integer < 0) {
                Thread.sleep(2000);
                count--;
                if (count == 0) {
                    result = -1;
                    break;
                }
            } else {
                log.info("opFrameWhithCount失败----重试次数为"+count);
                result = 1;
                break;
            }
        }

        return result;
    }


    /**
     * 获取显卡信息
     *
     * @param p
     * @return
     * @author mingxingyu
     * @date 2018年12月3日 上午11:10:55
     */
    @ResponseBody
    @RequestMapping("/getGraphicsCardInfo")
    public ResponseBean testMongo(@RequestBody JSONObject p) {
        ResponseBean result = new ResponseBean();
        try {
            RemoteShellExecutor executor = new RemoteShellExecutor(PropUtils.getString("remote.shell.ip"),PropUtils.getInt("remote.shell.port",22), PropUtils.getString("remote.shell.username"), PropUtils.getString("remote.shell.password"), "utf-8");
            String resultExe = executor.exec("nvidia-smi");

            String[] resultStr = resultExe.split("\n");
            int i = 0;
            boolean flag = false;

            List<String> gcList = new ArrayList<String>();
            StringBuffer str = null;
            for (String resultRow : resultStr) {
                if (resultRow.contains(" " + i + " ")) {
                    String[] gcRowArr = resultRow.split("\\|");
                    String gcStr = gcRowArr[1].trim();
                    String gcInfo = gcStr.substring(gcStr.indexOf(" "), gcStr.lastIndexOf(" ")).trim();
                    str = new StringBuffer(gcInfo);
                    i++;
                    flag = true;
                    continue;
                }
                if (flag) {
                    String[] memoryArr = resultRow.split("\\|");
                    String memoryStr = memoryArr[2].trim();
                    String memoryInfo = memoryStr.replaceAll(" ", "");
                    str.append(" " + memoryInfo);
                    gcList.add(str.toString());
                    flag = false;
                }
                if (resultRow.contains("Processes")) {
                    break;
                }
            }

            result.getMap().put("gcList", gcList);
            result.setError(0);
            result.setMessage("successful");
        } catch (Exception e) {
            log.error(e);
            result.setError(100);
            result.setMessage(e.getMessage());
        }
        return result;
    }

    /**
     * (jenkins启动tomcat以后，测试心跳的接口)
     *
     * @return
     */
    @ResponseBody
    @RequestMapping("/tomcatheart")
    public ResponseBean tomcatHeart(@RequestBody JSONObject p) {
        return new ResponseBean();
    }

    /**
     * 获得flash的存放地址
     *
     * @param p
     * @return
     */
    @ResponseBody
    @RequestMapping("/getflashplayer")
    public ResponseBean getFlashPlayer(@RequestBody JSONObject p) {
        String requestPath = PropUtils.getString("watch_download") + "/install_flash_player_ax.exe";
        return new ResultUtils().success(requestPath);
    }

    /**
     * 获得chrome的存放地址
     *
     * @param p
     * @return
     */
    @ResponseBody
    @RequestMapping("/getchromesetup")
    public ResponseBean gethromesSetup(@RequestBody JSONObject p) {
        String requestPath = PropUtils.getString("watch_download") + "/ChromeSetup.exe";
        return new ResultUtils().success(requestPath);
    }

    @ResponseBody
    @RequestMapping("/cleandevice")
    public ResponseBean cleandevice(@RequestBody JSONObject p) {
        PreviewCache.deviceTimeMap = new ConcurrentHashMap<String, Long>();
        return new ResultUtils().success(PreviewCache.deviceTimeMap);
    }

    @ResponseBody
    @RequestMapping("/jobsandtasktimer")
    public ResponseBean jobsAndTaskTimer(@RequestBody JSONObject p) {
        jobsAndTaskTimer.startJobs();
        return new ResultUtils().success();
    }

    @ResponseBody
    @RequestMapping("/getnowpreview")
    public ResponseBean getnowpreview(@RequestBody JSONObject p) {

        StringBuilder builder = new StringBuilder();
        Set<String> keys = PreviewCache.deviceTimeMap.keySet();
        if (keys != null && keys.size() > 0) {
            List<String> ids = new ArrayList();
            for (String deviceId : keys) {
                ids.add(deviceId);
            }
            List<Channel> list = channelServiceImpl.getChannelByUuIds(ids);
            for (String deviceId : keys) {
                Long time = PreviewCache.deviceTimeMap.get(deviceId);
                String date = DateUtil.stampToDate(time * 1000 + "");
                List<Channel> clist = list.stream().filter(a -> a.getUuid().equals(deviceId)).collect(Collectors.toList());
                if (!CollectionUtils.isEmpty(clist)) {
                    String s = DateUtil.DateToString(new Date()) + "--通道uuid--" + deviceId + "---通道名称---"+clist.get(0).getChannelName()+"--通道更新时间--" + date;
                    builder.append(s);
                }
            }
        }

        return new ResultUtils().success(new String(builder));
    }
}
	

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sensing.core.thrift.cmp.service;

import com.sensing.core.thrift.cmp.bean.Cmp1vnRetInfo;
import com.sensing.core.thrift.cmp.bean.CmpRetInfo;
import com.sensing.core.thrift.cmp.bean.DBInfoReturn;
import com.sensing.core.thrift.cmp.bean.FaceTemplateDB;
import com.sensing.core.thrift.cmp.bean.FeatureInfo;
import com.sensing.core.thrift.cmp.bean.Result;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-07-03")
public class CmpService {

  public interface Iface {

    public java.util.List<CmpRetInfo> CompareFeature(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException;

    public Cmp1vnRetInfo Compare1vnFeature(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException;

    public int ModifyTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException;

    public int DeleteTemplate(int DBID, java.lang.String feaID) throws org.apache.thrift.TException;

    public int AddTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException;

    public Result AddTDB(FaceTemplateDB ftdb) throws org.apache.thrift.TException;

    public int DeleteDB(int DBID) throws org.apache.thrift.TException;

    public double CompareFea(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2) throws org.apache.thrift.TException;

    public DBInfoReturn ListDBIDs() throws org.apache.thrift.TException;

    public int ReloadTempDB(java.util.List<java.lang.Integer> DBIDs) throws org.apache.thrift.TException;

    public int QueryReloadStatus(int nQueryID) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void CompareFeature(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>> resultHandler) throws org.apache.thrift.TException;

    public void Compare1vnFeature(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo> resultHandler) throws org.apache.thrift.TException;

    public void ModifyTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void DeleteTemplate(int DBID, java.lang.String feaID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void AddTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void AddTDB(FaceTemplateDB ftdb, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException;

    public void DeleteDB(int DBID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void CompareFea(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void ListDBIDs(org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn> resultHandler) throws org.apache.thrift.TException;

    public void ReloadTempDB(java.util.List<java.lang.Integer> DBIDs, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void QueryReloadStatus(int nQueryID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<CmpRetInfo> CompareFeature(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException
    {
      send_CompareFeature(fi, DBID, threshold, nMaxReturnCount);
      return recv_CompareFeature();
    }

    public void send_CompareFeature(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException
    {
      CompareFeature_args args = new CompareFeature_args();
      args.setFi(fi);
      args.setDBID(DBID);
      args.setThreshold(threshold);
      args.setNMaxReturnCount(nMaxReturnCount);
      sendBase("CompareFeature", args);
    }

    public java.util.List<CmpRetInfo> recv_CompareFeature() throws org.apache.thrift.TException
    {
      CompareFeature_result result = new CompareFeature_result();
      receiveBase(result, "CompareFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CompareFeature failed: unknown result");
    }

    public Cmp1vnRetInfo Compare1vnFeature(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException
    {
      send_Compare1vnFeature(feature, nDB_ID, threshold, nMaxReturnCount);
      return recv_Compare1vnFeature();
    }

    public void send_Compare1vnFeature(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount) throws org.apache.thrift.TException
    {
      Compare1vnFeature_args args = new Compare1vnFeature_args();
      args.setFeature(feature);
      args.setNDB_ID(nDB_ID);
      args.setThreshold(threshold);
      args.setNMaxReturnCount(nMaxReturnCount);
      sendBase("Compare1vnFeature", args);
    }

    public Cmp1vnRetInfo recv_Compare1vnFeature() throws org.apache.thrift.TException
    {
      Compare1vnFeature_result result = new Compare1vnFeature_result();
      receiveBase(result, "Compare1vnFeature");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Compare1vnFeature failed: unknown result");
    }

    public int ModifyTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException
    {
      send_ModifyTemplate(DBID, feaID, feature);
      return recv_ModifyTemplate();
    }

    public void send_ModifyTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException
    {
      ModifyTemplate_args args = new ModifyTemplate_args();
      args.setDBID(DBID);
      args.setFeaID(feaID);
      args.setFeature(feature);
      sendBase("ModifyTemplate", args);
    }

    public int recv_ModifyTemplate() throws org.apache.thrift.TException
    {
      ModifyTemplate_result result = new ModifyTemplate_result();
      receiveBase(result, "ModifyTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ModifyTemplate failed: unknown result");
    }

    public int DeleteTemplate(int DBID, java.lang.String feaID) throws org.apache.thrift.TException
    {
      send_DeleteTemplate(DBID, feaID);
      return recv_DeleteTemplate();
    }

    public void send_DeleteTemplate(int DBID, java.lang.String feaID) throws org.apache.thrift.TException
    {
      DeleteTemplate_args args = new DeleteTemplate_args();
      args.setDBID(DBID);
      args.setFeaID(feaID);
      sendBase("DeleteTemplate", args);
    }

    public int recv_DeleteTemplate() throws org.apache.thrift.TException
    {
      DeleteTemplate_result result = new DeleteTemplate_result();
      receiveBase(result, "DeleteTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DeleteTemplate failed: unknown result");
    }

    public int AddTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException
    {
      send_AddTemplate(DBID, feaID, feature);
      return recv_AddTemplate();
    }

    public void send_AddTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature) throws org.apache.thrift.TException
    {
      AddTemplate_args args = new AddTemplate_args();
      args.setDBID(DBID);
      args.setFeaID(feaID);
      args.setFeature(feature);
      sendBase("AddTemplate", args);
    }

    public int recv_AddTemplate() throws org.apache.thrift.TException
    {
      AddTemplate_result result = new AddTemplate_result();
      receiveBase(result, "AddTemplate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddTemplate failed: unknown result");
    }

    public Result AddTDB(FaceTemplateDB ftdb) throws org.apache.thrift.TException
    {
      send_AddTDB(ftdb);
      return recv_AddTDB();
    }

    public void send_AddTDB(FaceTemplateDB ftdb) throws org.apache.thrift.TException
    {
      AddTDB_args args = new AddTDB_args();
      args.setFtdb(ftdb);
      sendBase("AddTDB", args);
    }

    public Result recv_AddTDB() throws org.apache.thrift.TException
    {
      AddTDB_result result = new AddTDB_result();
      receiveBase(result, "AddTDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "AddTDB failed: unknown result");
    }

    public int DeleteDB(int DBID) throws org.apache.thrift.TException
    {
      send_DeleteDB(DBID);
      return recv_DeleteDB();
    }

    public void send_DeleteDB(int DBID) throws org.apache.thrift.TException
    {
      DeleteDB_args args = new DeleteDB_args();
      args.setDBID(DBID);
      sendBase("DeleteDB", args);
    }

    public int recv_DeleteDB() throws org.apache.thrift.TException
    {
      DeleteDB_result result = new DeleteDB_result();
      receiveBase(result, "DeleteDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DeleteDB failed: unknown result");
    }

    public double CompareFea(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2) throws org.apache.thrift.TException
    {
      send_CompareFea(feature1, feature2);
      return recv_CompareFea();
    }

    public void send_CompareFea(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2) throws org.apache.thrift.TException
    {
      CompareFea_args args = new CompareFea_args();
      args.setFeature1(feature1);
      args.setFeature2(feature2);
      sendBase("CompareFea", args);
    }

    public double recv_CompareFea() throws org.apache.thrift.TException
    {
      CompareFea_result result = new CompareFea_result();
      receiveBase(result, "CompareFea");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CompareFea failed: unknown result");
    }

    public DBInfoReturn ListDBIDs() throws org.apache.thrift.TException
    {
      send_ListDBIDs();
      return recv_ListDBIDs();
    }

    public void send_ListDBIDs() throws org.apache.thrift.TException
    {
      ListDBIDs_args args = new ListDBIDs_args();
      sendBase("ListDBIDs", args);
    }

    public DBInfoReturn recv_ListDBIDs() throws org.apache.thrift.TException
    {
      ListDBIDs_result result = new ListDBIDs_result();
      receiveBase(result, "ListDBIDs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ListDBIDs failed: unknown result");
    }

    public int ReloadTempDB(java.util.List<java.lang.Integer> DBIDs) throws org.apache.thrift.TException
    {
      send_ReloadTempDB(DBIDs);
      return recv_ReloadTempDB();
    }

    public void send_ReloadTempDB(java.util.List<java.lang.Integer> DBIDs) throws org.apache.thrift.TException
    {
      ReloadTempDB_args args = new ReloadTempDB_args();
      args.setDBIDs(DBIDs);
      sendBase("ReloadTempDB", args);
    }

    public int recv_ReloadTempDB() throws org.apache.thrift.TException
    {
      ReloadTempDB_result result = new ReloadTempDB_result();
      receiveBase(result, "ReloadTempDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReloadTempDB failed: unknown result");
    }

    public int QueryReloadStatus(int nQueryID) throws org.apache.thrift.TException
    {
      send_QueryReloadStatus(nQueryID);
      return recv_QueryReloadStatus();
    }

    public void send_QueryReloadStatus(int nQueryID) throws org.apache.thrift.TException
    {
      QueryReloadStatus_args args = new QueryReloadStatus_args();
      args.setNQueryID(nQueryID);
      sendBase("QueryReloadStatus", args);
    }

    public int recv_QueryReloadStatus() throws org.apache.thrift.TException
    {
      QueryReloadStatus_result result = new QueryReloadStatus_result();
      receiveBase(result, "QueryReloadStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "QueryReloadStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void CompareFeature(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CompareFeature_call method_call = new CompareFeature_call(fi, DBID, threshold, nMaxReturnCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CompareFeature_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CmpRetInfo>> {
      private java.util.List<FeatureInfo> fi;
      private java.util.List<java.lang.Integer> DBID;
      private double threshold;
      private int nMaxReturnCount;
      public CompareFeature_call(java.util.List<FeatureInfo> fi, java.util.List<java.lang.Integer> DBID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fi = fi;
        this.DBID = DBID;
        this.threshold = threshold;
        this.nMaxReturnCount = nMaxReturnCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CompareFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CompareFeature_args args = new CompareFeature_args();
        args.setFi(fi);
        args.setDBID(DBID);
        args.setThreshold(threshold);
        args.setNMaxReturnCount(nMaxReturnCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CmpRetInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CompareFeature();
      }
    }

    public void Compare1vnFeature(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Compare1vnFeature_call method_call = new Compare1vnFeature_call(feature, nDB_ID, threshold, nMaxReturnCount, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Compare1vnFeature_call extends org.apache.thrift.async.TAsyncMethodCall<Cmp1vnRetInfo> {
      private java.nio.ByteBuffer feature;
      private int nDB_ID;
      private double threshold;
      private int nMaxReturnCount;
      public Compare1vnFeature_call(java.nio.ByteBuffer feature, int nDB_ID, double threshold, int nMaxReturnCount, org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feature = feature;
        this.nDB_ID = nDB_ID;
        this.threshold = threshold;
        this.nMaxReturnCount = nMaxReturnCount;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Compare1vnFeature", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Compare1vnFeature_args args = new Compare1vnFeature_args();
        args.setFeature(feature);
        args.setNDB_ID(nDB_ID);
        args.setThreshold(threshold);
        args.setNMaxReturnCount(nMaxReturnCount);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cmp1vnRetInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Compare1vnFeature();
      }
    }

    public void ModifyTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ModifyTemplate_call method_call = new ModifyTemplate_call(DBID, feaID, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ModifyTemplate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int DBID;
      private java.lang.String feaID;
      private java.nio.ByteBuffer feature;
      public ModifyTemplate_call(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DBID = DBID;
        this.feaID = feaID;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ModifyTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ModifyTemplate_args args = new ModifyTemplate_args();
        args.setDBID(DBID);
        args.setFeaID(feaID);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ModifyTemplate();
      }
    }

    public void DeleteTemplate(int DBID, java.lang.String feaID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteTemplate_call method_call = new DeleteTemplate_call(DBID, feaID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteTemplate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int DBID;
      private java.lang.String feaID;
      public DeleteTemplate_call(int DBID, java.lang.String feaID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DBID = DBID;
        this.feaID = feaID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteTemplate_args args = new DeleteTemplate_args();
        args.setDBID(DBID);
        args.setFeaID(feaID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DeleteTemplate();
      }
    }

    public void AddTemplate(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddTemplate_call method_call = new AddTemplate_call(DBID, feaID, feature, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddTemplate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int DBID;
      private java.lang.String feaID;
      private java.nio.ByteBuffer feature;
      public AddTemplate_call(int DBID, java.lang.String feaID, java.nio.ByteBuffer feature, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DBID = DBID;
        this.feaID = feaID;
        this.feature = feature;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddTemplate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddTemplate_args args = new AddTemplate_args();
        args.setDBID(DBID);
        args.setFeaID(feaID);
        args.setFeature(feature);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddTemplate();
      }
    }

    public void AddTDB(FaceTemplateDB ftdb, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddTDB_call method_call = new AddTDB_call(ftdb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddTDB_call extends org.apache.thrift.async.TAsyncMethodCall<Result> {
      private FaceTemplateDB ftdb;
      public AddTDB_call(FaceTemplateDB ftdb, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ftdb = ftdb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddTDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddTDB_args args = new AddTDB_args();
        args.setFtdb(ftdb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_AddTDB();
      }
    }

    public void DeleteDB(int DBID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeleteDB_call method_call = new DeleteDB_call(DBID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeleteDB_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int DBID;
      public DeleteDB_call(int DBID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DBID = DBID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeleteDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeleteDB_args args = new DeleteDB_args();
        args.setDBID(DBID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DeleteDB();
      }
    }

    public void CompareFea(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CompareFea_call method_call = new CompareFea_call(feature1, feature2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CompareFea_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.nio.ByteBuffer feature1;
      private java.nio.ByteBuffer feature2;
      public CompareFea_call(java.nio.ByteBuffer feature1, java.nio.ByteBuffer feature2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.feature1 = feature1;
        this.feature2 = feature2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CompareFea", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CompareFea_args args = new CompareFea_args();
        args.setFeature1(feature1);
        args.setFeature2(feature2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CompareFea();
      }
    }

    public void ListDBIDs(org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ListDBIDs_call method_call = new ListDBIDs_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ListDBIDs_call extends org.apache.thrift.async.TAsyncMethodCall<DBInfoReturn> {
      public ListDBIDs_call(org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ListDBIDs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ListDBIDs_args args = new ListDBIDs_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DBInfoReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ListDBIDs();
      }
    }

    public void ReloadTempDB(java.util.List<java.lang.Integer> DBIDs, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReloadTempDB_call method_call = new ReloadTempDB_call(DBIDs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReloadTempDB_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.util.List<java.lang.Integer> DBIDs;
      public ReloadTempDB_call(java.util.List<java.lang.Integer> DBIDs, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.DBIDs = DBIDs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReloadTempDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReloadTempDB_args args = new ReloadTempDB_args();
        args.setDBIDs(DBIDs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReloadTempDB();
      }
    }

    public void QueryReloadStatus(int nQueryID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QueryReloadStatus_call method_call = new QueryReloadStatus_call(nQueryID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QueryReloadStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int nQueryID;
      public QueryReloadStatus_call(int nQueryID, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nQueryID = nQueryID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QueryReloadStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QueryReloadStatus_args args = new QueryReloadStatus_args();
        args.setNQueryID(nQueryID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_QueryReloadStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("CompareFeature", new CompareFeature());
      processMap.put("Compare1vnFeature", new Compare1vnFeature());
      processMap.put("ModifyTemplate", new ModifyTemplate());
      processMap.put("DeleteTemplate", new DeleteTemplate());
      processMap.put("AddTemplate", new AddTemplate());
      processMap.put("AddTDB", new AddTDB());
      processMap.put("DeleteDB", new DeleteDB());
      processMap.put("CompareFea", new CompareFea());
      processMap.put("ListDBIDs", new ListDBIDs());
      processMap.put("ReloadTempDB", new ReloadTempDB());
      processMap.put("QueryReloadStatus", new QueryReloadStatus());
      return processMap;
    }

    public static class CompareFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CompareFeature_args> {
      public CompareFeature() {
        super("CompareFeature");
      }

      public CompareFeature_args getEmptyArgsInstance() {
        return new CompareFeature_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CompareFeature_result getResult(I iface, CompareFeature_args args) throws org.apache.thrift.TException {
        CompareFeature_result result = new CompareFeature_result();
        result.success = iface.CompareFeature(args.fi, args.DBID, args.threshold, args.nMaxReturnCount);
        return result;
      }
    }

    public static class Compare1vnFeature<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Compare1vnFeature_args> {
      public Compare1vnFeature() {
        super("Compare1vnFeature");
      }

      public Compare1vnFeature_args getEmptyArgsInstance() {
        return new Compare1vnFeature_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Compare1vnFeature_result getResult(I iface, Compare1vnFeature_args args) throws org.apache.thrift.TException {
        Compare1vnFeature_result result = new Compare1vnFeature_result();
        result.success = iface.Compare1vnFeature(args.feature, args.nDB_ID, args.threshold, args.nMaxReturnCount);
        return result;
      }
    }

    public static class ModifyTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ModifyTemplate_args> {
      public ModifyTemplate() {
        super("ModifyTemplate");
      }

      public ModifyTemplate_args getEmptyArgsInstance() {
        return new ModifyTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ModifyTemplate_result getResult(I iface, ModifyTemplate_args args) throws org.apache.thrift.TException {
        ModifyTemplate_result result = new ModifyTemplate_result();
        result.success = iface.ModifyTemplate(args.DBID, args.feaID, args.feature);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class DeleteTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteTemplate_args> {
      public DeleteTemplate() {
        super("DeleteTemplate");
      }

      public DeleteTemplate_args getEmptyArgsInstance() {
        return new DeleteTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteTemplate_result getResult(I iface, DeleteTemplate_args args) throws org.apache.thrift.TException {
        DeleteTemplate_result result = new DeleteTemplate_result();
        result.success = iface.DeleteTemplate(args.DBID, args.feaID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class AddTemplate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddTemplate_args> {
      public AddTemplate() {
        super("AddTemplate");
      }

      public AddTemplate_args getEmptyArgsInstance() {
        return new AddTemplate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddTemplate_result getResult(I iface, AddTemplate_args args) throws org.apache.thrift.TException {
        AddTemplate_result result = new AddTemplate_result();
        result.success = iface.AddTemplate(args.DBID, args.feaID, args.feature);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class AddTDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddTDB_args> {
      public AddTDB() {
        super("AddTDB");
      }

      public AddTDB_args getEmptyArgsInstance() {
        return new AddTDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddTDB_result getResult(I iface, AddTDB_args args) throws org.apache.thrift.TException {
        AddTDB_result result = new AddTDB_result();
        result.success = iface.AddTDB(args.ftdb);
        return result;
      }
    }

    public static class DeleteDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeleteDB_args> {
      public DeleteDB() {
        super("DeleteDB");
      }

      public DeleteDB_args getEmptyArgsInstance() {
        return new DeleteDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeleteDB_result getResult(I iface, DeleteDB_args args) throws org.apache.thrift.TException {
        DeleteDB_result result = new DeleteDB_result();
        result.success = iface.DeleteDB(args.DBID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class CompareFea<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CompareFea_args> {
      public CompareFea() {
        super("CompareFea");
      }

      public CompareFea_args getEmptyArgsInstance() {
        return new CompareFea_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CompareFea_result getResult(I iface, CompareFea_args args) throws org.apache.thrift.TException {
        CompareFea_result result = new CompareFea_result();
        result.success = iface.CompareFea(args.feature1, args.feature2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ListDBIDs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ListDBIDs_args> {
      public ListDBIDs() {
        super("ListDBIDs");
      }

      public ListDBIDs_args getEmptyArgsInstance() {
        return new ListDBIDs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ListDBIDs_result getResult(I iface, ListDBIDs_args args) throws org.apache.thrift.TException {
        ListDBIDs_result result = new ListDBIDs_result();
        result.success = iface.ListDBIDs();
        return result;
      }
    }

    public static class ReloadTempDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReloadTempDB_args> {
      public ReloadTempDB() {
        super("ReloadTempDB");
      }

      public ReloadTempDB_args getEmptyArgsInstance() {
        return new ReloadTempDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReloadTempDB_result getResult(I iface, ReloadTempDB_args args) throws org.apache.thrift.TException {
        ReloadTempDB_result result = new ReloadTempDB_result();
        result.success = iface.ReloadTempDB(args.DBIDs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class QueryReloadStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QueryReloadStatus_args> {
      public QueryReloadStatus() {
        super("QueryReloadStatus");
      }

      public QueryReloadStatus_args getEmptyArgsInstance() {
        return new QueryReloadStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public QueryReloadStatus_result getResult(I iface, QueryReloadStatus_args args) throws org.apache.thrift.TException {
        QueryReloadStatus_result result = new QueryReloadStatus_result();
        result.success = iface.QueryReloadStatus(args.nQueryID);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("CompareFeature", new CompareFeature());
      processMap.put("Compare1vnFeature", new Compare1vnFeature());
      processMap.put("ModifyTemplate", new ModifyTemplate());
      processMap.put("DeleteTemplate", new DeleteTemplate());
      processMap.put("AddTemplate", new AddTemplate());
      processMap.put("AddTDB", new AddTDB());
      processMap.put("DeleteDB", new DeleteDB());
      processMap.put("CompareFea", new CompareFea());
      processMap.put("ListDBIDs", new ListDBIDs());
      processMap.put("ReloadTempDB", new ReloadTempDB());
      processMap.put("QueryReloadStatus", new QueryReloadStatus());
      return processMap;
    }

    public static class CompareFeature<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CompareFeature_args, java.util.List<CmpRetInfo>> {
      public CompareFeature() {
        super("CompareFeature");
      }

      public CompareFeature_args getEmptyArgsInstance() {
        return new CompareFeature_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>>() { 
          public void onComplete(java.util.List<CmpRetInfo> o) {
            CompareFeature_result result = new CompareFeature_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CompareFeature_result result = new CompareFeature_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CompareFeature_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CmpRetInfo>> resultHandler) throws org.apache.thrift.TException {
        iface.CompareFeature(args.fi, args.DBID, args.threshold, args.nMaxReturnCount,resultHandler);
      }
    }

    public static class Compare1vnFeature<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Compare1vnFeature_args, Cmp1vnRetInfo> {
      public Compare1vnFeature() {
        super("Compare1vnFeature");
      }

      public Compare1vnFeature_args getEmptyArgsInstance() {
        return new Compare1vnFeature_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo>() { 
          public void onComplete(Cmp1vnRetInfo o) {
            Compare1vnFeature_result result = new Compare1vnFeature_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Compare1vnFeature_result result = new Compare1vnFeature_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Compare1vnFeature_args args, org.apache.thrift.async.AsyncMethodCallback<Cmp1vnRetInfo> resultHandler) throws org.apache.thrift.TException {
        iface.Compare1vnFeature(args.feature, args.nDB_ID, args.threshold, args.nMaxReturnCount,resultHandler);
      }
    }

    public static class ModifyTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ModifyTemplate_args, java.lang.Integer> {
      public ModifyTemplate() {
        super("ModifyTemplate");
      }

      public ModifyTemplate_args getEmptyArgsInstance() {
        return new ModifyTemplate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            ModifyTemplate_result result = new ModifyTemplate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ModifyTemplate_result result = new ModifyTemplate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ModifyTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.ModifyTemplate(args.DBID, args.feaID, args.feature,resultHandler);
      }
    }

    public static class DeleteTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteTemplate_args, java.lang.Integer> {
      public DeleteTemplate() {
        super("DeleteTemplate");
      }

      public DeleteTemplate_args getEmptyArgsInstance() {
        return new DeleteTemplate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            DeleteTemplate_result result = new DeleteTemplate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DeleteTemplate_result result = new DeleteTemplate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.DeleteTemplate(args.DBID, args.feaID,resultHandler);
      }
    }

    public static class AddTemplate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddTemplate_args, java.lang.Integer> {
      public AddTemplate() {
        super("AddTemplate");
      }

      public AddTemplate_args getEmptyArgsInstance() {
        return new AddTemplate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            AddTemplate_result result = new AddTemplate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AddTemplate_result result = new AddTemplate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddTemplate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.AddTemplate(args.DBID, args.feaID, args.feature,resultHandler);
      }
    }

    public static class AddTDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddTDB_args, Result> {
      public AddTDB() {
        super("AddTDB");
      }

      public AddTDB_args getEmptyArgsInstance() {
        return new AddTDB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Result> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            AddTDB_result result = new AddTDB_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            AddTDB_result result = new AddTDB_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddTDB_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
        iface.AddTDB(args.ftdb,resultHandler);
      }
    }

    public static class DeleteDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeleteDB_args, java.lang.Integer> {
      public DeleteDB() {
        super("DeleteDB");
      }

      public DeleteDB_args getEmptyArgsInstance() {
        return new DeleteDB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            DeleteDB_result result = new DeleteDB_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DeleteDB_result result = new DeleteDB_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeleteDB_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.DeleteDB(args.DBID,resultHandler);
      }
    }

    public static class CompareFea<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CompareFea_args, java.lang.Double> {
      public CompareFea() {
        super("CompareFea");
      }

      public CompareFea_args getEmptyArgsInstance() {
        return new CompareFea_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            CompareFea_result result = new CompareFea_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CompareFea_result result = new CompareFea_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CompareFea_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.CompareFea(args.feature1, args.feature2,resultHandler);
      }
    }

    public static class ListDBIDs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ListDBIDs_args, DBInfoReturn> {
      public ListDBIDs() {
        super("ListDBIDs");
      }

      public ListDBIDs_args getEmptyArgsInstance() {
        return new ListDBIDs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn>() { 
          public void onComplete(DBInfoReturn o) {
            ListDBIDs_result result = new ListDBIDs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ListDBIDs_result result = new ListDBIDs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ListDBIDs_args args, org.apache.thrift.async.AsyncMethodCallback<DBInfoReturn> resultHandler) throws org.apache.thrift.TException {
        iface.ListDBIDs(resultHandler);
      }
    }

    public static class ReloadTempDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReloadTempDB_args, java.lang.Integer> {
      public ReloadTempDB() {
        super("ReloadTempDB");
      }

      public ReloadTempDB_args getEmptyArgsInstance() {
        return new ReloadTempDB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            ReloadTempDB_result result = new ReloadTempDB_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ReloadTempDB_result result = new ReloadTempDB_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReloadTempDB_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.ReloadTempDB(args.DBIDs,resultHandler);
      }
    }

    public static class QueryReloadStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QueryReloadStatus_args, java.lang.Integer> {
      public QueryReloadStatus() {
        super("QueryReloadStatus");
      }

      public QueryReloadStatus_args getEmptyArgsInstance() {
        return new QueryReloadStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            QueryReloadStatus_result result = new QueryReloadStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QueryReloadStatus_result result = new QueryReloadStatus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QueryReloadStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.QueryReloadStatus(args.nQueryID,resultHandler);
      }
    }

  }

  public static class CompareFeature_args implements org.apache.thrift.TBase<CompareFeature_args, CompareFeature_args._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFeature_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFeature_args");

    private static final org.apache.thrift.protocol.TField FI_FIELD_DESC = new org.apache.thrift.protocol.TField("fi", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField N_MAX_RETURN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nMaxReturnCount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFeature_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFeature_argsTupleSchemeFactory();

    public java.util.List<FeatureInfo> fi; // required
    public java.util.List<java.lang.Integer> DBID; // required
    public double threshold; // required
    public int nMaxReturnCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FI((short)1, "fi"),
      DBID((short)2, "DBID"),
      THRESHOLD((short)3, "threshold"),
      N_MAX_RETURN_COUNT((short)4, "nMaxReturnCount");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FI
            return FI;
          case 2: // DBID
            return DBID;
          case 3: // THRESHOLD
            return THRESHOLD;
          case 4: // N_MAX_RETURN_COUNT
            return N_MAX_RETURN_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THRESHOLD_ISSET_ID = 0;
    private static final int __NMAXRETURNCOUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FI, new org.apache.thrift.meta_data.FieldMetaData("fi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FeatureInfo.class))));
      tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.N_MAX_RETURN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nMaxReturnCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFeature_args.class, metaDataMap);
    }

    public CompareFeature_args() {
    }

    public CompareFeature_args(
      java.util.List<FeatureInfo> fi,
      java.util.List<java.lang.Integer> DBID,
      double threshold,
      int nMaxReturnCount)
    {
      this();
      this.fi = fi;
      this.DBID = DBID;
      this.threshold = threshold;
      setThresholdIsSet(true);
      this.nMaxReturnCount = nMaxReturnCount;
      setNMaxReturnCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFeature_args(CompareFeature_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFi()) {
        java.util.List<FeatureInfo> __this__fi = new java.util.ArrayList<FeatureInfo>(other.fi.size());
        for (FeatureInfo other_element : other.fi) {
          __this__fi.add(new FeatureInfo(other_element));
        }
        this.fi = __this__fi;
      }
      if (other.isSetDBID()) {
        java.util.List<java.lang.Integer> __this__DBID = new java.util.ArrayList<java.lang.Integer>(other.DBID);
        this.DBID = __this__DBID;
      }
      this.threshold = other.threshold;
      this.nMaxReturnCount = other.nMaxReturnCount;
    }

    public CompareFeature_args deepCopy() {
      return new CompareFeature_args(this);
    }

    @Override
    public void clear() {
      this.fi = null;
      this.DBID = null;
      setThresholdIsSet(false);
      this.threshold = 0.0;
      setNMaxReturnCountIsSet(false);
      this.nMaxReturnCount = 0;
    }

    public int getFiSize() {
      return (this.fi == null) ? 0 : this.fi.size();
    }

    public java.util.Iterator<FeatureInfo> getFiIterator() {
      return (this.fi == null) ? null : this.fi.iterator();
    }

    public void addToFi(FeatureInfo elem) {
      if (this.fi == null) {
        this.fi = new java.util.ArrayList<FeatureInfo>();
      }
      this.fi.add(elem);
    }

    public java.util.List<FeatureInfo> getFi() {
      return this.fi;
    }

    public CompareFeature_args setFi(java.util.List<FeatureInfo> fi) {
      this.fi = fi;
      return this;
    }

    public void unsetFi() {
      this.fi = null;
    }

    /** Returns true if field fi is set (has been assigned a value) and false otherwise */
    public boolean isSetFi() {
      return this.fi != null;
    }

    public void setFiIsSet(boolean value) {
      if (!value) {
        this.fi = null;
      }
    }

    public int getDBIDSize() {
      return (this.DBID == null) ? 0 : this.DBID.size();
    }

    public java.util.Iterator<java.lang.Integer> getDBIDIterator() {
      return (this.DBID == null) ? null : this.DBID.iterator();
    }

    public void addToDBID(int elem) {
      if (this.DBID == null) {
        this.DBID = new java.util.ArrayList<java.lang.Integer>();
      }
      this.DBID.add(elem);
    }

    public java.util.List<java.lang.Integer> getDBID() {
      return this.DBID;
    }

    public CompareFeature_args setDBID(java.util.List<java.lang.Integer> DBID) {
      this.DBID = DBID;
      return this;
    }

    public void unsetDBID() {
      this.DBID = null;
    }

    /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
    public boolean isSetDBID() {
      return this.DBID != null;
    }

    public void setDBIDIsSet(boolean value) {
      if (!value) {
        this.DBID = null;
      }
    }

    public double getThreshold() {
      return this.threshold;
    }

    public CompareFeature_args setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
      return this;
    }

    public void unsetThreshold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public int getNMaxReturnCount() {
      return this.nMaxReturnCount;
    }

    public CompareFeature_args setNMaxReturnCount(int nMaxReturnCount) {
      this.nMaxReturnCount = nMaxReturnCount;
      setNMaxReturnCountIsSet(true);
      return this;
    }

    public void unsetNMaxReturnCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID);
    }

    /** Returns true if field nMaxReturnCount is set (has been assigned a value) and false otherwise */
    public boolean isSetNMaxReturnCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID);
    }

    public void setNMaxReturnCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FI:
        if (value == null) {
          unsetFi();
        } else {
          setFi((java.util.List<FeatureInfo>)value);
        }
        break;

      case DBID:
        if (value == null) {
          unsetDBID();
        } else {
          setDBID((java.util.List<java.lang.Integer>)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((java.lang.Double)value);
        }
        break;

      case N_MAX_RETURN_COUNT:
        if (value == null) {
          unsetNMaxReturnCount();
        } else {
          setNMaxReturnCount((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FI:
        return getFi();

      case DBID:
        return getDBID();

      case THRESHOLD:
        return getThreshold();

      case N_MAX_RETURN_COUNT:
        return getNMaxReturnCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FI:
        return isSetFi();
      case DBID:
        return isSetDBID();
      case THRESHOLD:
        return isSetThreshold();
      case N_MAX_RETURN_COUNT:
        return isSetNMaxReturnCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFeature_args)
        return this.equals((CompareFeature_args)that);
      return false;
    }

    public boolean equals(CompareFeature_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fi = true && this.isSetFi();
      boolean that_present_fi = true && that.isSetFi();
      if (this_present_fi || that_present_fi) {
        if (!(this_present_fi && that_present_fi))
          return false;
        if (!this.fi.equals(that.fi))
          return false;
      }

      boolean this_present_DBID = true && this.isSetDBID();
      boolean that_present_DBID = true && that.isSetDBID();
      if (this_present_DBID || that_present_DBID) {
        if (!(this_present_DBID && that_present_DBID))
          return false;
        if (!this.DBID.equals(that.DBID))
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      boolean this_present_nMaxReturnCount = true;
      boolean that_present_nMaxReturnCount = true;
      if (this_present_nMaxReturnCount || that_present_nMaxReturnCount) {
        if (!(this_present_nMaxReturnCount && that_present_nMaxReturnCount))
          return false;
        if (this.nMaxReturnCount != that.nMaxReturnCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFi()) ? 131071 : 524287);
      if (isSetFi())
        hashCode = hashCode * 8191 + fi.hashCode();

      hashCode = hashCode * 8191 + ((isSetDBID()) ? 131071 : 524287);
      if (isSetDBID())
        hashCode = hashCode * 8191 + DBID.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(threshold);

      hashCode = hashCode * 8191 + nMaxReturnCount;

      return hashCode;
    }

    @Override
    public int compareTo(CompareFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFi()).compareTo(other.isSetFi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fi, other.fi);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNMaxReturnCount()).compareTo(other.isSetNMaxReturnCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNMaxReturnCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nMaxReturnCount, other.nMaxReturnCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFeature_args(");
      boolean first = true;

      sb.append("fi:");
      if (this.fi == null) {
        sb.append("null");
      } else {
        sb.append(this.fi);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("DBID:");
      if (this.DBID == null) {
        sb.append("null");
      } else {
        sb.append(this.DBID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nMaxReturnCount:");
      sb.append(this.nMaxReturnCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFeature_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeature_argsStandardScheme getScheme() {
        return new CompareFeature_argsStandardScheme();
      }
    }

    private static class CompareFeature_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FI
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.fi = new java.util.ArrayList<FeatureInfo>(_list32.size);
                  FeatureInfo _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new FeatureInfo();
                    _elem33.read(iprot);
                    struct.fi.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setFiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DBID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                  struct.DBID = new java.util.ArrayList<java.lang.Integer>(_list35.size);
                  int _elem36;
                  for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                  {
                    _elem36 = iprot.readI32();
                    struct.DBID.add(_elem36);
                  }
                  iprot.readListEnd();
                }
                struct.setDBIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // N_MAX_RETURN_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nMaxReturnCount = iprot.readI32();
                struct.setNMaxReturnCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fi != null) {
          oprot.writeFieldBegin(FI_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fi.size()));
            for (FeatureInfo _iter38 : struct.fi)
            {
              _iter38.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.DBID != null) {
          oprot.writeFieldBegin(DBID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.DBID.size()));
            for (int _iter39 : struct.DBID)
            {
              oprot.writeI32(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(N_MAX_RETURN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.nMaxReturnCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFeature_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeature_argsTupleScheme getScheme() {
        return new CompareFeature_argsTupleScheme();
      }
    }

    private static class CompareFeature_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFi()) {
          optionals.set(0);
        }
        if (struct.isSetDBID()) {
          optionals.set(1);
        }
        if (struct.isSetThreshold()) {
          optionals.set(2);
        }
        if (struct.isSetNMaxReturnCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFi()) {
          {
            oprot.writeI32(struct.fi.size());
            for (FeatureInfo _iter40 : struct.fi)
            {
              _iter40.write(oprot);
            }
          }
        }
        if (struct.isSetDBID()) {
          {
            oprot.writeI32(struct.DBID.size());
            for (int _iter41 : struct.DBID)
            {
              oprot.writeI32(_iter41);
            }
          }
        }
        if (struct.isSetThreshold()) {
          oprot.writeDouble(struct.threshold);
        }
        if (struct.isSetNMaxReturnCount()) {
          oprot.writeI32(struct.nMaxReturnCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.fi = new java.util.ArrayList<FeatureInfo>(_list42.size);
            FeatureInfo _elem43;
            for (int _i44 = 0; _i44 < _list42.size; ++_i44)
            {
              _elem43 = new FeatureInfo();
              _elem43.read(iprot);
              struct.fi.add(_elem43);
            }
          }
          struct.setFiIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.DBID = new java.util.ArrayList<java.lang.Integer>(_list45.size);
            int _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = iprot.readI32();
              struct.DBID.add(_elem46);
            }
          }
          struct.setDBIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.threshold = iprot.readDouble();
          struct.setThresholdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nMaxReturnCount = iprot.readI32();
          struct.setNMaxReturnCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CompareFeature_result implements org.apache.thrift.TBase<CompareFeature_result, CompareFeature_result._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFeature_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFeature_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFeature_resultTupleSchemeFactory();

    public java.util.List<CmpRetInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CmpRetInfo.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFeature_result.class, metaDataMap);
    }

    public CompareFeature_result() {
    }

    public CompareFeature_result(
      java.util.List<CmpRetInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFeature_result(CompareFeature_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CmpRetInfo> __this__success = new java.util.ArrayList<CmpRetInfo>(other.success.size());
        for (CmpRetInfo other_element : other.success) {
          __this__success.add(new CmpRetInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public CompareFeature_result deepCopy() {
      return new CompareFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CmpRetInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CmpRetInfo elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CmpRetInfo>();
      }
      this.success.add(elem);
    }

    public java.util.List<CmpRetInfo> getSuccess() {
      return this.success;
    }

    public CompareFeature_result setSuccess(java.util.List<CmpRetInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CmpRetInfo>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFeature_result)
        return this.equals((CompareFeature_result)that);
      return false;
    }

    public boolean equals(CompareFeature_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CompareFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFeature_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeature_resultStandardScheme getScheme() {
        return new CompareFeature_resultStandardScheme();
      }
    }

    private static class CompareFeature_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CmpRetInfo>(_list48.size);
                  CmpRetInfo _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new CmpRetInfo();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CmpRetInfo _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFeature_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeature_resultTupleScheme getScheme() {
        return new CompareFeature_resultTupleScheme();
      }
    }

    private static class CompareFeature_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CmpRetInfo _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CmpRetInfo>(_list53.size);
            CmpRetInfo _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new CmpRetInfo();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Compare1vnFeature_args implements org.apache.thrift.TBase<Compare1vnFeature_args, Compare1vnFeature_args._Fields>, java.io.Serializable, Cloneable, Comparable<Compare1vnFeature_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Compare1vnFeature_args");

    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField N_DB__ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nDB_ID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField N_MAX_RETURN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("nMaxReturnCount", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Compare1vnFeature_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Compare1vnFeature_argsTupleSchemeFactory();

    public java.nio.ByteBuffer feature; // required
    public int nDB_ID; // required
    public double threshold; // required
    public int nMaxReturnCount; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEATURE((short)1, "feature"),
      N_DB__ID((short)2, "nDB_ID"),
      THRESHOLD((short)3, "threshold"),
      N_MAX_RETURN_COUNT((short)4, "nMaxReturnCount");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEATURE
            return FEATURE;
          case 2: // N_DB__ID
            return N_DB__ID;
          case 3: // THRESHOLD
            return THRESHOLD;
          case 4: // N_MAX_RETURN_COUNT
            return N_MAX_RETURN_COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NDB_ID_ISSET_ID = 0;
    private static final int __THRESHOLD_ISSET_ID = 1;
    private static final int __NMAXRETURNCOUNT_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.N_DB__ID, new org.apache.thrift.meta_data.FieldMetaData("nDB_ID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.N_MAX_RETURN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("nMaxReturnCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Compare1vnFeature_args.class, metaDataMap);
    }

    public Compare1vnFeature_args() {
    }

    public Compare1vnFeature_args(
      java.nio.ByteBuffer feature,
      int nDB_ID,
      double threshold,
      int nMaxReturnCount)
    {
      this();
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
      this.nDB_ID = nDB_ID;
      setNDB_IDIsSet(true);
      this.threshold = threshold;
      setThresholdIsSet(true);
      this.nMaxReturnCount = nMaxReturnCount;
      setNMaxReturnCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Compare1vnFeature_args(Compare1vnFeature_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFeature()) {
        this.feature = org.apache.thrift.TBaseHelper.copyBinary(other.feature);
      }
      this.nDB_ID = other.nDB_ID;
      this.threshold = other.threshold;
      this.nMaxReturnCount = other.nMaxReturnCount;
    }

    public Compare1vnFeature_args deepCopy() {
      return new Compare1vnFeature_args(this);
    }

    @Override
    public void clear() {
      this.feature = null;
      setNDB_IDIsSet(false);
      this.nDB_ID = 0;
      setThresholdIsSet(false);
      this.threshold = 0.0;
      setNMaxReturnCountIsSet(false);
      this.nMaxReturnCount = 0;
    }

    public byte[] getFeature() {
      setFeature(org.apache.thrift.TBaseHelper.rightSize(feature));
      return feature == null ? null : feature.array();
    }

    public java.nio.ByteBuffer bufferForFeature() {
      return org.apache.thrift.TBaseHelper.copyBinary(feature);
    }

    public Compare1vnFeature_args setFeature(byte[] feature) {
      this.feature = feature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature.clone());
      return this;
    }

    public Compare1vnFeature_args setFeature(java.nio.ByteBuffer feature) {
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public int getNDB_ID() {
      return this.nDB_ID;
    }

    public Compare1vnFeature_args setNDB_ID(int nDB_ID) {
      this.nDB_ID = nDB_ID;
      setNDB_IDIsSet(true);
      return this;
    }

    public void unsetNDB_ID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NDB_ID_ISSET_ID);
    }

    /** Returns true if field nDB_ID is set (has been assigned a value) and false otherwise */
    public boolean isSetNDB_ID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NDB_ID_ISSET_ID);
    }

    public void setNDB_IDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NDB_ID_ISSET_ID, value);
    }

    public double getThreshold() {
      return this.threshold;
    }

    public Compare1vnFeature_args setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
      return this;
    }

    public void unsetThreshold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public int getNMaxReturnCount() {
      return this.nMaxReturnCount;
    }

    public Compare1vnFeature_args setNMaxReturnCount(int nMaxReturnCount) {
      this.nMaxReturnCount = nMaxReturnCount;
      setNMaxReturnCountIsSet(true);
      return this;
    }

    public void unsetNMaxReturnCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID);
    }

    /** Returns true if field nMaxReturnCount is set (has been assigned a value) and false otherwise */
    public boolean isSetNMaxReturnCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID);
    }

    public void setNMaxReturnCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NMAXRETURNCOUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          if (value instanceof byte[]) {
            setFeature((byte[])value);
          } else {
            setFeature((java.nio.ByteBuffer)value);
          }
        }
        break;

      case N_DB__ID:
        if (value == null) {
          unsetNDB_ID();
        } else {
          setNDB_ID((java.lang.Integer)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((java.lang.Double)value);
        }
        break;

      case N_MAX_RETURN_COUNT:
        if (value == null) {
          unsetNMaxReturnCount();
        } else {
          setNMaxReturnCount((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FEATURE:
        return getFeature();

      case N_DB__ID:
        return getNDB_ID();

      case THRESHOLD:
        return getThreshold();

      case N_MAX_RETURN_COUNT:
        return getNMaxReturnCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FEATURE:
        return isSetFeature();
      case N_DB__ID:
        return isSetNDB_ID();
      case THRESHOLD:
        return isSetThreshold();
      case N_MAX_RETURN_COUNT:
        return isSetNMaxReturnCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Compare1vnFeature_args)
        return this.equals((Compare1vnFeature_args)that);
      return false;
    }

    public boolean equals(Compare1vnFeature_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      boolean this_present_nDB_ID = true;
      boolean that_present_nDB_ID = true;
      if (this_present_nDB_ID || that_present_nDB_ID) {
        if (!(this_present_nDB_ID && that_present_nDB_ID))
          return false;
        if (this.nDB_ID != that.nDB_ID)
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      boolean this_present_nMaxReturnCount = true;
      boolean that_present_nMaxReturnCount = true;
      if (this_present_nMaxReturnCount || that_present_nMaxReturnCount) {
        if (!(this_present_nMaxReturnCount && that_present_nMaxReturnCount))
          return false;
        if (this.nMaxReturnCount != that.nMaxReturnCount)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      hashCode = hashCode * 8191 + nDB_ID;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(threshold);

      hashCode = hashCode * 8191 + nMaxReturnCount;

      return hashCode;
    }

    @Override
    public int compareTo(Compare1vnFeature_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNDB_ID()).compareTo(other.isSetNDB_ID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNDB_ID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nDB_ID, other.nDB_ID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNMaxReturnCount()).compareTo(other.isSetNMaxReturnCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNMaxReturnCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nMaxReturnCount, other.nMaxReturnCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Compare1vnFeature_args(");
      boolean first = true;

      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nDB_ID:");
      sb.append(this.nDB_ID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nMaxReturnCount:");
      sb.append(this.nMaxReturnCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Compare1vnFeature_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Compare1vnFeature_argsStandardScheme getScheme() {
        return new Compare1vnFeature_argsStandardScheme();
      }
    }

    private static class Compare1vnFeature_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Compare1vnFeature_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Compare1vnFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readBinary();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // N_DB__ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nDB_ID = iprot.readI32();
                struct.setNDB_IDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // N_MAX_RETURN_COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nMaxReturnCount = iprot.readI32();
                struct.setNMaxReturnCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Compare1vnFeature_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeBinary(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(N_DB__ID_FIELD_DESC);
        oprot.writeI32(struct.nDB_ID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(N_MAX_RETURN_COUNT_FIELD_DESC);
        oprot.writeI32(struct.nMaxReturnCount);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Compare1vnFeature_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Compare1vnFeature_argsTupleScheme getScheme() {
        return new Compare1vnFeature_argsTupleScheme();
      }
    }

    private static class Compare1vnFeature_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Compare1vnFeature_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Compare1vnFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFeature()) {
          optionals.set(0);
        }
        if (struct.isSetNDB_ID()) {
          optionals.set(1);
        }
        if (struct.isSetThreshold()) {
          optionals.set(2);
        }
        if (struct.isSetNMaxReturnCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFeature()) {
          oprot.writeBinary(struct.feature);
        }
        if (struct.isSetNDB_ID()) {
          oprot.writeI32(struct.nDB_ID);
        }
        if (struct.isSetThreshold()) {
          oprot.writeDouble(struct.threshold);
        }
        if (struct.isSetNMaxReturnCount()) {
          oprot.writeI32(struct.nMaxReturnCount);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Compare1vnFeature_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.feature = iprot.readBinary();
          struct.setFeatureIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nDB_ID = iprot.readI32();
          struct.setNDB_IDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.threshold = iprot.readDouble();
          struct.setThresholdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.nMaxReturnCount = iprot.readI32();
          struct.setNMaxReturnCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Compare1vnFeature_result implements org.apache.thrift.TBase<Compare1vnFeature_result, Compare1vnFeature_result._Fields>, java.io.Serializable, Cloneable, Comparable<Compare1vnFeature_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Compare1vnFeature_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Compare1vnFeature_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Compare1vnFeature_resultTupleSchemeFactory();

    public Cmp1vnRetInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cmp1vnRetInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Compare1vnFeature_result.class, metaDataMap);
    }

    public Compare1vnFeature_result() {
    }

    public Compare1vnFeature_result(
      Cmp1vnRetInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Compare1vnFeature_result(Compare1vnFeature_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cmp1vnRetInfo(other.success);
      }
    }

    public Compare1vnFeature_result deepCopy() {
      return new Compare1vnFeature_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Cmp1vnRetInfo getSuccess() {
      return this.success;
    }

    public Compare1vnFeature_result setSuccess(Cmp1vnRetInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cmp1vnRetInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Compare1vnFeature_result)
        return this.equals((Compare1vnFeature_result)that);
      return false;
    }

    public boolean equals(Compare1vnFeature_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Compare1vnFeature_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Compare1vnFeature_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Compare1vnFeature_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Compare1vnFeature_resultStandardScheme getScheme() {
        return new Compare1vnFeature_resultStandardScheme();
      }
    }

    private static class Compare1vnFeature_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Compare1vnFeature_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Compare1vnFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cmp1vnRetInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Compare1vnFeature_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Compare1vnFeature_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Compare1vnFeature_resultTupleScheme getScheme() {
        return new Compare1vnFeature_resultTupleScheme();
      }
    }

    private static class Compare1vnFeature_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Compare1vnFeature_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Compare1vnFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Compare1vnFeature_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Cmp1vnRetInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ModifyTemplate_args implements org.apache.thrift.TBase<ModifyTemplate_args, ModifyTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyTemplate_args");

    private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feaID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModifyTemplate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModifyTemplate_argsTupleSchemeFactory();

    public int DBID; // required
    public java.lang.String feaID; // required
    public java.nio.ByteBuffer feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBID((short)1, "DBID"),
      FEA_ID((short)2, "feaID"),
      FEATURE((short)3, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBID
            return DBID;
          case 2: // FEA_ID
            return FEA_ID;
          case 3: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FEA_ID, new org.apache.thrift.meta_data.FieldMetaData("feaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyTemplate_args.class, metaDataMap);
    }

    public ModifyTemplate_args() {
    }

    public ModifyTemplate_args(
      int DBID,
      java.lang.String feaID,
      java.nio.ByteBuffer feature)
    {
      this();
      this.DBID = DBID;
      setDBIDIsSet(true);
      this.feaID = feaID;
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyTemplate_args(ModifyTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.DBID = other.DBID;
      if (other.isSetFeaID()) {
        this.feaID = other.feaID;
      }
      if (other.isSetFeature()) {
        this.feature = org.apache.thrift.TBaseHelper.copyBinary(other.feature);
      }
    }

    public ModifyTemplate_args deepCopy() {
      return new ModifyTemplate_args(this);
    }

    @Override
    public void clear() {
      setDBIDIsSet(false);
      this.DBID = 0;
      this.feaID = null;
      this.feature = null;
    }

    public int getDBID() {
      return this.DBID;
    }

    public ModifyTemplate_args setDBID(int DBID) {
      this.DBID = DBID;
      setDBIDIsSet(true);
      return this;
    }

    public void unsetDBID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
    public boolean isSetDBID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    public void setDBIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBID_ISSET_ID, value);
    }

    public java.lang.String getFeaID() {
      return this.feaID;
    }

    public ModifyTemplate_args setFeaID(java.lang.String feaID) {
      this.feaID = feaID;
      return this;
    }

    public void unsetFeaID() {
      this.feaID = null;
    }

    /** Returns true if field feaID is set (has been assigned a value) and false otherwise */
    public boolean isSetFeaID() {
      return this.feaID != null;
    }

    public void setFeaIDIsSet(boolean value) {
      if (!value) {
        this.feaID = null;
      }
    }

    public byte[] getFeature() {
      setFeature(org.apache.thrift.TBaseHelper.rightSize(feature));
      return feature == null ? null : feature.array();
    }

    public java.nio.ByteBuffer bufferForFeature() {
      return org.apache.thrift.TBaseHelper.copyBinary(feature);
    }

    public ModifyTemplate_args setFeature(byte[] feature) {
      this.feature = feature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature.clone());
      return this;
    }

    public ModifyTemplate_args setFeature(java.nio.ByteBuffer feature) {
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DBID:
        if (value == null) {
          unsetDBID();
        } else {
          setDBID((java.lang.Integer)value);
        }
        break;

      case FEA_ID:
        if (value == null) {
          unsetFeaID();
        } else {
          setFeaID((java.lang.String)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          if (value instanceof byte[]) {
            setFeature((byte[])value);
          } else {
            setFeature((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DBID:
        return getDBID();

      case FEA_ID:
        return getFeaID();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DBID:
        return isSetDBID();
      case FEA_ID:
        return isSetFeaID();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyTemplate_args)
        return this.equals((ModifyTemplate_args)that);
      return false;
    }

    public boolean equals(ModifyTemplate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DBID = true;
      boolean that_present_DBID = true;
      if (this_present_DBID || that_present_DBID) {
        if (!(this_present_DBID && that_present_DBID))
          return false;
        if (this.DBID != that.DBID)
          return false;
      }

      boolean this_present_feaID = true && this.isSetFeaID();
      boolean that_present_feaID = true && that.isSetFeaID();
      if (this_present_feaID || that_present_feaID) {
        if (!(this_present_feaID && that_present_feaID))
          return false;
        if (!this.feaID.equals(that.feaID))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + DBID;

      hashCode = hashCode * 8191 + ((isSetFeaID()) ? 131071 : 524287);
      if (isSetFeaID())
        hashCode = hashCode * 8191 + feaID.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ModifyTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeaID()).compareTo(other.isSetFeaID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeaID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feaID, other.feaID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ModifyTemplate_args(");
      boolean first = true;

      sb.append("DBID:");
      sb.append(this.DBID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("feaID:");
      if (this.feaID == null) {
        sb.append("null");
      } else {
        sb.append(this.feaID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyTemplate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyTemplate_argsStandardScheme getScheme() {
        return new ModifyTemplate_argsStandardScheme();
      }
    }

    private static class ModifyTemplate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModifyTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.DBID = iprot.readI32();
                struct.setDBIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feaID = iprot.readString();
                struct.setFeaIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readBinary();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DBID_FIELD_DESC);
        oprot.writeI32(struct.DBID);
        oprot.writeFieldEnd();
        if (struct.feaID != null) {
          oprot.writeFieldBegin(FEA_ID_FIELD_DESC);
          oprot.writeString(struct.feaID);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeBinary(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyTemplate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyTemplate_argsTupleScheme getScheme() {
        return new ModifyTemplate_argsTupleScheme();
      }
    }

    private static class ModifyTemplate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModifyTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDBID()) {
          optionals.set(0);
        }
        if (struct.isSetFeaID()) {
          optionals.set(1);
        }
        if (struct.isSetFeature()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDBID()) {
          oprot.writeI32(struct.DBID);
        }
        if (struct.isSetFeaID()) {
          oprot.writeString(struct.feaID);
        }
        if (struct.isSetFeature()) {
          oprot.writeBinary(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.DBID = iprot.readI32();
          struct.setDBIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feaID = iprot.readString();
          struct.setFeaIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.feature = iprot.readBinary();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ModifyTemplate_result implements org.apache.thrift.TBase<ModifyTemplate_result, ModifyTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<ModifyTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModifyTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ModifyTemplate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ModifyTemplate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModifyTemplate_result.class, metaDataMap);
    }

    public ModifyTemplate_result() {
    }

    public ModifyTemplate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ModifyTemplate_result(ModifyTemplate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ModifyTemplate_result deepCopy() {
      return new ModifyTemplate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ModifyTemplate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ModifyTemplate_result)
        return this.equals((ModifyTemplate_result)that);
      return false;
    }

    public boolean equals(ModifyTemplate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(ModifyTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ModifyTemplate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ModifyTemplate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyTemplate_resultStandardScheme getScheme() {
        return new ModifyTemplate_resultStandardScheme();
      }
    }

    private static class ModifyTemplate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ModifyTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ModifyTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ModifyTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ModifyTemplate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ModifyTemplate_resultTupleScheme getScheme() {
        return new ModifyTemplate_resultTupleScheme();
      }
    }

    private static class ModifyTemplate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ModifyTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ModifyTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ModifyTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DeleteTemplate_args implements org.apache.thrift.TBase<DeleteTemplate_args, DeleteTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteTemplate_args");

    private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feaID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeleteTemplate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeleteTemplate_argsTupleSchemeFactory();

    public int DBID; // required
    public java.lang.String feaID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBID((short)1, "DBID"),
      FEA_ID((short)2, "feaID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBID
            return DBID;
          case 2: // FEA_ID
            return FEA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FEA_ID, new org.apache.thrift.meta_data.FieldMetaData("feaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteTemplate_args.class, metaDataMap);
    }

    public DeleteTemplate_args() {
    }

    public DeleteTemplate_args(
      int DBID,
      java.lang.String feaID)
    {
      this();
      this.DBID = DBID;
      setDBIDIsSet(true);
      this.feaID = feaID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteTemplate_args(DeleteTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.DBID = other.DBID;
      if (other.isSetFeaID()) {
        this.feaID = other.feaID;
      }
    }

    public DeleteTemplate_args deepCopy() {
      return new DeleteTemplate_args(this);
    }

    @Override
    public void clear() {
      setDBIDIsSet(false);
      this.DBID = 0;
      this.feaID = null;
    }

    public int getDBID() {
      return this.DBID;
    }

    public DeleteTemplate_args setDBID(int DBID) {
      this.DBID = DBID;
      setDBIDIsSet(true);
      return this;
    }

    public void unsetDBID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
    public boolean isSetDBID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    public void setDBIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBID_ISSET_ID, value);
    }

    public java.lang.String getFeaID() {
      return this.feaID;
    }

    public DeleteTemplate_args setFeaID(java.lang.String feaID) {
      this.feaID = feaID;
      return this;
    }

    public void unsetFeaID() {
      this.feaID = null;
    }

    /** Returns true if field feaID is set (has been assigned a value) and false otherwise */
    public boolean isSetFeaID() {
      return this.feaID != null;
    }

    public void setFeaIDIsSet(boolean value) {
      if (!value) {
        this.feaID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DBID:
        if (value == null) {
          unsetDBID();
        } else {
          setDBID((java.lang.Integer)value);
        }
        break;

      case FEA_ID:
        if (value == null) {
          unsetFeaID();
        } else {
          setFeaID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DBID:
        return getDBID();

      case FEA_ID:
        return getFeaID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DBID:
        return isSetDBID();
      case FEA_ID:
        return isSetFeaID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteTemplate_args)
        return this.equals((DeleteTemplate_args)that);
      return false;
    }

    public boolean equals(DeleteTemplate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DBID = true;
      boolean that_present_DBID = true;
      if (this_present_DBID || that_present_DBID) {
        if (!(this_present_DBID && that_present_DBID))
          return false;
        if (this.DBID != that.DBID)
          return false;
      }

      boolean this_present_feaID = true && this.isSetFeaID();
      boolean that_present_feaID = true && that.isSetFeaID();
      if (this_present_feaID || that_present_feaID) {
        if (!(this_present_feaID && that_present_feaID))
          return false;
        if (!this.feaID.equals(that.feaID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + DBID;

      hashCode = hashCode * 8191 + ((isSetFeaID()) ? 131071 : 524287);
      if (isSetFeaID())
        hashCode = hashCode * 8191 + feaID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DeleteTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeaID()).compareTo(other.isSetFeaID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeaID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feaID, other.feaID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DeleteTemplate_args(");
      boolean first = true;

      sb.append("DBID:");
      sb.append(this.DBID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("feaID:");
      if (this.feaID == null) {
        sb.append("null");
      } else {
        sb.append(this.feaID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteTemplate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteTemplate_argsStandardScheme getScheme() {
        return new DeleteTemplate_argsStandardScheme();
      }
    }

    private static class DeleteTemplate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeleteTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.DBID = iprot.readI32();
                struct.setDBIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feaID = iprot.readString();
                struct.setFeaIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DBID_FIELD_DESC);
        oprot.writeI32(struct.DBID);
        oprot.writeFieldEnd();
        if (struct.feaID != null) {
          oprot.writeFieldBegin(FEA_ID_FIELD_DESC);
          oprot.writeString(struct.feaID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteTemplate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteTemplate_argsTupleScheme getScheme() {
        return new DeleteTemplate_argsTupleScheme();
      }
    }

    private static class DeleteTemplate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeleteTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDBID()) {
          optionals.set(0);
        }
        if (struct.isSetFeaID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDBID()) {
          oprot.writeI32(struct.DBID);
        }
        if (struct.isSetFeaID()) {
          oprot.writeString(struct.feaID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.DBID = iprot.readI32();
          struct.setDBIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feaID = iprot.readString();
          struct.setFeaIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DeleteTemplate_result implements org.apache.thrift.TBase<DeleteTemplate_result, DeleteTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeleteTemplate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeleteTemplate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteTemplate_result.class, metaDataMap);
    }

    public DeleteTemplate_result() {
    }

    public DeleteTemplate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteTemplate_result(DeleteTemplate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DeleteTemplate_result deepCopy() {
      return new DeleteTemplate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DeleteTemplate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteTemplate_result)
        return this.equals((DeleteTemplate_result)that);
      return false;
    }

    public boolean equals(DeleteTemplate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(DeleteTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DeleteTemplate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteTemplate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteTemplate_resultStandardScheme getScheme() {
        return new DeleteTemplate_resultStandardScheme();
      }
    }

    private static class DeleteTemplate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeleteTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteTemplate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteTemplate_resultTupleScheme getScheme() {
        return new DeleteTemplate_resultTupleScheme();
      }
    }

    private static class DeleteTemplate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeleteTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AddTemplate_args implements org.apache.thrift.TBase<AddTemplate_args, AddTemplate_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddTemplate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddTemplate_args");

    private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FEA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("feaID", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddTemplate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddTemplate_argsTupleSchemeFactory();

    public int DBID; // required
    public java.lang.String feaID; // required
    public java.nio.ByteBuffer feature; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBID((short)1, "DBID"),
      FEA_ID((short)2, "feaID"),
      FEATURE((short)3, "feature");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBID
            return DBID;
          case 2: // FEA_ID
            return FEA_ID;
          case 3: // FEATURE
            return FEATURE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FEA_ID, new org.apache.thrift.meta_data.FieldMetaData("feaID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddTemplate_args.class, metaDataMap);
    }

    public AddTemplate_args() {
    }

    public AddTemplate_args(
      int DBID,
      java.lang.String feaID,
      java.nio.ByteBuffer feature)
    {
      this();
      this.DBID = DBID;
      setDBIDIsSet(true);
      this.feaID = feaID;
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddTemplate_args(AddTemplate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.DBID = other.DBID;
      if (other.isSetFeaID()) {
        this.feaID = other.feaID;
      }
      if (other.isSetFeature()) {
        this.feature = org.apache.thrift.TBaseHelper.copyBinary(other.feature);
      }
    }

    public AddTemplate_args deepCopy() {
      return new AddTemplate_args(this);
    }

    @Override
    public void clear() {
      setDBIDIsSet(false);
      this.DBID = 0;
      this.feaID = null;
      this.feature = null;
    }

    public int getDBID() {
      return this.DBID;
    }

    public AddTemplate_args setDBID(int DBID) {
      this.DBID = DBID;
      setDBIDIsSet(true);
      return this;
    }

    public void unsetDBID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
    public boolean isSetDBID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    public void setDBIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBID_ISSET_ID, value);
    }

    public java.lang.String getFeaID() {
      return this.feaID;
    }

    public AddTemplate_args setFeaID(java.lang.String feaID) {
      this.feaID = feaID;
      return this;
    }

    public void unsetFeaID() {
      this.feaID = null;
    }

    /** Returns true if field feaID is set (has been assigned a value) and false otherwise */
    public boolean isSetFeaID() {
      return this.feaID != null;
    }

    public void setFeaIDIsSet(boolean value) {
      if (!value) {
        this.feaID = null;
      }
    }

    public byte[] getFeature() {
      setFeature(org.apache.thrift.TBaseHelper.rightSize(feature));
      return feature == null ? null : feature.array();
    }

    public java.nio.ByteBuffer bufferForFeature() {
      return org.apache.thrift.TBaseHelper.copyBinary(feature);
    }

    public AddTemplate_args setFeature(byte[] feature) {
      this.feature = feature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature.clone());
      return this;
    }

    public AddTemplate_args setFeature(java.nio.ByteBuffer feature) {
      this.feature = org.apache.thrift.TBaseHelper.copyBinary(feature);
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DBID:
        if (value == null) {
          unsetDBID();
        } else {
          setDBID((java.lang.Integer)value);
        }
        break;

      case FEA_ID:
        if (value == null) {
          unsetFeaID();
        } else {
          setFeaID((java.lang.String)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          if (value instanceof byte[]) {
            setFeature((byte[])value);
          } else {
            setFeature((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DBID:
        return getDBID();

      case FEA_ID:
        return getFeaID();

      case FEATURE:
        return getFeature();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DBID:
        return isSetDBID();
      case FEA_ID:
        return isSetFeaID();
      case FEATURE:
        return isSetFeature();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddTemplate_args)
        return this.equals((AddTemplate_args)that);
      return false;
    }

    public boolean equals(AddTemplate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DBID = true;
      boolean that_present_DBID = true;
      if (this_present_DBID || that_present_DBID) {
        if (!(this_present_DBID && that_present_DBID))
          return false;
        if (this.DBID != that.DBID)
          return false;
      }

      boolean this_present_feaID = true && this.isSetFeaID();
      boolean that_present_feaID = true && that.isSetFeaID();
      if (this_present_feaID || that_present_feaID) {
        if (!(this_present_feaID && that_present_feaID))
          return false;
        if (!this.feaID.equals(that.feaID))
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + DBID;

      hashCode = hashCode * 8191 + ((isSetFeaID()) ? 131071 : 524287);
      if (isSetFeaID())
        hashCode = hashCode * 8191 + feaID.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AddTemplate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeaID()).compareTo(other.isSetFeaID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeaID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feaID, other.feaID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddTemplate_args(");
      boolean first = true;

      sb.append("DBID:");
      sb.append(this.DBID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("feaID:");
      if (this.feaID == null) {
        sb.append("null");
      } else {
        sb.append(this.feaID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddTemplate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTemplate_argsStandardScheme getScheme() {
        return new AddTemplate_argsStandardScheme();
      }
    }

    private static class AddTemplate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddTemplate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.DBID = iprot.readI32();
                struct.setDBIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feaID = iprot.readString();
                struct.setFeaIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature = iprot.readBinary();
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddTemplate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DBID_FIELD_DESC);
        oprot.writeI32(struct.DBID);
        oprot.writeFieldEnd();
        if (struct.feaID != null) {
          oprot.writeFieldBegin(FEA_ID_FIELD_DESC);
          oprot.writeString(struct.feaID);
          oprot.writeFieldEnd();
        }
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          oprot.writeBinary(struct.feature);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddTemplate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTemplate_argsTupleScheme getScheme() {
        return new AddTemplate_argsTupleScheme();
      }
    }

    private static class AddTemplate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddTemplate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDBID()) {
          optionals.set(0);
        }
        if (struct.isSetFeaID()) {
          optionals.set(1);
        }
        if (struct.isSetFeature()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDBID()) {
          oprot.writeI32(struct.DBID);
        }
        if (struct.isSetFeaID()) {
          oprot.writeString(struct.feaID);
        }
        if (struct.isSetFeature()) {
          oprot.writeBinary(struct.feature);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddTemplate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.DBID = iprot.readI32();
          struct.setDBIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.feaID = iprot.readString();
          struct.setFeaIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.feature = iprot.readBinary();
          struct.setFeatureIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AddTemplate_result implements org.apache.thrift.TBase<AddTemplate_result, AddTemplate_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddTemplate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddTemplate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddTemplate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddTemplate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddTemplate_result.class, metaDataMap);
    }

    public AddTemplate_result() {
    }

    public AddTemplate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddTemplate_result(AddTemplate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public AddTemplate_result deepCopy() {
      return new AddTemplate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public AddTemplate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddTemplate_result)
        return this.equals((AddTemplate_result)that);
      return false;
    }

    public boolean equals(AddTemplate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(AddTemplate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddTemplate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddTemplate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTemplate_resultStandardScheme getScheme() {
        return new AddTemplate_resultStandardScheme();
      }
    }

    private static class AddTemplate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddTemplate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddTemplate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddTemplate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTemplate_resultTupleScheme getScheme() {
        return new AddTemplate_resultTupleScheme();
      }
    }

    private static class AddTemplate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddTemplate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddTemplate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AddTDB_args implements org.apache.thrift.TBase<AddTDB_args, AddTDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddTDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddTDB_args");

    private static final org.apache.thrift.protocol.TField FTDB_FIELD_DESC = new org.apache.thrift.protocol.TField("ftdb", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddTDB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddTDB_argsTupleSchemeFactory();

    public FaceTemplateDB ftdb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FTDB((short)1, "ftdb");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FTDB
            return FTDB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FTDB, new org.apache.thrift.meta_data.FieldMetaData("ftdb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FaceTemplateDB.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddTDB_args.class, metaDataMap);
    }

    public AddTDB_args() {
    }

    public AddTDB_args(
      FaceTemplateDB ftdb)
    {
      this();
      this.ftdb = ftdb;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddTDB_args(AddTDB_args other) {
      if (other.isSetFtdb()) {
        this.ftdb = new FaceTemplateDB(other.ftdb);
      }
    }

    public AddTDB_args deepCopy() {
      return new AddTDB_args(this);
    }

    @Override
    public void clear() {
      this.ftdb = null;
    }

    public FaceTemplateDB getFtdb() {
      return this.ftdb;
    }

    public AddTDB_args setFtdb(FaceTemplateDB ftdb) {
      this.ftdb = ftdb;
      return this;
    }

    public void unsetFtdb() {
      this.ftdb = null;
    }

    /** Returns true if field ftdb is set (has been assigned a value) and false otherwise */
    public boolean isSetFtdb() {
      return this.ftdb != null;
    }

    public void setFtdbIsSet(boolean value) {
      if (!value) {
        this.ftdb = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FTDB:
        if (value == null) {
          unsetFtdb();
        } else {
          setFtdb((FaceTemplateDB)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FTDB:
        return getFtdb();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FTDB:
        return isSetFtdb();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddTDB_args)
        return this.equals((AddTDB_args)that);
      return false;
    }

    public boolean equals(AddTDB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ftdb = true && this.isSetFtdb();
      boolean that_present_ftdb = true && that.isSetFtdb();
      if (this_present_ftdb || that_present_ftdb) {
        if (!(this_present_ftdb && that_present_ftdb))
          return false;
        if (!this.ftdb.equals(that.ftdb))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFtdb()) ? 131071 : 524287);
      if (isSetFtdb())
        hashCode = hashCode * 8191 + ftdb.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AddTDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFtdb()).compareTo(other.isSetFtdb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFtdb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftdb, other.ftdb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddTDB_args(");
      boolean first = true;

      sb.append("ftdb:");
      if (this.ftdb == null) {
        sb.append("null");
      } else {
        sb.append(this.ftdb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (ftdb != null) {
        ftdb.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddTDB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTDB_argsStandardScheme getScheme() {
        return new AddTDB_argsStandardScheme();
      }
    }

    private static class AddTDB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddTDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddTDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FTDB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ftdb = new FaceTemplateDB();
                struct.ftdb.read(iprot);
                struct.setFtdbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddTDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ftdb != null) {
          oprot.writeFieldBegin(FTDB_FIELD_DESC);
          struct.ftdb.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddTDB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTDB_argsTupleScheme getScheme() {
        return new AddTDB_argsTupleScheme();
      }
    }

    private static class AddTDB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddTDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddTDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFtdb()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFtdb()) {
          struct.ftdb.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddTDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ftdb = new FaceTemplateDB();
          struct.ftdb.read(iprot);
          struct.setFtdbIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class AddTDB_result implements org.apache.thrift.TBase<AddTDB_result, AddTDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddTDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddTDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AddTDB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AddTDB_resultTupleSchemeFactory();

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddTDB_result.class, metaDataMap);
    }

    public AddTDB_result() {
    }

    public AddTDB_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddTDB_result(AddTDB_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public AddTDB_result deepCopy() {
      return new AddTDB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public AddTDB_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof AddTDB_result)
        return this.equals((AddTDB_result)that);
      return false;
    }

    public boolean equals(AddTDB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(AddTDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("AddTDB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddTDB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTDB_resultStandardScheme getScheme() {
        return new AddTDB_resultStandardScheme();
      }
    }

    private static class AddTDB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<AddTDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddTDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddTDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddTDB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public AddTDB_resultTupleScheme getScheme() {
        return new AddTDB_resultTupleScheme();
      }
    }

    private static class AddTDB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<AddTDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddTDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddTDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DeleteDB_args implements org.apache.thrift.TBase<DeleteDB_args, DeleteDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDB_args");

    private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeleteDB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeleteDB_argsTupleSchemeFactory();

    public int DBID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBID((short)1, "DBID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBID
            return DBID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DBID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDB_args.class, metaDataMap);
    }

    public DeleteDB_args() {
    }

    public DeleteDB_args(
      int DBID)
    {
      this();
      this.DBID = DBID;
      setDBIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDB_args(DeleteDB_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.DBID = other.DBID;
    }

    public DeleteDB_args deepCopy() {
      return new DeleteDB_args(this);
    }

    @Override
    public void clear() {
      setDBIDIsSet(false);
      this.DBID = 0;
    }

    public int getDBID() {
      return this.DBID;
    }

    public DeleteDB_args setDBID(int DBID) {
      this.DBID = DBID;
      setDBIDIsSet(true);
      return this;
    }

    public void unsetDBID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
    public boolean isSetDBID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DBID_ISSET_ID);
    }

    public void setDBIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DBID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DBID:
        if (value == null) {
          unsetDBID();
        } else {
          setDBID((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DBID:
        return getDBID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DBID:
        return isSetDBID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDB_args)
        return this.equals((DeleteDB_args)that);
      return false;
    }

    public boolean equals(DeleteDB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DBID = true;
      boolean that_present_DBID = true;
      if (this_present_DBID || that_present_DBID) {
        if (!(this_present_DBID && that_present_DBID))
          return false;
        if (this.DBID != that.DBID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + DBID;

      return hashCode;
    }

    @Override
    public int compareTo(DeleteDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DeleteDB_args(");
      boolean first = true;

      sb.append("DBID:");
      sb.append(this.DBID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteDB_argsStandardScheme getScheme() {
        return new DeleteDB_argsStandardScheme();
      }
    }

    private static class DeleteDB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeleteDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.DBID = iprot.readI32();
                struct.setDBIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DBID_FIELD_DESC);
        oprot.writeI32(struct.DBID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteDB_argsTupleScheme getScheme() {
        return new DeleteDB_argsTupleScheme();
      }
    }

    private static class DeleteDB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeleteDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDBID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDBID()) {
          oprot.writeI32(struct.DBID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.DBID = iprot.readI32();
          struct.setDBIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DeleteDB_result implements org.apache.thrift.TBase<DeleteDB_result, DeleteDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeleteDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeleteDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DeleteDB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DeleteDB_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeleteDB_result.class, metaDataMap);
    }

    public DeleteDB_result() {
    }

    public DeleteDB_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeleteDB_result(DeleteDB_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public DeleteDB_result deepCopy() {
      return new DeleteDB_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public DeleteDB_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DeleteDB_result)
        return this.equals((DeleteDB_result)that);
      return false;
    }

    public boolean equals(DeleteDB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(DeleteDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DeleteDB_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeleteDB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteDB_resultStandardScheme getScheme() {
        return new DeleteDB_resultStandardScheme();
      }
    }

    private static class DeleteDB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DeleteDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeleteDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeleteDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeleteDB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DeleteDB_resultTupleScheme getScheme() {
        return new DeleteDB_resultTupleScheme();
      }
    }

    private static class DeleteDB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DeleteDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeleteDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeleteDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CompareFea_args implements org.apache.thrift.TBase<CompareFea_args, CompareFea_args._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFea_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFea_args");

    private static final org.apache.thrift.protocol.TField FEATURE1_FIELD_DESC = new org.apache.thrift.protocol.TField("feature1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEATURE2_FIELD_DESC = new org.apache.thrift.protocol.TField("feature2", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFea_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFea_argsTupleSchemeFactory();

    public java.nio.ByteBuffer feature1; // required
    public java.nio.ByteBuffer feature2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FEATURE1((short)1, "feature1"),
      FEATURE2((short)2, "feature2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FEATURE1
            return FEATURE1;
          case 2: // FEATURE2
            return FEATURE2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FEATURE1, new org.apache.thrift.meta_data.FieldMetaData("feature1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.FEATURE2, new org.apache.thrift.meta_data.FieldMetaData("feature2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFea_args.class, metaDataMap);
    }

    public CompareFea_args() {
    }

    public CompareFea_args(
      java.nio.ByteBuffer feature1,
      java.nio.ByteBuffer feature2)
    {
      this();
      this.feature1 = org.apache.thrift.TBaseHelper.copyBinary(feature1);
      this.feature2 = org.apache.thrift.TBaseHelper.copyBinary(feature2);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFea_args(CompareFea_args other) {
      if (other.isSetFeature1()) {
        this.feature1 = org.apache.thrift.TBaseHelper.copyBinary(other.feature1);
      }
      if (other.isSetFeature2()) {
        this.feature2 = org.apache.thrift.TBaseHelper.copyBinary(other.feature2);
      }
    }

    public CompareFea_args deepCopy() {
      return new CompareFea_args(this);
    }

    @Override
    public void clear() {
      this.feature1 = null;
      this.feature2 = null;
    }

    public byte[] getFeature1() {
      setFeature1(org.apache.thrift.TBaseHelper.rightSize(feature1));
      return feature1 == null ? null : feature1.array();
    }

    public java.nio.ByteBuffer bufferForFeature1() {
      return org.apache.thrift.TBaseHelper.copyBinary(feature1);
    }

    public CompareFea_args setFeature1(byte[] feature1) {
      this.feature1 = feature1 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature1.clone());
      return this;
    }

    public CompareFea_args setFeature1(java.nio.ByteBuffer feature1) {
      this.feature1 = org.apache.thrift.TBaseHelper.copyBinary(feature1);
      return this;
    }

    public void unsetFeature1() {
      this.feature1 = null;
    }

    /** Returns true if field feature1 is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature1() {
      return this.feature1 != null;
    }

    public void setFeature1IsSet(boolean value) {
      if (!value) {
        this.feature1 = null;
      }
    }

    public byte[] getFeature2() {
      setFeature2(org.apache.thrift.TBaseHelper.rightSize(feature2));
      return feature2 == null ? null : feature2.array();
    }

    public java.nio.ByteBuffer bufferForFeature2() {
      return org.apache.thrift.TBaseHelper.copyBinary(feature2);
    }

    public CompareFea_args setFeature2(byte[] feature2) {
      this.feature2 = feature2 == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(feature2.clone());
      return this;
    }

    public CompareFea_args setFeature2(java.nio.ByteBuffer feature2) {
      this.feature2 = org.apache.thrift.TBaseHelper.copyBinary(feature2);
      return this;
    }

    public void unsetFeature2() {
      this.feature2 = null;
    }

    /** Returns true if field feature2 is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature2() {
      return this.feature2 != null;
    }

    public void setFeature2IsSet(boolean value) {
      if (!value) {
        this.feature2 = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FEATURE1:
        if (value == null) {
          unsetFeature1();
        } else {
          if (value instanceof byte[]) {
            setFeature1((byte[])value);
          } else {
            setFeature1((java.nio.ByteBuffer)value);
          }
        }
        break;

      case FEATURE2:
        if (value == null) {
          unsetFeature2();
        } else {
          if (value instanceof byte[]) {
            setFeature2((byte[])value);
          } else {
            setFeature2((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FEATURE1:
        return getFeature1();

      case FEATURE2:
        return getFeature2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FEATURE1:
        return isSetFeature1();
      case FEATURE2:
        return isSetFeature2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFea_args)
        return this.equals((CompareFea_args)that);
      return false;
    }

    public boolean equals(CompareFea_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_feature1 = true && this.isSetFeature1();
      boolean that_present_feature1 = true && that.isSetFeature1();
      if (this_present_feature1 || that_present_feature1) {
        if (!(this_present_feature1 && that_present_feature1))
          return false;
        if (!this.feature1.equals(that.feature1))
          return false;
      }

      boolean this_present_feature2 = true && this.isSetFeature2();
      boolean that_present_feature2 = true && that.isSetFeature2();
      if (this_present_feature2 || that_present_feature2) {
        if (!(this_present_feature2 && that_present_feature2))
          return false;
        if (!this.feature2.equals(that.feature2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFeature1()) ? 131071 : 524287);
      if (isSetFeature1())
        hashCode = hashCode * 8191 + feature1.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeature2()) ? 131071 : 524287);
      if (isSetFeature2())
        hashCode = hashCode * 8191 + feature2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CompareFea_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFeature1()).compareTo(other.isSetFeature1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature1, other.feature1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature2()).compareTo(other.isSetFeature2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature2, other.feature2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFea_args(");
      boolean first = true;

      sb.append("feature1:");
      if (this.feature1 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature1, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature2:");
      if (this.feature2 == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature2, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFea_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFea_argsStandardScheme getScheme() {
        return new CompareFea_argsStandardScheme();
      }
    }

    private static class CompareFea_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFea_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FEATURE1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature1 = iprot.readBinary();
                struct.setFeature1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEATURE2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.feature2 = iprot.readBinary();
                struct.setFeature2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFea_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.feature1 != null) {
          oprot.writeFieldBegin(FEATURE1_FIELD_DESC);
          oprot.writeBinary(struct.feature1);
          oprot.writeFieldEnd();
        }
        if (struct.feature2 != null) {
          oprot.writeFieldBegin(FEATURE2_FIELD_DESC);
          oprot.writeBinary(struct.feature2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFea_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFea_argsTupleScheme getScheme() {
        return new CompareFea_argsTupleScheme();
      }
    }

    private static class CompareFea_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFea_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFeature1()) {
          optionals.set(0);
        }
        if (struct.isSetFeature2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFeature1()) {
          oprot.writeBinary(struct.feature1);
        }
        if (struct.isSetFeature2()) {
          oprot.writeBinary(struct.feature2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFea_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.feature1 = iprot.readBinary();
          struct.setFeature1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.feature2 = iprot.readBinary();
          struct.setFeature2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CompareFea_result implements org.apache.thrift.TBase<CompareFea_result, CompareFea_result._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFea_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFea_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFea_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFea_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFea_result.class, metaDataMap);
    }

    public CompareFea_result() {
    }

    public CompareFea_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFea_result(CompareFea_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public CompareFea_result deepCopy() {
      return new CompareFea_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public CompareFea_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFea_result)
        return this.equals((CompareFea_result)that);
      return false;
    }

    public boolean equals(CompareFea_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(CompareFea_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFea_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFea_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFea_resultStandardScheme getScheme() {
        return new CompareFea_resultStandardScheme();
      }
    }

    private static class CompareFea_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFea_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFea_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFea_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFea_resultTupleScheme getScheme() {
        return new CompareFea_resultTupleScheme();
      }
    }

    private static class CompareFea_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFea_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFea_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ListDBIDs_args implements org.apache.thrift.TBase<ListDBIDs_args, ListDBIDs_args._Fields>, java.io.Serializable, Cloneable, Comparable<ListDBIDs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListDBIDs_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ListDBIDs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ListDBIDs_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListDBIDs_args.class, metaDataMap);
    }

    public ListDBIDs_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ListDBIDs_args(ListDBIDs_args other) {
    }

    public ListDBIDs_args deepCopy() {
      return new ListDBIDs_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ListDBIDs_args)
        return this.equals((ListDBIDs_args)that);
      return false;
    }

    public boolean equals(ListDBIDs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ListDBIDs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ListDBIDs_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ListDBIDs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ListDBIDs_argsStandardScheme getScheme() {
        return new ListDBIDs_argsStandardScheme();
      }
    }

    private static class ListDBIDs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ListDBIDs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ListDBIDs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ListDBIDs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ListDBIDs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ListDBIDs_argsTupleScheme getScheme() {
        return new ListDBIDs_argsTupleScheme();
      }
    }

    private static class ListDBIDs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ListDBIDs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ListDBIDs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ListDBIDs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ListDBIDs_result implements org.apache.thrift.TBase<ListDBIDs_result, ListDBIDs_result._Fields>, java.io.Serializable, Cloneable, Comparable<ListDBIDs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListDBIDs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ListDBIDs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ListDBIDs_resultTupleSchemeFactory();

    public DBInfoReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DBInfoReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListDBIDs_result.class, metaDataMap);
    }

    public ListDBIDs_result() {
    }

    public ListDBIDs_result(
      DBInfoReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ListDBIDs_result(ListDBIDs_result other) {
      if (other.isSetSuccess()) {
        this.success = new DBInfoReturn(other.success);
      }
    }

    public ListDBIDs_result deepCopy() {
      return new ListDBIDs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DBInfoReturn getSuccess() {
      return this.success;
    }

    public ListDBIDs_result setSuccess(DBInfoReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DBInfoReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ListDBIDs_result)
        return this.equals((ListDBIDs_result)that);
      return false;
    }

    public boolean equals(ListDBIDs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ListDBIDs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ListDBIDs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ListDBIDs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ListDBIDs_resultStandardScheme getScheme() {
        return new ListDBIDs_resultStandardScheme();
      }
    }

    private static class ListDBIDs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ListDBIDs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ListDBIDs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DBInfoReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ListDBIDs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ListDBIDs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ListDBIDs_resultTupleScheme getScheme() {
        return new ListDBIDs_resultTupleScheme();
      }
    }

    private static class ListDBIDs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ListDBIDs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ListDBIDs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ListDBIDs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DBInfoReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReloadTempDB_args implements org.apache.thrift.TBase<ReloadTempDB_args, ReloadTempDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReloadTempDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReloadTempDB_args");

    private static final org.apache.thrift.protocol.TField DBIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("DBIDs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReloadTempDB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReloadTempDB_argsTupleSchemeFactory();

    public java.util.List<java.lang.Integer> DBIDs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DBIDS((short)1, "DBIDs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DBIDS
            return DBIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DBIDS, new org.apache.thrift.meta_data.FieldMetaData("DBIDs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReloadTempDB_args.class, metaDataMap);
    }

    public ReloadTempDB_args() {
    }

    public ReloadTempDB_args(
      java.util.List<java.lang.Integer> DBIDs)
    {
      this();
      this.DBIDs = DBIDs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReloadTempDB_args(ReloadTempDB_args other) {
      if (other.isSetDBIDs()) {
        java.util.List<java.lang.Integer> __this__DBIDs = new java.util.ArrayList<java.lang.Integer>(other.DBIDs);
        this.DBIDs = __this__DBIDs;
      }
    }

    public ReloadTempDB_args deepCopy() {
      return new ReloadTempDB_args(this);
    }

    @Override
    public void clear() {
      this.DBIDs = null;
    }

    public int getDBIDsSize() {
      return (this.DBIDs == null) ? 0 : this.DBIDs.size();
    }

    public java.util.Iterator<java.lang.Integer> getDBIDsIterator() {
      return (this.DBIDs == null) ? null : this.DBIDs.iterator();
    }

    public void addToDBIDs(int elem) {
      if (this.DBIDs == null) {
        this.DBIDs = new java.util.ArrayList<java.lang.Integer>();
      }
      this.DBIDs.add(elem);
    }

    public java.util.List<java.lang.Integer> getDBIDs() {
      return this.DBIDs;
    }

    public ReloadTempDB_args setDBIDs(java.util.List<java.lang.Integer> DBIDs) {
      this.DBIDs = DBIDs;
      return this;
    }

    public void unsetDBIDs() {
      this.DBIDs = null;
    }

    /** Returns true if field DBIDs is set (has been assigned a value) and false otherwise */
    public boolean isSetDBIDs() {
      return this.DBIDs != null;
    }

    public void setDBIDsIsSet(boolean value) {
      if (!value) {
        this.DBIDs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DBIDS:
        if (value == null) {
          unsetDBIDs();
        } else {
          setDBIDs((java.util.List<java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DBIDS:
        return getDBIDs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DBIDS:
        return isSetDBIDs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReloadTempDB_args)
        return this.equals((ReloadTempDB_args)that);
      return false;
    }

    public boolean equals(ReloadTempDB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_DBIDs = true && this.isSetDBIDs();
      boolean that_present_DBIDs = true && that.isSetDBIDs();
      if (this_present_DBIDs || that_present_DBIDs) {
        if (!(this_present_DBIDs && that_present_DBIDs))
          return false;
        if (!this.DBIDs.equals(that.DBIDs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDBIDs()) ? 131071 : 524287);
      if (isSetDBIDs())
        hashCode = hashCode * 8191 + DBIDs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ReloadTempDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDBIDs()).compareTo(other.isSetDBIDs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDBIDs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBIDs, other.DBIDs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReloadTempDB_args(");
      boolean first = true;

      sb.append("DBIDs:");
      if (this.DBIDs == null) {
        sb.append("null");
      } else {
        sb.append(this.DBIDs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReloadTempDB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReloadTempDB_argsStandardScheme getScheme() {
        return new ReloadTempDB_argsStandardScheme();
      }
    }

    private static class ReloadTempDB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReloadTempDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReloadTempDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DBIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.DBIDs = new java.util.ArrayList<java.lang.Integer>(_list56.size);
                  int _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = iprot.readI32();
                    struct.DBIDs.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setDBIDsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReloadTempDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.DBIDs != null) {
          oprot.writeFieldBegin(DBIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.DBIDs.size()));
            for (int _iter59 : struct.DBIDs)
            {
              oprot.writeI32(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReloadTempDB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReloadTempDB_argsTupleScheme getScheme() {
        return new ReloadTempDB_argsTupleScheme();
      }
    }

    private static class ReloadTempDB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReloadTempDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReloadTempDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDBIDs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDBIDs()) {
          {
            oprot.writeI32(struct.DBIDs.size());
            for (int _iter60 : struct.DBIDs)
            {
              oprot.writeI32(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReloadTempDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.DBIDs = new java.util.ArrayList<java.lang.Integer>(_list61.size);
            int _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = iprot.readI32();
              struct.DBIDs.add(_elem62);
            }
          }
          struct.setDBIDsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReloadTempDB_result implements org.apache.thrift.TBase<ReloadTempDB_result, ReloadTempDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReloadTempDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReloadTempDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReloadTempDB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReloadTempDB_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReloadTempDB_result.class, metaDataMap);
    }

    public ReloadTempDB_result() {
    }

    public ReloadTempDB_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReloadTempDB_result(ReloadTempDB_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ReloadTempDB_result deepCopy() {
      return new ReloadTempDB_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public ReloadTempDB_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReloadTempDB_result)
        return this.equals((ReloadTempDB_result)that);
      return false;
    }

    public boolean equals(ReloadTempDB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(ReloadTempDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReloadTempDB_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReloadTempDB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReloadTempDB_resultStandardScheme getScheme() {
        return new ReloadTempDB_resultStandardScheme();
      }
    }

    private static class ReloadTempDB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReloadTempDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReloadTempDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReloadTempDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReloadTempDB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReloadTempDB_resultTupleScheme getScheme() {
        return new ReloadTempDB_resultTupleScheme();
      }
    }

    private static class ReloadTempDB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReloadTempDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReloadTempDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReloadTempDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QueryReloadStatus_args implements org.apache.thrift.TBase<QueryReloadStatus_args, QueryReloadStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<QueryReloadStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryReloadStatus_args");

    private static final org.apache.thrift.protocol.TField N_QUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nQueryID", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryReloadStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryReloadStatus_argsTupleSchemeFactory();

    public int nQueryID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N_QUERY_ID((short)1, "nQueryID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N_QUERY_ID
            return N_QUERY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NQUERYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N_QUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("nQueryID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryReloadStatus_args.class, metaDataMap);
    }

    public QueryReloadStatus_args() {
    }

    public QueryReloadStatus_args(
      int nQueryID)
    {
      this();
      this.nQueryID = nQueryID;
      setNQueryIDIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryReloadStatus_args(QueryReloadStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.nQueryID = other.nQueryID;
    }

    public QueryReloadStatus_args deepCopy() {
      return new QueryReloadStatus_args(this);
    }

    @Override
    public void clear() {
      setNQueryIDIsSet(false);
      this.nQueryID = 0;
    }

    public int getNQueryID() {
      return this.nQueryID;
    }

    public QueryReloadStatus_args setNQueryID(int nQueryID) {
      this.nQueryID = nQueryID;
      setNQueryIDIsSet(true);
      return this;
    }

    public void unsetNQueryID() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NQUERYID_ISSET_ID);
    }

    /** Returns true if field nQueryID is set (has been assigned a value) and false otherwise */
    public boolean isSetNQueryID() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NQUERYID_ISSET_ID);
    }

    public void setNQueryIDIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NQUERYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case N_QUERY_ID:
        if (value == null) {
          unsetNQueryID();
        } else {
          setNQueryID((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case N_QUERY_ID:
        return getNQueryID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case N_QUERY_ID:
        return isSetNQueryID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryReloadStatus_args)
        return this.equals((QueryReloadStatus_args)that);
      return false;
    }

    public boolean equals(QueryReloadStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nQueryID = true;
      boolean that_present_nQueryID = true;
      if (this_present_nQueryID || that_present_nQueryID) {
        if (!(this_present_nQueryID && that_present_nQueryID))
          return false;
        if (this.nQueryID != that.nQueryID)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + nQueryID;

      return hashCode;
    }

    @Override
    public int compareTo(QueryReloadStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNQueryID()).compareTo(other.isSetNQueryID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNQueryID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nQueryID, other.nQueryID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryReloadStatus_args(");
      boolean first = true;

      sb.append("nQueryID:");
      sb.append(this.nQueryID);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryReloadStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QueryReloadStatus_argsStandardScheme getScheme() {
        return new QueryReloadStatus_argsStandardScheme();
      }
    }

    private static class QueryReloadStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryReloadStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryReloadStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N_QUERY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nQueryID = iprot.readI32();
                struct.setNQueryIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryReloadStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(N_QUERY_ID_FIELD_DESC);
        oprot.writeI32(struct.nQueryID);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryReloadStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QueryReloadStatus_argsTupleScheme getScheme() {
        return new QueryReloadStatus_argsTupleScheme();
      }
    }

    private static class QueryReloadStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryReloadStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryReloadStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNQueryID()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNQueryID()) {
          oprot.writeI32(struct.nQueryID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryReloadStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.nQueryID = iprot.readI32();
          struct.setNQueryIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QueryReloadStatus_result implements org.apache.thrift.TBase<QueryReloadStatus_result, QueryReloadStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<QueryReloadStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryReloadStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryReloadStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryReloadStatus_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryReloadStatus_result.class, metaDataMap);
    }

    public QueryReloadStatus_result() {
    }

    public QueryReloadStatus_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QueryReloadStatus_result(QueryReloadStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public QueryReloadStatus_result deepCopy() {
      return new QueryReloadStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public QueryReloadStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QueryReloadStatus_result)
        return this.equals((QueryReloadStatus_result)that);
      return false;
    }

    public boolean equals(QueryReloadStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(QueryReloadStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QueryReloadStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QueryReloadStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QueryReloadStatus_resultStandardScheme getScheme() {
        return new QueryReloadStatus_resultStandardScheme();
      }
    }

    private static class QueryReloadStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryReloadStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QueryReloadStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QueryReloadStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QueryReloadStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QueryReloadStatus_resultTupleScheme getScheme() {
        return new QueryReloadStatus_resultTupleScheme();
      }
    }

    private static class QueryReloadStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryReloadStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QueryReloadStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QueryReloadStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

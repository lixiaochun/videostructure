package com.sensing.core.controller;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.sensing.core.utils.*;
import com.sensing.core.utils.Exception.ExpUtil;
import com.sensing.core.utils.results.ResultUtils;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.google.gson.Gson;
import com.sensing.core.bean.Channel;
import com.sensing.core.bean.StaticTask;
import com.sensing.core.bean.Task;
import com.sensing.core.bean.TaskRequest;
import com.sensing.core.service.IChannelService;
import com.sensing.core.service.IStaticTaskServce;
import com.sensing.core.service.ITaskService;
import com.sensing.core.utils.props.PropUtils;

/**
 * 
 * <p> Title: StaticJobController </p>
 * <p> Description:离线视频的访问控制 </p>
 * <p> Company:www.sensingtech.com </p>
 * 
 * @author mingxingyu
 * @date 2019年5月5日
 * @version 1.0
 */
@Controller
@RequestMapping("/staticJob")
@SuppressWarnings("all")
public class StaticJobController extends BaseController {
	private static final Log log = LogFactory.getLog(StaticJobController.class);
	@Resource
	private ITaskService taskService;
	@Resource
	private IStaticTaskServce staticServse;
	@Resource
	private IChannelService channelService;
	@Resource
	public UtilsController utilsController;

	@ResponseBody
	@RequestMapping("/query")
	public ResponseBean query(@RequestBody JSONObject p, HttpServletRequest request) {
		ResponseBean result = new ResponseBean();
		Pager pager = JSONObject.toJavaObject(p, Pager.class);
		try {
			if (pager != null && pager.getF() != null && StringUtils.isNotEmpty(pager.getF().get("name"))) {
//				if (ValidationUtils.isSpecialCharContainDot(pager.getF().get("name"))) {
//					return ResultUtils.error(100, "搜索框内不能含有特殊字符");
//				} else {
					pager.getF().put("name", pager.getF().get("name").trim());
//				}
			}
			// 如果channelName为""，表示查询所有通道
			if (pager.getF().get("name") != null && "".equals(pager.getF().get("name"))) {
				pager.getF().put("name", "");
			}
			// channelState为“”，表示查询所有通道
			if (pager.getF().get("state") != null && "".equals(pager.getF().get("state"))) {
				pager.getF().put("state", "");
			}
			pager = staticServse.queryPage(pager);// 查询通道删除且类型是离线视频的
			result.getMap().put("pager", pager);
			result.setError(0);
			result.setMessage("successful");
		} catch (Exception e) {
			log.error(e);
			result.setError(-1);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/queryById")
	public ResponseBean queryById(@RequestBody JSONObject p) {
		ResponseBean result = new ResponseBean();
		String id = p.getString("uuid");
		if ("".equals(id)) {
			result.setError(100);
			result.setMessage("信息获取失败，请重试");
		} else {
			Task job = new Task();
			try {
				job = taskService.findTaskById(id);
			} catch (Exception e) {
				result.setError(100);
				result.setMessage("信息获取失败，请重试");
			}
			result.setError(0);
			result.setMessage("successful");
			result.getMap().put("model", job);
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/delete")
	public ResponseBean delete(@RequestBody JSONObject p, HttpServletRequest request) {
		ResponseBean result = new ResponseBean();
		String id = p.getString("uuid");
		String uuid = request.getHeader("uuid");
		if (StringUtils.isEmptyOrNull(id)) {
			result.setError(100);
			result.setMessage("信息获取失败，请重试");
		} else {
			try {
				Task job = taskService.findTaskById(id);
				if (job == null || job.getIsDeleted() == 1) {
					result.setError(100);
					result.setMessage("任务已删除，请重试");
				} else {
					if (Constants.TASK_STAT_RUNNING.equals(job.getState())) {
						result.setError(100);
						result.setMessage("处理中任务不可以删除");
					} else {
						taskService.removeTask(id);
					}
				}
			} catch (Exception e) {
				result.setError(-1);
				result.setMessage("信息获取失败，请重试");
			}
			result.setError(0);
			result.setMessage("successful");
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/batchDelete")
	public ResponseBean batchDelete(@RequestBody JSONObject p, HttpServletRequest request) {
		ResponseBean result = new ResponseBean();
		String ids = p.getString("uuids");
//		String id = p.getString("uuid");
		String uuid = request.getHeader("uuid");
		if (StringUtils.isEmptyOrNull(ids)) {
			result.setError(100);
			result.setMessage("信息获取失败，请重试");
		} else {
			try {
				String[] arrIds = ids.split(",");
				for (int i = 0; i < arrIds.length; i++) {
					Task job = taskService.findTaskById(arrIds[i]);
					if (job == null || job.getIsDeleted() == 1) {
						result.setError(100);
						result.setMessage("任务已删除，请重试");
					} else {
						if (Constants.TASK_STAT_RUNNING.equals(job.getState())) {
							result.setError(100);
							result.setMessage("处理中任务不可以删除");
						} else {
							taskService.removeTask(arrIds[i]);
						}
					}
				}
			} catch (Exception e) {
				result.setError(-1);
				result.setMessage("信息获取失败，请重试");
			}
			result.setError(0);
			result.setMessage("successful");
		}
		return result;
	}

	/**
	 * 保存离线视频文件
	 * 
	 * @param p
	 * @param request
	 * @return
	 * @author mingxingyu
	 * @date 2019年5月5日 下午1:48:41
	 */
	@ResponseBody
	@RequestMapping("/save")
	public ResponseBean save(@RequestBody JSONObject p, HttpServletRequest request) {
		ResponseBean result = new ResponseBean();
		String uuid = request.getHeader("uuid");
		if (uuid == null || "".equals(uuid)) {
			result.setError(-1);
			result.setMessage("无权访问，请登录后重试");
			return result;
		}
		try {
			TaskRequest model = JSONObject.toJavaObject(p, TaskRequest.class);
			if (model != null && model.getTask() != null && StringUtils.isNotEmpty(model.getTask().getName())) {
				String taskName = model.getTask().getName();
				// 判断上传的文件名称(不包括后缀)的长度不超过50个字符
				int lastIndexOf = taskName.lastIndexOf(".");
				if (lastIndexOf > 0) {
					String fileName = taskName.substring(0, lastIndexOf);
					if (fileName != null && fileName.length() > 50) {
						result.setError(-1);
						result.setMessage("文件名称限50个字符");
						return result;
					}
				} else {
					result.setError(-1);
					result.setMessage("上传文件名称不存在.字符");
					return result;
				}
			} else {
				result.setError(-1);
				result.setMessage("上传文件名称非法");
				return result;
			}
			model.getTask().setType(3);
			model.getTask().setCreateUser(uuid);
			model.getTask().setCreateTime(new Date());
			model.getTaskChannel().setCreateUser(uuid);
			String id = model.getTask().getUuid();
			// 开启线程，后台执行比对
//			new Thread(new Runnable() {
//				@Override
//				public void run() {
//					staticServse.runCompare(id);
//				}
//			}).start();
			int resultState = staticServse.runCompare(id);
			if ( resultState == 0 ) {
				model.getTask().setState(Constants.TASK_STAT_RUNNING);
				model = taskService.saveNewTask(model);
				result.getMap().put("model", model);
				result.setError(0);
				result.setMessage("successful");
			}else{
				model.getTask().setState(Constants.TASK_STAT_FAILEE);
				model = taskService.saveNewTask(model);
				result.getMap().put("model", model);
				result.setError(-1);
				result.setMessage("离线任务创建失败，请检查服务");
			}

		} catch (Exception e) {
			result.setError(-1);
			result.setMessage("保存比对任务失败");
		}
		return result;
	}

	/**
	 * 批量保存离线视频文件
	 * 
	 * @param p
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/batchSave")
	public ResponseBean batchSave(@RequestBody JSONObject p, HttpServletRequest request) {
		ResponseBean result = new ResponseBean();
		String uuid = request.getHeader("uuid");
		if (uuid == null || "".equals(uuid)) {
			result.setError(-1);
			result.setMessage("无权访问，请登录后重试");
			return result;
		}
		try {
			String jsonArr = p.getString("jsonArr");
			if (StringUtils.isNotEmpty(jsonArr)) {
				JSONArray array = JSONArray.parseArray(jsonArr);
				/**
				 * 记录每个视频的操作信息
				 */
				List<Map<String,String>> resultList = new ArrayList<Map<String,String>>();
				for (int i = 0; i < array.size(); i++) {
					JSONObject object = (JSONObject) array.get(i);
					TaskRequest model = JSONObject.toJavaObject(object, TaskRequest.class);
					if (model != null && model.getTask() != null && StringUtils.isNotEmpty(model.getTask().getName())) {
						String taskName = model.getTask().getName();
						// 判断上传的文件名称(不包括后缀)的长度不超过50个字符
						int lastIndexOf = taskName.lastIndexOf(".");
						if (lastIndexOf > 0) {
							String fileName = taskName.substring(0, lastIndexOf);
							if (fileName != null && fileName.length() > 50) {
								result.setError(-1);
								result.setMessage("文件名称限50个字符");
								return result;
							}
						} else {
							result.setError(-1);
							result.setMessage("上传文件名称不存在.字符");
							return result;
						}
					} else {
						result.setError(-1);
						result.setMessage("上传文件名称非法");
						return result;
					}
					model.getTask().setState(Constants.TASK_STAT_RUNNING);
					model.getTask().setType(3);
					model.getTask().setCreateUser(uuid);
					model.getTask().setCreateTime(new Date());
					model.getTaskChannel().setCreateUser(uuid);
					model = taskService.saveNewTask(model);
					String id = model.getTask().getUuid();
					
					Map<String,String> resultMap = new HashMap<String, String>();
					resultMap.put("uuid",model.getTask().getUuid());
					resultMap.put("name",model.getTask().getName());

					int state = staticServse.runCompare(id);
					if ( state == 0 ) {
//						model.getTask().setState(Constants.TASK_STAT_RUNNING);
//						taskService.updateState(model.getTask());
						resultMap.put("state",state+"");
						resultMap.put("msg","successful");
					}else{
						model.getTask().setState(Constants.TASK_STAT_FAILEE);
						taskService.updateState(model.getTask());
						resultMap.put("state",state+"");
						resultMap.put("msg","error");
					}
					
					resultList.add(resultMap);
				}
				
				result.getMap().put("model",resultList);
				result.setError(0);
				result.setMessage("successful");
			}
		} catch (Exception e) {
			result.setError(-1);
			result.setMessage("保存比对任务失败");
		}
		return result;
	}

	/**
	 * 一期没有更新
	 * 
	 * @param p
	 * @param request
	 * @return
	 */
	@ResponseBody
	@RequestMapping("/update")
	public ResponseBean update(@RequestBody JSONObject p, HttpServletRequest request) {
		TaskRequest model = JSONObject.toJavaObject(p, TaskRequest.class);
		ResponseBean result = new ResponseBean();
		String uuid = request.getHeader("uuid");
		try {
			if (model != null && model.getTask().getUuid() != null && !"".equals(model.getTask().getUuid())) {
				model.getTask().setModifyUser(uuid);
				model.getTaskChannel().setModifyUser(uuid);
				model = taskService.updateTask(model);
				result.getMap().put("model", model);
				result.setError(0);
				result.setMessage("successful");
			} else {
				result.setError(100);
				result.setMessage("uuid不能为空");
			}
		} catch (Exception e) {
			log.error(e);
			result.setError(-1);
			result.setMessage(e.getMessage());
		}
		return result;
	}

	@RequestMapping("/getVedioByJobId")
	@ResponseBody
	public ResponseBean getVedioByJobId(@RequestBody JSONObject p) {
		ResponseBean result = new ResponseBean();
		String id = p.getString("id");
		try {
			StaticTask task = staticServse.getVedioByJobId(id);
			if (task != null && task.getChannelRtmp() != null && !"".equals(task.getChannelRtmp())) {
				String videoDir = PropUtils.getString("watch_video");
				task.setChannelRtmp(videoDir + "/" + task.getChannelRtmp());
			}
			result.setError(0);
			result.setMessage("successful");
			result.getMap().put("model", task);
		} catch (Exception e) {
			result.setError(-1);
			result.setMessage(e.getMessage());
			return result;
		}
		return result;
	}

	/**
	 * @Description: 判断文件之前是否上传过 state=0 未上传过 state=1 部分上传 state=2 上传完成
	 * @author dongsl
	 * @Date 2018年8月1日下午6:10:50
	 */
	@RequestMapping("/checkFile")
	@ResponseBody
	public ResponseBean checkFile(@RequestBody JSONObject m, HttpServletRequest request, HttpServletResponse response) {
		ResponseBean result = new ResponseBean();
		String md5 = m.getString("fileMd5");
		String suffix = m.getString("suffix");
		String videoDir = PropUtils.getString("upload_video");
		String fileName = m.getString("fileName");
		// 判断添加通道时当前通道使用情况
//		ResponseBean bean = utilsController.resourceStatistics(m);
//		Integer remainingChannel = (Integer) bean.getMap().get("remainingChannel");
//		if (remainingChannel == 0) {
//			return ResultUtils.error(-1, "资源已被全部占用,若需添加,请暂停或删除部分任务");
//		}
		int count = channelService.queryVideoByChannelName(fileName);
		if (count > 0) {
			result.setError(-1);
//			result.setMessage("离线视频通道下已存在名为：" + fileName + "的视频，请重命名后上传");
			result.setMessage("该视频已存在，请重命名后上传");
			log.error("离线视频通道下已存在名为：" + fileName + "的视频，请重命名后上传");
			return result;
		}
		if (StringUtils.isEmptyOrNull(md5) || StringUtils.isEmptyOrNull(fileName)) {
			result.setError(100);
			result.setMessage("文件特征值为空或者fileName为空值");
			log.error("离线视频--检测上传状态--所传文件md5值为空或者fileName为空值");
			return result;
		}
		File directory = new File(videoDir + "/" + md5);
		File file = new File(videoDir + "/" + md5 + "." + suffix);
		Map<String, String> map = new HashMap<String, String>();
		int state = 0;
		int maxChuck = 0;
		try {
			if (directory.exists()) {
				File[] fileArray = directory.listFiles();
				List<File> fileList = new ArrayList<File>(Arrays.asList(fileArray));
				Collections.sort(fileList, new Comparator<File>() {
					@Override
					public int compare(File o1, File o2) {
						if (Integer.parseInt(o1.getName()) < Integer.parseInt(o2.getName())) {
							return -1;
						}
						return 1;
					}
				});
				if (fileArray.length > 0) {
					maxChuck = Integer.valueOf(fileList.get(fileList.size() - 1).getName());
					state = 1;
				}
			} else if (file.exists()) {
				state = 2;
//				int count = channelService.queryVideoByChannelName(fileName);
//				if (count  > 0) {
//					result.setError(-1);
//			        result.setMessage("离线视频通道下已存在名为：" + fileName + "的视频，请重命名后上传");
//			        log.error("离线视频通道下已存在名为：" + fileName + "的视频，请重命名后上传");
//			        return result;
//				}
				Channel fsd = new Channel();
				fsd.setChannelName(fileName);
				String path = PropUtils.getString("web.download.url") + videoDir + "/" + md5 + "." + suffix;
				fsd.setChannelAddr(path);
				fsd.setCreateTime(new Date().getTime() / 1000);
				fsd.setChannelRtmp(md5 + "." + suffix);
				fsd = channelService.saveNewVideo(fsd);
				map.put("id", fsd.getUuid());

			}
			map.put("state", String.valueOf(state));
			map.put("maxChuck", String.valueOf(maxChuck));
			result.setError(0);
			result.setMessage("successful");
			result.getMap().put("model", map);
			return result;
		} catch (Exception e) {
			result.setError(-1);
			result.setMessage("检测上传状态失败，请重试");
			e.printStackTrace();
			log.error("离线视频--检测上传状态--检测上传状态失败，请重试");
			return result;
		}
	}

	@ResponseBody
	@RequestMapping("/uploadChuncks")
	public void uploadChuncks(HttpServletRequest request, HttpServletResponse response) {
		response.setHeader("Content-type", "text/html;charset=UTF-8");
		response.setCharacterEncoding("UTF-8");
		Map<String, String> map = new HashMap<String, String>();
		Gson gson = new Gson();
		String videoDir = PropUtils.getString("upload_video");
		String fileMd5 = request.getParameter("fileMd5"); // 文件md5值
		String chunk = request.getParameter("chunk"); // 当前第几块
		String isLastChunk = request.getParameter("isLastChunk"); // 是否是最后一块
		String fileName = request.getParameter("fileName"); // 文件名称
		if (StringUtils.isEmptyOrNull(fileMd5) || StringUtils.isEmptyOrNull(chunk)
				|| StringUtils.isEmptyOrNull(fileName)) {
			map.put("chunk", "0");
			map.put("error", "0");
//			map.put("message", "所传文件md5值为空或chunk值为空或者fileName为空值");
			map.put("message", "文件特征值为空或chunk值为空或者fileName为空值");
			log.error("离线视频--检测长传状态--所传文件md5值为空或者fileName为空值");
			try {
				String json = gson.toJson(map);
				response.getWriter().write(json);
			} catch (IOException e) {
				map.put("chunk", "0");
				map.put("error", "100");
				map.put("message", e.getMessage());
				log.error("离线视频通：" + e.getMessage());
			}
			return;
		}
		FileOutputStream fos = null;
		InputStream in = null;
		File dir = new File(videoDir + "/" + fileMd5);
		File vieoDirF = new File(videoDir);
		if (!vieoDirF.exists()) {
			vieoDirF.mkdir();
		}
		if (!dir.exists()) {
			dir.mkdir();
		}
		try {
			CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
					request.getSession().getServletContext());
			if (multipartResolver.isMultipart(request)) {
				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
				Iterator iterator = multiRequest.getFileNames();
				while (iterator.hasNext()) {
					MultipartFile multipartFile = multiRequest.getFile(iterator.next().toString());
					in = multipartFile.getInputStream();
					File chunckFile = new File(dir + "/" + chunk);
					if (chunckFile.exists()) {
						map.put("chunck", chunk);
						map.put("error", "100");
//						map.put("message", fileName + "所传文件md5值已存在");
						map.put("message", "文件特征值已存在");
						String json = gson.toJson(map);
						response.getWriter().write(json);
						return;
					}
					fos = new FileOutputStream(chunckFile);
					byte[] buff = new byte[1024];
					int len = 0;
					while ((len = in.read(buff)) > 0) {
						fos.write(buff, 0, len);
					}
					fos.close();
				}
			}
			if (isLastChunk.equals("true")) {
				// 读取目录里的所有文件
				File[] fileArray = dir.listFiles(new FileFilter() {
					// 排除目录只要文件
					@Override
					public boolean accept(File pathname) {
						if (pathname.isDirectory()) {
							return false;
						}
						return true;
					}
				});
				// 转成集合，便于排序
				List<File> fileList = new ArrayList<File>(Arrays.asList(fileArray));
				Collections.sort(fileList, new Comparator<File>() {
					@Override
					public int compare(File o1, File o2) {
						if (Integer.parseInt(o1.getName()) < Integer.parseInt(o2.getName())) {
							return -1;
						}
						return 1;
					}
				});
				// 截取文件名的后缀名
				// 最后一个"."的位置
				int pointIndex = fileName.lastIndexOf(".");
				// 后缀名
				String suffix = fileName.substring(pointIndex);
				// 合并后的文件
				File outputFile = new File(videoDir + "/" + fileMd5 + suffix);
				// 创建文件
				try {
					outputFile.createNewFile();
				} catch (IOException e) {
					e.printStackTrace();
				}
				// 输出流
				FileChannel outChnnel = new FileOutputStream(outputFile).getChannel();
				// 合并
				FileChannel inChannel;
				for (File filee : fileList) {
					inChannel = new FileInputStream(filee).getChannel();
					try {
						inChannel.transferTo(0, inChannel.size(), outChnnel);
					} catch (IOException e) {
						e.printStackTrace();
					}
					try {
						inChannel.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
					// 删除分片
					filee.delete();
				}
				try {
					outChnnel.close();
				} catch (IOException e) {
					e.printStackTrace();
				}

				// 清除文件夹
				if (dir.isDirectory() && dir.exists()) {
					dir.delete();
				}
				int count = channelService.queryVideoByChannelName(fileName);
				if (count > 0) {
					map.put("chunck", "0");
					map.put("error", "100");
//					map.put("message", "离线视频通道下已存在名为：\"" + fileName + "\"的视频，请重命名后上传");
					map.put("message", "该视频已存在，请重命名后上传");
					log.error("该视频已存在，请重命名后上传");
					try {
						String json = gson.toJson(map);
						response.getWriter().write(json);
					} catch (IOException e) {
						map.put("chunck", "0");
						map.put("error", "-1");
						map.put("message", e.getMessage());
						log.error("离线视频通：" + e.getMessage());
					}
					return;
				}
				Channel fsd = new Channel();
				fsd.setChannelName(fileName);
				String path = PropUtils.getString("web.download.url") + videoDir + "/" + fileMd5 + suffix;
				fsd.setChannelAddr(path);
				fsd.setCreateTime(new Date().getTime() / 1000);
				fsd.setChannelRtmp(fileMd5 + suffix);
				fsd = channelService.saveNewVideo(fsd);
				map.put("id", fsd.getUuid());
			}
			map.put("chunck", chunk);
			map.put("error", "0");
			map.put("message", "successful");
			String json = gson.toJson(map);
			response.getWriter().write(json);
		} catch (Exception e) {
			map.put("error", "-1");
			map.put("chunck", chunk);
			map.put("message", ExpUtil.getExceptionDetail(e));
			try {
				response.getWriter().write(gson.toJson(map));
			} catch (IOException e1) {
				log.error(ExpUtil.getExceptionDetail(e));
			}
			log.error("上传文件失败");
		}
	}

	/**
	 * 导入文件
	 * 
	 * @throws IOException
	 */
	@RequestMapping("/Videoimport")
	public ModelAndView exportjsp(Model model) throws IOException {
		ModelAndView modelAndView = new ModelAndView("importVideo");
		return modelAndView;
	}
}

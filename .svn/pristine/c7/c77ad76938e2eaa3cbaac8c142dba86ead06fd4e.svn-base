package com.sensing.core.service.impl;

import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Service;

import com.sensing.core.bean.RpcLog;
import com.sensing.core.bean.RpcLogLogin;
import com.sensing.core.bean.RpcLogRun;
import com.sensing.core.cacahes.SessionCache;
import com.sensing.core.dao.IRpcLogDAO;
import com.sensing.core.service.IRpcLogService;
import com.sensing.core.utils.Pager;
import com.sensing.core.utils.ResponseBean;
import com.sensing.core.utils.Exception.BussinessException;
import com.sensing.core.utils.results.ResultUtils;
import com.sensing.core.utils.time.DateStyle;
import com.sensing.core.utils.time.QueryDateUtils;
import com.sensing.core.utils.time.TransfTimeUtil;

/**
 * @author wenbo
 */
@Service
public class RpcLogServiceImpl implements IRpcLogService {

	private static final Log log = LogFactory.getLog(IRpcLogService.class);

	@Resource
	public IRpcLogDAO rpcLogDAO;

	/**
	 * @Description: 保存RpcLog日志
	 * @author dongsl
	 * @Date 2018年6月13日下午1:42:05
	 */
	@Override
	public RpcLog saveNewRpcLog(RpcLog rpcLog) {
		try {
			// 日志长度限制
			if (rpcLog.getMemo().length() > 1000) {
				rpcLog.setMemo(rpcLog.getMemo().substring(0, 1000));
			}
			rpcLogDAO.saveRpcLog(rpcLog);
		} catch (Exception e) {
			log.error("保存rpcLog失败！异常信息：" + e.getLocalizedMessage());
		}
		return rpcLog;
	}

	/**
	 * @Description: 删除rpcLog日志
	 * @author dongsl
	 * @Date 2018年6月13日下午1:42:55
	 */
	@Override
	public void removeRpcLog(Integer id) throws Exception {
		try {
			rpcLogDAO.removeRpcLog(id);
		} catch (Exception e) {
			log.error(e);
			throw new BussinessException(e);
		}
	}

	/**
	 * @Description: 查询rpcLog日志列表
	 * @author dongsl
	 * @Date 2018年6月13日下午1:43:14
	 */
	@Override
	public Pager queryPage(Pager pager) throws Exception {
		try {
			String date = pager.getF().get("date" + "");
			if (StringUtils.isNotEmpty(date)) {
				long callTimeFrom = 0l;
				long callTimeEnd = 0l;
				Date[] dates;
				if ("1".equals(date)) {
					dates = QueryDateUtils.getToday();
					callTimeEnd = dates[0].getTime() / 1000;
					callTimeFrom = dates[1].getTime() / 1000;
				} else if ("-1".equals(date)) {
					dates = QueryDateUtils.getYesterday();
					callTimeEnd = dates[0].getTime() / 1000;
					callTimeFrom = dates[1].getTime() / 1000;
				} else if ("-3".equals(date)) {
					dates = QueryDateUtils.get3Day();
					callTimeEnd = dates[0].getTime() / 1000;
					callTimeFrom = dates[1].getTime() / 1000;
				} else if ("-7".equals(date)) {
					dates = QueryDateUtils.get7Day();
					callTimeEnd = dates[0].getTime() / 1000;
					callTimeFrom = dates[1].getTime() / 1000;
				} else if ("-30".equals(date)) {
					dates = QueryDateUtils.get30Day();
					callTimeEnd = dates[0].getTime() / 1000;
					callTimeFrom = dates[1].getTime() / 1000;
				}
				pager.getF().put("callTimeFrom",
						TransfTimeUtil.UnixTimeStamp2Date(callTimeFrom, DateStyle.YYYY_MM_DD_HH_MM_SS));
				pager.getF().put("callTimeEnd",
						TransfTimeUtil.UnixTimeStamp2Date(callTimeEnd, DateStyle.YYYY_MM_DD_HH_MM_SS));
			}

			List<RpcLog> list = rpcLogDAO.queryList(pager);
			Integer totalCount = rpcLogDAO.selectCount(pager);
			if (totalCount == null) {
				totalCount = 0;
			}
			pager.setTotalCount(totalCount);
			pager.setResultList(list);
		} catch (Exception e) {
			e.printStackTrace();
			log.error(e);
			throw new BussinessException(e);
		}
		return pager;
	}

	public List<RpcLog> queryRpcLog(RpcLog rpcLog) throws Exception {
		List<RpcLog> list = rpcLogDAO.queryRpcLog(rpcLog);
		return list;
	}

	public List<RpcLogLogin> queryRpcLoginLog(RpcLog rpcLog) {
		return rpcLogDAO.queryRpcLoginLog(rpcLog);
	}

	public List<RpcLogRun> queryRpcRunLog(RpcLog rpcLog) {
		return rpcLogDAO.queryRpcRunLog(rpcLog);
	}

	public List<RpcLog> getModle() {
		return rpcLogDAO.getModle();
	}

	@Override
	public ResponseBean getOnlineUserCount() {
		// int onlineUserCount = onlineUserListener.getOnlineUserCount();
		int onlineUserCount = SessionCache.getSessionSize();
		return ResultUtils.success(onlineUserCount + "");
	}

}
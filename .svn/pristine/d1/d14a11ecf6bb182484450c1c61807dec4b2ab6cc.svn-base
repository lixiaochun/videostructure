package com.sensing.core.thrift.cmp.service;

import com.sensing.core.thrift.bean.CompareFeatureDBResult;
import com.sensing.core.thrift.bean.CompareResult;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-08-01")
public class CompareServer {

  public interface Iface {

    public CompareResult compare(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version) throws org.apache.thrift.TException;

    public CompareFeatureDBResult CompareFeatureDB(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void compare(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version, org.apache.thrift.async.AsyncMethodCallback<CompareResult> resultHandler) throws org.apache.thrift.TException;

    public void CompareFeatureDB(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version, org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public CompareResult compare(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version) throws org.apache.thrift.TException
    {
      send_compare(job_id, threshold, dba, dbb, version);
      return recv_compare();
    }

    public void send_compare(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version) throws org.apache.thrift.TException
    {
      compare_args args = new compare_args();
      args.setJob_id(job_id);
      args.setThreshold(threshold);
      args.setDba(dba);
      args.setDbb(dbb);
      args.setVersion(version);
      sendBase("compare", args);
    }

    public CompareResult recv_compare() throws org.apache.thrift.TException
    {
      compare_result result = new compare_result();
      receiveBase(result, "compare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "compare failed: unknown result");
    }

    public CompareFeatureDBResult CompareFeatureDB(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version) throws org.apache.thrift.TException
    {
      send_CompareFeatureDB(dbId, threshold, feature, version);
      return recv_CompareFeatureDB();
    }

    public void send_CompareFeatureDB(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version) throws org.apache.thrift.TException
    {
      CompareFeatureDB_args args = new CompareFeatureDB_args();
      args.setDbId(dbId);
      args.setThreshold(threshold);
      args.setFeature(feature);
      args.setVersion(version);
      sendBase("CompareFeatureDB", args);
    }

    public CompareFeatureDBResult recv_CompareFeatureDB() throws org.apache.thrift.TException
    {
      CompareFeatureDB_result result = new CompareFeatureDB_result();
      receiveBase(result, "CompareFeatureDB");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "CompareFeatureDB failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void compare(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version, org.apache.thrift.async.AsyncMethodCallback<CompareResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      compare_call method_call = new compare_call(job_id, threshold, dba, dbb, version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class compare_call extends org.apache.thrift.async.TAsyncMethodCall<CompareResult> {
      private int job_id;
      private double threshold;
      private java.lang.String dba;
      private java.lang.String dbb;
      private int version;
      public compare_call(int job_id, double threshold, java.lang.String dba, java.lang.String dbb, int version, org.apache.thrift.async.AsyncMethodCallback<CompareResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.job_id = job_id;
        this.threshold = threshold;
        this.dba = dba;
        this.dbb = dbb;
        this.version = version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("compare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        compare_args args = new compare_args();
        args.setJob_id(job_id);
        args.setThreshold(threshold);
        args.setDba(dba);
        args.setDbb(dbb);
        args.setVersion(version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompareResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_compare();
      }
    }

    public void CompareFeatureDB(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version, org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CompareFeatureDB_call method_call = new CompareFeatureDB_call(dbId, threshold, feature, version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CompareFeatureDB_call extends org.apache.thrift.async.TAsyncMethodCall<CompareFeatureDBResult> {
      private java.lang.String dbId;
      private double threshold;
      private java.util.List<java.nio.ByteBuffer> feature;
      private int version;
      public CompareFeatureDB_call(java.lang.String dbId, double threshold, java.util.List<java.nio.ByteBuffer> feature, int version, org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dbId = dbId;
        this.threshold = threshold;
        this.feature = feature;
        this.version = version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CompareFeatureDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CompareFeatureDB_args args = new CompareFeatureDB_args();
        args.setDbId(dbId);
        args.setThreshold(threshold);
        args.setFeature(feature);
        args.setVersion(version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CompareFeatureDBResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_CompareFeatureDB();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("compare", new compare());
      processMap.put("CompareFeatureDB", new CompareFeatureDB());
      return processMap;
    }

    public static class compare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, compare_args> {
      public compare() {
        super("compare");
      }

      public compare_args getEmptyArgsInstance() {
        return new compare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public compare_result getResult(I iface, compare_args args) throws org.apache.thrift.TException {
        compare_result result = new compare_result();
        result.success = iface.compare(args.job_id, args.threshold, args.dba, args.dbb, args.version);
        return result;
      }
    }

    public static class CompareFeatureDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CompareFeatureDB_args> {
      public CompareFeatureDB() {
        super("CompareFeatureDB");
      }

      public CompareFeatureDB_args getEmptyArgsInstance() {
        return new CompareFeatureDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CompareFeatureDB_result getResult(I iface, CompareFeatureDB_args args) throws org.apache.thrift.TException {
        CompareFeatureDB_result result = new CompareFeatureDB_result();
        result.success = iface.CompareFeatureDB(args.dbId, args.threshold, args.feature, args.version);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("compare", new compare());
      processMap.put("CompareFeatureDB", new CompareFeatureDB());
      return processMap;
    }

    public static class compare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, compare_args, CompareResult> {
      public compare() {
        super("compare");
      }

      public compare_args getEmptyArgsInstance() {
        return new compare_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CompareResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CompareResult>() { 
          public void onComplete(CompareResult o) {
            compare_result result = new compare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            compare_result result = new compare_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, compare_args args, org.apache.thrift.async.AsyncMethodCallback<CompareResult> resultHandler) throws org.apache.thrift.TException {
        iface.compare(args.job_id, args.threshold, args.dba, args.dbb, args.version,resultHandler);
      }
    }

    public static class CompareFeatureDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CompareFeatureDB_args, CompareFeatureDBResult> {
      public CompareFeatureDB() {
        super("CompareFeatureDB");
      }

      public CompareFeatureDB_args getEmptyArgsInstance() {
        return new CompareFeatureDB_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult>() { 
          public void onComplete(CompareFeatureDBResult o) {
            CompareFeatureDB_result result = new CompareFeatureDB_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            CompareFeatureDB_result result = new CompareFeatureDB_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CompareFeatureDB_args args, org.apache.thrift.async.AsyncMethodCallback<CompareFeatureDBResult> resultHandler) throws org.apache.thrift.TException {
        iface.CompareFeatureDB(args.dbId, args.threshold, args.feature, args.version,resultHandler);
      }
    }

  }

  public static class compare_args implements org.apache.thrift.TBase<compare_args, compare_args._Fields>, java.io.Serializable, Cloneable, Comparable<compare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compare_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("job_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField DBA_FIELD_DESC = new org.apache.thrift.protocol.TField("dba", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DBB_FIELD_DESC = new org.apache.thrift.protocol.TField("dbb", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compare_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compare_argsTupleSchemeFactory();

    public int job_id; // required
    public double threshold; // required
    public java.lang.String dba; // required
    public java.lang.String dbb; // required
    public int version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "job_id"),
      THRESHOLD((short)2, "threshold"),
      DBA((short)3, "dba"),
      DBB((short)4, "dbb"),
      VERSION((short)5, "version");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          case 2: // THRESHOLD
            return THRESHOLD;
          case 3: // DBA
            return DBA;
          case 4: // DBB
            return DBB;
          case 5: // VERSION
            return VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __JOB_ID_ISSET_ID = 0;
    private static final int __THRESHOLD_ISSET_ID = 1;
    private static final int __VERSION_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("job_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DBA, new org.apache.thrift.meta_data.FieldMetaData("dba", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DBB, new org.apache.thrift.meta_data.FieldMetaData("dbb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compare_args.class, metaDataMap);
    }

    public compare_args() {
    }

    public compare_args(
      int job_id,
      double threshold,
      java.lang.String dba,
      java.lang.String dbb,
      int version)
    {
      this();
      this.job_id = job_id;
      setJob_idIsSet(true);
      this.threshold = threshold;
      setThresholdIsSet(true);
      this.dba = dba;
      this.dbb = dbb;
      this.version = version;
      setVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compare_args(compare_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.job_id = other.job_id;
      this.threshold = other.threshold;
      if (other.isSetDba()) {
        this.dba = other.dba;
      }
      if (other.isSetDbb()) {
        this.dbb = other.dbb;
      }
      this.version = other.version;
    }

    public compare_args deepCopy() {
      return new compare_args(this);
    }

    @Override
    public void clear() {
      setJob_idIsSet(false);
      this.job_id = 0;
      setThresholdIsSet(false);
      this.threshold = 0.0;
      this.dba = null;
      this.dbb = null;
      setVersionIsSet(false);
      this.version = 0;
    }

    public int getJob_id() {
      return this.job_id;
    }

    public compare_args setJob_id(int job_id) {
      this.job_id = job_id;
      setJob_idIsSet(true);
      return this;
    }

    public void unsetJob_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __JOB_ID_ISSET_ID);
    }

    /** Returns true if field job_id is set (has been assigned a value) and false otherwise */
    public boolean isSetJob_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __JOB_ID_ISSET_ID);
    }

    public void setJob_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __JOB_ID_ISSET_ID, value);
    }

    public double getThreshold() {
      return this.threshold;
    }

    public compare_args setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
      return this;
    }

    public void unsetThreshold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public java.lang.String getDba() {
      return this.dba;
    }

    public compare_args setDba(java.lang.String dba) {
      this.dba = dba;
      return this;
    }

    public void unsetDba() {
      this.dba = null;
    }

    /** Returns true if field dba is set (has been assigned a value) and false otherwise */
    public boolean isSetDba() {
      return this.dba != null;
    }

    public void setDbaIsSet(boolean value) {
      if (!value) {
        this.dba = null;
      }
    }

    public java.lang.String getDbb() {
      return this.dbb;
    }

    public compare_args setDbb(java.lang.String dbb) {
      this.dbb = dbb;
      return this;
    }

    public void unsetDbb() {
      this.dbb = null;
    }

    /** Returns true if field dbb is set (has been assigned a value) and false otherwise */
    public boolean isSetDbb() {
      return this.dbb != null;
    }

    public void setDbbIsSet(boolean value) {
      if (!value) {
        this.dbb = null;
      }
    }

    public int getVersion() {
      return this.version;
    }

    public compare_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJob_id();
        } else {
          setJob_id((java.lang.Integer)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((java.lang.Double)value);
        }
        break;

      case DBA:
        if (value == null) {
          unsetDba();
        } else {
          setDba((java.lang.String)value);
        }
        break;

      case DBB:
        if (value == null) {
          unsetDbb();
        } else {
          setDbb((java.lang.String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJob_id();

      case THRESHOLD:
        return getThreshold();

      case DBA:
        return getDba();

      case DBB:
        return getDbb();

      case VERSION:
        return getVersion();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJob_id();
      case THRESHOLD:
        return isSetThreshold();
      case DBA:
        return isSetDba();
      case DBB:
        return isSetDbb();
      case VERSION:
        return isSetVersion();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compare_args)
        return this.equals((compare_args)that);
      return false;
    }

    public boolean equals(compare_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_job_id = true;
      boolean that_present_job_id = true;
      if (this_present_job_id || that_present_job_id) {
        if (!(this_present_job_id && that_present_job_id))
          return false;
        if (this.job_id != that.job_id)
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      boolean this_present_dba = true && this.isSetDba();
      boolean that_present_dba = true && that.isSetDba();
      if (this_present_dba || that_present_dba) {
        if (!(this_present_dba && that_present_dba))
          return false;
        if (!this.dba.equals(that.dba))
          return false;
      }

      boolean this_present_dbb = true && this.isSetDbb();
      boolean that_present_dbb = true && that.isSetDbb();
      if (this_present_dbb || that_present_dbb) {
        if (!(this_present_dbb && that_present_dbb))
          return false;
        if (!this.dbb.equals(that.dbb))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + job_id;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(threshold);

      hashCode = hashCode * 8191 + ((isSetDba()) ? 131071 : 524287);
      if (isSetDba())
        hashCode = hashCode * 8191 + dba.hashCode();

      hashCode = hashCode * 8191 + ((isSetDbb()) ? 131071 : 524287);
      if (isSetDbb())
        hashCode = hashCode * 8191 + dbb.hashCode();

      hashCode = hashCode * 8191 + version;

      return hashCode;
    }

    @Override
    public int compareTo(compare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetJob_id()).compareTo(other.isSetJob_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJob_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.job_id, other.job_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDba()).compareTo(other.isSetDba());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDba()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dba, other.dba);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDbb()).compareTo(other.isSetDbb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbb, other.dbb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compare_args(");
      boolean first = true;

      sb.append("job_id:");
      sb.append(this.job_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dba:");
      if (this.dba == null) {
        sb.append("null");
      } else {
        sb.append(this.dba);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dbb:");
      if (this.dbb == null) {
        sb.append("null");
      } else {
        sb.append(this.dbb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compare_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compare_argsStandardScheme getScheme() {
        return new compare_argsStandardScheme();
      }
    }

    private static class compare_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<compare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.job_id = iprot.readI32();
                struct.setJob_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DBA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dba = iprot.readString();
                struct.setDbaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DBB
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbb = iprot.readString();
                struct.setDbbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
        oprot.writeI32(struct.job_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        if (struct.dba != null) {
          oprot.writeFieldBegin(DBA_FIELD_DESC);
          oprot.writeString(struct.dba);
          oprot.writeFieldEnd();
        }
        if (struct.dbb != null) {
          oprot.writeFieldBegin(DBB_FIELD_DESC);
          oprot.writeString(struct.dbb);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compare_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compare_argsTupleScheme getScheme() {
        return new compare_argsTupleScheme();
      }
    }

    private static class compare_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<compare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetJob_id()) {
          optionals.set(0);
        }
        if (struct.isSetThreshold()) {
          optionals.set(1);
        }
        if (struct.isSetDba()) {
          optionals.set(2);
        }
        if (struct.isSetDbb()) {
          optionals.set(3);
        }
        if (struct.isSetVersion()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetJob_id()) {
          oprot.writeI32(struct.job_id);
        }
        if (struct.isSetThreshold()) {
          oprot.writeDouble(struct.threshold);
        }
        if (struct.isSetDba()) {
          oprot.writeString(struct.dba);
        }
        if (struct.isSetDbb()) {
          oprot.writeString(struct.dbb);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.job_id = iprot.readI32();
          struct.setJob_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.threshold = iprot.readDouble();
          struct.setThresholdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dba = iprot.readString();
          struct.setDbaIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dbb = iprot.readString();
          struct.setDbbIsSet(true);
        }
        if (incoming.get(4)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class compare_result implements org.apache.thrift.TBase<compare_result, compare_result._Fields>, java.io.Serializable, Cloneable, Comparable<compare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("compare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new compare_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new compare_resultTupleSchemeFactory();

    public CompareResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompareResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(compare_result.class, metaDataMap);
    }

    public compare_result() {
    }

    public compare_result(
      CompareResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public compare_result(compare_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompareResult(other.success);
      }
    }

    public compare_result deepCopy() {
      return new compare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CompareResult getSuccess() {
      return this.success;
    }

    public compare_result setSuccess(CompareResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompareResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof compare_result)
        return this.equals((compare_result)that);
      return false;
    }

    public boolean equals(compare_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(compare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("compare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class compare_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compare_resultStandardScheme getScheme() {
        return new compare_resultStandardScheme();
      }
    }

    private static class compare_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<compare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, compare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompareResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, compare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class compare_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public compare_resultTupleScheme getScheme() {
        return new compare_resultTupleScheme();
      }
    }

    private static class compare_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<compare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, compare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, compare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CompareResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CompareFeatureDB_args implements org.apache.thrift.TBase<CompareFeatureDB_args, CompareFeatureDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFeatureDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFeatureDB_args");

    private static final org.apache.thrift.protocol.TField DB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dbId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("feature", org.apache.thrift.protocol.TType.LIST, (short)3);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFeatureDB_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFeatureDB_argsTupleSchemeFactory();

    public java.lang.String dbId; // required
    public double threshold; // required
    public java.util.List<java.nio.ByteBuffer> feature; // required
    public int version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DB_ID((short)1, "dbId"),
      THRESHOLD((short)2, "threshold"),
      FEATURE((short)3, "feature"),
      VERSION((short)4, "version");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DB_ID
            return DB_ID;
          case 2: // THRESHOLD
            return THRESHOLD;
          case 3: // FEATURE
            return FEATURE;
          case 4: // VERSION
            return VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __THRESHOLD_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DB_ID, new org.apache.thrift.meta_data.FieldMetaData("dbId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.FEATURE, new org.apache.thrift.meta_data.FieldMetaData("feature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFeatureDB_args.class, metaDataMap);
    }

    public CompareFeatureDB_args() {
    }

    public CompareFeatureDB_args(
      java.lang.String dbId,
      double threshold,
      java.util.List<java.nio.ByteBuffer> feature,
      int version)
    {
      this();
      this.dbId = dbId;
      this.threshold = threshold;
      setThresholdIsSet(true);
      this.feature = feature;
      this.version = version;
      setVersionIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFeatureDB_args(CompareFeatureDB_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDbId()) {
        this.dbId = other.dbId;
      }
      this.threshold = other.threshold;
      if (other.isSetFeature()) {
        java.util.List<java.nio.ByteBuffer> __this__feature = new java.util.ArrayList<java.nio.ByteBuffer>(other.feature);
        this.feature = __this__feature;
      }
      this.version = other.version;
    }

    public CompareFeatureDB_args deepCopy() {
      return new CompareFeatureDB_args(this);
    }

    @Override
    public void clear() {
      this.dbId = null;
      setThresholdIsSet(false);
      this.threshold = 0.0;
      this.feature = null;
      setVersionIsSet(false);
      this.version = 0;
    }

    public java.lang.String getDbId() {
      return this.dbId;
    }

    public CompareFeatureDB_args setDbId(java.lang.String dbId) {
      this.dbId = dbId;
      return this;
    }

    public void unsetDbId() {
      this.dbId = null;
    }

    /** Returns true if field dbId is set (has been assigned a value) and false otherwise */
    public boolean isSetDbId() {
      return this.dbId != null;
    }

    public void setDbIdIsSet(boolean value) {
      if (!value) {
        this.dbId = null;
      }
    }

    public double getThreshold() {
      return this.threshold;
    }

    public CompareFeatureDB_args setThreshold(double threshold) {
      this.threshold = threshold;
      setThresholdIsSet(true);
      return this;
    }

    public void unsetThreshold() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    /** Returns true if field threshold is set (has been assigned a value) and false otherwise */
    public boolean isSetThreshold() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __THRESHOLD_ISSET_ID);
    }

    public void setThresholdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __THRESHOLD_ISSET_ID, value);
    }

    public int getFeatureSize() {
      return (this.feature == null) ? 0 : this.feature.size();
    }

    public java.util.Iterator<java.nio.ByteBuffer> getFeatureIterator() {
      return (this.feature == null) ? null : this.feature.iterator();
    }

    public void addToFeature(java.nio.ByteBuffer elem) {
      if (this.feature == null) {
        this.feature = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.feature.add(elem);
    }

    public java.util.List<java.nio.ByteBuffer> getFeature() {
      return this.feature;
    }

    public CompareFeatureDB_args setFeature(java.util.List<java.nio.ByteBuffer> feature) {
      this.feature = feature;
      return this;
    }

    public void unsetFeature() {
      this.feature = null;
    }

    /** Returns true if field feature is set (has been assigned a value) and false otherwise */
    public boolean isSetFeature() {
      return this.feature != null;
    }

    public void setFeatureIsSet(boolean value) {
      if (!value) {
        this.feature = null;
      }
    }

    public int getVersion() {
      return this.version;
    }

    public CompareFeatureDB_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DB_ID:
        if (value == null) {
          unsetDbId();
        } else {
          setDbId((java.lang.String)value);
        }
        break;

      case THRESHOLD:
        if (value == null) {
          unsetThreshold();
        } else {
          setThreshold((java.lang.Double)value);
        }
        break;

      case FEATURE:
        if (value == null) {
          unsetFeature();
        } else {
          setFeature((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DB_ID:
        return getDbId();

      case THRESHOLD:
        return getThreshold();

      case FEATURE:
        return getFeature();

      case VERSION:
        return getVersion();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DB_ID:
        return isSetDbId();
      case THRESHOLD:
        return isSetThreshold();
      case FEATURE:
        return isSetFeature();
      case VERSION:
        return isSetVersion();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFeatureDB_args)
        return this.equals((CompareFeatureDB_args)that);
      return false;
    }

    public boolean equals(CompareFeatureDB_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dbId = true && this.isSetDbId();
      boolean that_present_dbId = true && that.isSetDbId();
      if (this_present_dbId || that_present_dbId) {
        if (!(this_present_dbId && that_present_dbId))
          return false;
        if (!this.dbId.equals(that.dbId))
          return false;
      }

      boolean this_present_threshold = true;
      boolean that_present_threshold = true;
      if (this_present_threshold || that_present_threshold) {
        if (!(this_present_threshold && that_present_threshold))
          return false;
        if (this.threshold != that.threshold)
          return false;
      }

      boolean this_present_feature = true && this.isSetFeature();
      boolean that_present_feature = true && that.isSetFeature();
      if (this_present_feature || that_present_feature) {
        if (!(this_present_feature && that_present_feature))
          return false;
        if (!this.feature.equals(that.feature))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDbId()) ? 131071 : 524287);
      if (isSetDbId())
        hashCode = hashCode * 8191 + dbId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(threshold);

      hashCode = hashCode * 8191 + ((isSetFeature()) ? 131071 : 524287);
      if (isSetFeature())
        hashCode = hashCode * 8191 + feature.hashCode();

      hashCode = hashCode * 8191 + version;

      return hashCode;
    }

    @Override
    public int compareTo(CompareFeatureDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDbId()).compareTo(other.isSetDbId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDbId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dbId, other.dbId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetThreshold()).compareTo(other.isSetThreshold());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetThreshold()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.threshold, other.threshold);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeature()).compareTo(other.isSetFeature());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeature()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feature, other.feature);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFeatureDB_args(");
      boolean first = true;

      sb.append("dbId:");
      if (this.dbId == null) {
        sb.append("null");
      } else {
        sb.append(this.dbId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("threshold:");
      sb.append(this.threshold);
      first = false;
      if (!first) sb.append(", ");
      sb.append("feature:");
      if (this.feature == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.feature, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFeatureDB_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeatureDB_argsStandardScheme getScheme() {
        return new CompareFeatureDB_argsStandardScheme();
      }
    }

    private static class CompareFeatureDB_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFeatureDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFeatureDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dbId = iprot.readString();
                struct.setDbIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // THRESHOLD
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.threshold = iprot.readDouble();
                struct.setThresholdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FEATURE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.feature = new java.util.ArrayList<java.nio.ByteBuffer>(_list0.size);
                  java.nio.ByteBuffer _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readBinary();
                    struct.feature.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setFeatureIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFeatureDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dbId != null) {
          oprot.writeFieldBegin(DB_ID_FIELD_DESC);
          oprot.writeString(struct.dbId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(THRESHOLD_FIELD_DESC);
        oprot.writeDouble(struct.threshold);
        oprot.writeFieldEnd();
        if (struct.feature != null) {
          oprot.writeFieldBegin(FEATURE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.feature.size()));
            for (java.nio.ByteBuffer _iter3 : struct.feature)
            {
              oprot.writeBinary(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFeatureDB_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeatureDB_argsTupleScheme getScheme() {
        return new CompareFeatureDB_argsTupleScheme();
      }
    }

    private static class CompareFeatureDB_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFeatureDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFeatureDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDbId()) {
          optionals.set(0);
        }
        if (struct.isSetThreshold()) {
          optionals.set(1);
        }
        if (struct.isSetFeature()) {
          optionals.set(2);
        }
        if (struct.isSetVersion()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetDbId()) {
          oprot.writeString(struct.dbId);
        }
        if (struct.isSetThreshold()) {
          oprot.writeDouble(struct.threshold);
        }
        if (struct.isSetFeature()) {
          {
            oprot.writeI32(struct.feature.size());
            for (java.nio.ByteBuffer _iter4 : struct.feature)
            {
              oprot.writeBinary(_iter4);
            }
          }
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFeatureDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.dbId = iprot.readString();
          struct.setDbIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.threshold = iprot.readDouble();
          struct.setThresholdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.feature = new java.util.ArrayList<java.nio.ByteBuffer>(_list5.size);
            java.nio.ByteBuffer _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readBinary();
              struct.feature.add(_elem6);
            }
          }
          struct.setFeatureIsSet(true);
        }
        if (incoming.get(3)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class CompareFeatureDB_result implements org.apache.thrift.TBase<CompareFeatureDB_result, CompareFeatureDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<CompareFeatureDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompareFeatureDB_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CompareFeatureDB_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CompareFeatureDB_resultTupleSchemeFactory();

    public CompareFeatureDBResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT          , "CompareFeatureDBResult")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompareFeatureDB_result.class, metaDataMap);
    }

    public CompareFeatureDB_result() {
    }

    public CompareFeatureDB_result(
      CompareFeatureDBResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CompareFeatureDB_result(CompareFeatureDB_result other) {
      if (other.isSetSuccess()) {
        this.success = new CompareFeatureDBResult(other.success);
      }
    }

    public CompareFeatureDB_result deepCopy() {
      return new CompareFeatureDB_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CompareFeatureDBResult getSuccess() {
      return this.success;
    }

    public CompareFeatureDB_result setSuccess(CompareFeatureDBResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CompareFeatureDBResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof CompareFeatureDB_result)
        return this.equals((CompareFeatureDB_result)that);
      return false;
    }

    public boolean equals(CompareFeatureDB_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(CompareFeatureDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("CompareFeatureDB_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CompareFeatureDB_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeatureDB_resultStandardScheme getScheme() {
        return new CompareFeatureDB_resultStandardScheme();
      }
    }

    private static class CompareFeatureDB_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CompareFeatureDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CompareFeatureDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CompareFeatureDBResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CompareFeatureDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CompareFeatureDB_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public CompareFeatureDB_resultTupleScheme getScheme() {
        return new CompareFeatureDB_resultTupleScheme();
      }
    }

    private static class CompareFeatureDB_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CompareFeatureDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CompareFeatureDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CompareFeatureDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CompareFeatureDBResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

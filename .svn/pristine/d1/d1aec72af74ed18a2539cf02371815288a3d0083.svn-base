package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class CapNonmotorResult implements org.apache.thrift.TBase<CapNonmotorResult, CapNonmotorResult._Fields>, java.io.Serializable, Cloneable, Comparable<CapNonmotorResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CapNonmotorResult");

  private static final org.apache.thrift.protocol.TField ORIENTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("orientation", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CAR_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("carColor", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CAR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("carType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MOVE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("moveState", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField HAT_FIELD_DESC = new org.apache.thrift.protocol.TField("hat", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField GLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("glass", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MASK_FIELD_DESC = new org.apache.thrift.protocol.TField("mask", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField UPPER_CLOTHES_COLOR_FIELD_DESC = new org.apache.thrift.protocol.TField("upperClothesColor", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UPPER_CLOTHES_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("upperClothesType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField CAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("capType", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CAP_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("capLocation", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CAP_FEATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("capFeature", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CapNonmotorResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CapNonmotorResultTupleSchemeFactory();

  public int orientation; // required
  public int carColor; // required
  public int carType; // required
  public int moveState; // required
  public int sex; // required
  public int age; // required
  public int hat; // required
  public int glass; // required
  public int mask; // required
  public int upperClothesColor; // required
  public int upperClothesType; // required
  public int capType; // required
  public java.lang.String capLocation; // required
  public java.nio.ByteBuffer capFeature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORIENTATION((short)1, "orientation"),
    CAR_COLOR((short)2, "carColor"),
    CAR_TYPE((short)3, "carType"),
    MOVE_STATE((short)4, "moveState"),
    SEX((short)5, "sex"),
    AGE((short)6, "age"),
    HAT((short)7, "hat"),
    GLASS((short)8, "glass"),
    MASK((short)9, "mask"),
    UPPER_CLOTHES_COLOR((short)10, "upperClothesColor"),
    UPPER_CLOTHES_TYPE((short)11, "upperClothesType"),
    CAP_TYPE((short)12, "capType"),
    CAP_LOCATION((short)13, "capLocation"),
    CAP_FEATURE((short)14, "capFeature");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORIENTATION
          return ORIENTATION;
        case 2: // CAR_COLOR
          return CAR_COLOR;
        case 3: // CAR_TYPE
          return CAR_TYPE;
        case 4: // MOVE_STATE
          return MOVE_STATE;
        case 5: // SEX
          return SEX;
        case 6: // AGE
          return AGE;
        case 7: // HAT
          return HAT;
        case 8: // GLASS
          return GLASS;
        case 9: // MASK
          return MASK;
        case 10: // UPPER_CLOTHES_COLOR
          return UPPER_CLOTHES_COLOR;
        case 11: // UPPER_CLOTHES_TYPE
          return UPPER_CLOTHES_TYPE;
        case 12: // CAP_TYPE
          return CAP_TYPE;
        case 13: // CAP_LOCATION
          return CAP_LOCATION;
        case 14: // CAP_FEATURE
          return CAP_FEATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORIENTATION_ISSET_ID = 0;
  private static final int __CARCOLOR_ISSET_ID = 1;
  private static final int __CARTYPE_ISSET_ID = 2;
  private static final int __MOVESTATE_ISSET_ID = 3;
  private static final int __SEX_ISSET_ID = 4;
  private static final int __AGE_ISSET_ID = 5;
  private static final int __HAT_ISSET_ID = 6;
  private static final int __GLASS_ISSET_ID = 7;
  private static final int __MASK_ISSET_ID = 8;
  private static final int __UPPERCLOTHESCOLOR_ISSET_ID = 9;
  private static final int __UPPERCLOTHESTYPE_ISSET_ID = 10;
  private static final int __CAPTYPE_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORIENTATION, new org.apache.thrift.meta_data.FieldMetaData("orientation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_COLOR, new org.apache.thrift.meta_data.FieldMetaData("carColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("carType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MOVE_STATE, new org.apache.thrift.meta_data.FieldMetaData("moveState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HAT, new org.apache.thrift.meta_data.FieldMetaData("hat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GLASS, new org.apache.thrift.meta_data.FieldMetaData("glass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MASK, new org.apache.thrift.meta_data.FieldMetaData("mask", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPPER_CLOTHES_COLOR, new org.apache.thrift.meta_data.FieldMetaData("upperClothesColor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPPER_CLOTHES_TYPE, new org.apache.thrift.meta_data.FieldMetaData("upperClothesType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("capType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CAP_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("capLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CAP_FEATURE, new org.apache.thrift.meta_data.FieldMetaData("capFeature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CapNonmotorResult.class, metaDataMap);
  }

  public CapNonmotorResult() {
  }

  public CapNonmotorResult(
    int orientation,
    int carColor,
    int carType,
    int moveState,
    int sex,
    int age,
    int hat,
    int glass,
    int mask,
    int upperClothesColor,
    int upperClothesType,
    int capType,
    java.lang.String capLocation,
    java.nio.ByteBuffer capFeature)
  {
    this();
    this.orientation = orientation;
    setOrientationIsSet(true);
    this.carColor = carColor;
    setCarColorIsSet(true);
    this.carType = carType;
    setCarTypeIsSet(true);
    this.moveState = moveState;
    setMoveStateIsSet(true);
    this.sex = sex;
    setSexIsSet(true);
    this.age = age;
    setAgeIsSet(true);
    this.hat = hat;
    setHatIsSet(true);
    this.glass = glass;
    setGlassIsSet(true);
    this.mask = mask;
    setMaskIsSet(true);
    this.upperClothesColor = upperClothesColor;
    setUpperClothesColorIsSet(true);
    this.upperClothesType = upperClothesType;
    setUpperClothesTypeIsSet(true);
    this.capType = capType;
    setCapTypeIsSet(true);
    this.capLocation = capLocation;
    this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(capFeature);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CapNonmotorResult(CapNonmotorResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orientation = other.orientation;
    this.carColor = other.carColor;
    this.carType = other.carType;
    this.moveState = other.moveState;
    this.sex = other.sex;
    this.age = other.age;
    this.hat = other.hat;
    this.glass = other.glass;
    this.mask = other.mask;
    this.upperClothesColor = other.upperClothesColor;
    this.upperClothesType = other.upperClothesType;
    this.capType = other.capType;
    if (other.isSetCapLocation()) {
      this.capLocation = other.capLocation;
    }
    if (other.isSetCapFeature()) {
      this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(other.capFeature);
    }
  }

  public CapNonmotorResult deepCopy() {
    return new CapNonmotorResult(this);
  }

  @Override
  public void clear() {
    setOrientationIsSet(false);
    this.orientation = 0;
    setCarColorIsSet(false);
    this.carColor = 0;
    setCarTypeIsSet(false);
    this.carType = 0;
    setMoveStateIsSet(false);
    this.moveState = 0;
    setSexIsSet(false);
    this.sex = 0;
    setAgeIsSet(false);
    this.age = 0;
    setHatIsSet(false);
    this.hat = 0;
    setGlassIsSet(false);
    this.glass = 0;
    setMaskIsSet(false);
    this.mask = 0;
    setUpperClothesColorIsSet(false);
    this.upperClothesColor = 0;
    setUpperClothesTypeIsSet(false);
    this.upperClothesType = 0;
    setCapTypeIsSet(false);
    this.capType = 0;
    this.capLocation = null;
    this.capFeature = null;
  }

  public int getOrientation() {
    return this.orientation;
  }

  public CapNonmotorResult setOrientation(int orientation) {
    this.orientation = orientation;
    setOrientationIsSet(true);
    return this;
  }

  public void unsetOrientation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIENTATION_ISSET_ID);
  }

  /** Returns true if field orientation is set (has been assigned a value) and false otherwise */
  public boolean isSetOrientation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIENTATION_ISSET_ID);
  }

  public void setOrientationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIENTATION_ISSET_ID, value);
  }

  public int getCarColor() {
    return this.carColor;
  }

  public CapNonmotorResult setCarColor(int carColor) {
    this.carColor = carColor;
    setCarColorIsSet(true);
    return this;
  }

  public void unsetCarColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARCOLOR_ISSET_ID);
  }

  /** Returns true if field carColor is set (has been assigned a value) and false otherwise */
  public boolean isSetCarColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARCOLOR_ISSET_ID);
  }

  public void setCarColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARCOLOR_ISSET_ID, value);
  }

  public int getCarType() {
    return this.carType;
  }

  public CapNonmotorResult setCarType(int carType) {
    this.carType = carType;
    setCarTypeIsSet(true);
    return this;
  }

  public void unsetCarType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  /** Returns true if field carType is set (has been assigned a value) and false otherwise */
  public boolean isSetCarType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CARTYPE_ISSET_ID);
  }

  public void setCarTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CARTYPE_ISSET_ID, value);
  }

  public int getMoveState() {
    return this.moveState;
  }

  public CapNonmotorResult setMoveState(int moveState) {
    this.moveState = moveState;
    setMoveStateIsSet(true);
    return this;
  }

  public void unsetMoveState() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MOVESTATE_ISSET_ID);
  }

  /** Returns true if field moveState is set (has been assigned a value) and false otherwise */
  public boolean isSetMoveState() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MOVESTATE_ISSET_ID);
  }

  public void setMoveStateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MOVESTATE_ISSET_ID, value);
  }

  public int getSex() {
    return this.sex;
  }

  public CapNonmotorResult setSex(int sex) {
    this.sex = sex;
    setSexIsSet(true);
    return this;
  }

  public void unsetSex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEX_ISSET_ID);
  }

  public void setSexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEX_ISSET_ID, value);
  }

  public int getAge() {
    return this.age;
  }

  public CapNonmotorResult setAge(int age) {
    this.age = age;
    setAgeIsSet(true);
    return this;
  }

  public void unsetAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGE_ISSET_ID);
  }

  public void setAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGE_ISSET_ID, value);
  }

  public int getHat() {
    return this.hat;
  }

  public CapNonmotorResult setHat(int hat) {
    this.hat = hat;
    setHatIsSet(true);
    return this;
  }

  public void unsetHat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HAT_ISSET_ID);
  }

  /** Returns true if field hat is set (has been assigned a value) and false otherwise */
  public boolean isSetHat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HAT_ISSET_ID);
  }

  public void setHatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HAT_ISSET_ID, value);
  }

  public int getGlass() {
    return this.glass;
  }

  public CapNonmotorResult setGlass(int glass) {
    this.glass = glass;
    setGlassIsSet(true);
    return this;
  }

  public void unsetGlass() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GLASS_ISSET_ID);
  }

  /** Returns true if field glass is set (has been assigned a value) and false otherwise */
  public boolean isSetGlass() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GLASS_ISSET_ID);
  }

  public void setGlassIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GLASS_ISSET_ID, value);
  }

  public int getMask() {
    return this.mask;
  }

  public CapNonmotorResult setMask(int mask) {
    this.mask = mask;
    setMaskIsSet(true);
    return this;
  }

  public void unsetMask() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MASK_ISSET_ID);
  }

  /** Returns true if field mask is set (has been assigned a value) and false otherwise */
  public boolean isSetMask() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MASK_ISSET_ID);
  }

  public void setMaskIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MASK_ISSET_ID, value);
  }

  public int getUpperClothesColor() {
    return this.upperClothesColor;
  }

  public CapNonmotorResult setUpperClothesColor(int upperClothesColor) {
    this.upperClothesColor = upperClothesColor;
    setUpperClothesColorIsSet(true);
    return this;
  }

  public void unsetUpperClothesColor() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPPERCLOTHESCOLOR_ISSET_ID);
  }

  /** Returns true if field upperClothesColor is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperClothesColor() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPPERCLOTHESCOLOR_ISSET_ID);
  }

  public void setUpperClothesColorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPPERCLOTHESCOLOR_ISSET_ID, value);
  }

  public int getUpperClothesType() {
    return this.upperClothesType;
  }

  public CapNonmotorResult setUpperClothesType(int upperClothesType) {
    this.upperClothesType = upperClothesType;
    setUpperClothesTypeIsSet(true);
    return this;
  }

  public void unsetUpperClothesType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPPERCLOTHESTYPE_ISSET_ID);
  }

  /** Returns true if field upperClothesType is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperClothesType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPPERCLOTHESTYPE_ISSET_ID);
  }

  public void setUpperClothesTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPPERCLOTHESTYPE_ISSET_ID, value);
  }

  public int getCapType() {
    return this.capType;
  }

  public CapNonmotorResult setCapType(int capType) {
    this.capType = capType;
    setCapTypeIsSet(true);
    return this;
  }

  public void unsetCapType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAPTYPE_ISSET_ID);
  }

  /** Returns true if field capType is set (has been assigned a value) and false otherwise */
  public boolean isSetCapType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAPTYPE_ISSET_ID);
  }

  public void setCapTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAPTYPE_ISSET_ID, value);
  }

  public java.lang.String getCapLocation() {
    return this.capLocation;
  }

  public CapNonmotorResult setCapLocation(java.lang.String capLocation) {
    this.capLocation = capLocation;
    return this;
  }

  public void unsetCapLocation() {
    this.capLocation = null;
  }

  /** Returns true if field capLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetCapLocation() {
    return this.capLocation != null;
  }

  public void setCapLocationIsSet(boolean value) {
    if (!value) {
      this.capLocation = null;
    }
  }

  public byte[] getCapFeature() {
    setCapFeature(org.apache.thrift.TBaseHelper.rightSize(capFeature));
    return capFeature == null ? null : capFeature.array();
  }

  public java.nio.ByteBuffer bufferForCapFeature() {
    return org.apache.thrift.TBaseHelper.copyBinary(capFeature);
  }

  public CapNonmotorResult setCapFeature(byte[] capFeature) {
    this.capFeature = capFeature == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(capFeature.clone());
    return this;
  }

  public CapNonmotorResult setCapFeature(java.nio.ByteBuffer capFeature) {
    this.capFeature = org.apache.thrift.TBaseHelper.copyBinary(capFeature);
    return this;
  }

  public void unsetCapFeature() {
    this.capFeature = null;
  }

  /** Returns true if field capFeature is set (has been assigned a value) and false otherwise */
  public boolean isSetCapFeature() {
    return this.capFeature != null;
  }

  public void setCapFeatureIsSet(boolean value) {
    if (!value) {
      this.capFeature = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORIENTATION:
      if (value == null) {
        unsetOrientation();
      } else {
        setOrientation((java.lang.Integer)value);
      }
      break;

    case CAR_COLOR:
      if (value == null) {
        unsetCarColor();
      } else {
        setCarColor((java.lang.Integer)value);
      }
      break;

    case CAR_TYPE:
      if (value == null) {
        unsetCarType();
      } else {
        setCarType((java.lang.Integer)value);
      }
      break;

    case MOVE_STATE:
      if (value == null) {
        unsetMoveState();
      } else {
        setMoveState((java.lang.Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((java.lang.Integer)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((java.lang.Integer)value);
      }
      break;

    case HAT:
      if (value == null) {
        unsetHat();
      } else {
        setHat((java.lang.Integer)value);
      }
      break;

    case GLASS:
      if (value == null) {
        unsetGlass();
      } else {
        setGlass((java.lang.Integer)value);
      }
      break;

    case MASK:
      if (value == null) {
        unsetMask();
      } else {
        setMask((java.lang.Integer)value);
      }
      break;

    case UPPER_CLOTHES_COLOR:
      if (value == null) {
        unsetUpperClothesColor();
      } else {
        setUpperClothesColor((java.lang.Integer)value);
      }
      break;

    case UPPER_CLOTHES_TYPE:
      if (value == null) {
        unsetUpperClothesType();
      } else {
        setUpperClothesType((java.lang.Integer)value);
      }
      break;

    case CAP_TYPE:
      if (value == null) {
        unsetCapType();
      } else {
        setCapType((java.lang.Integer)value);
      }
      break;

    case CAP_LOCATION:
      if (value == null) {
        unsetCapLocation();
      } else {
        setCapLocation((java.lang.String)value);
      }
      break;

    case CAP_FEATURE:
      if (value == null) {
        unsetCapFeature();
      } else {
        if (value instanceof byte[]) {
          setCapFeature((byte[])value);
        } else {
          setCapFeature((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORIENTATION:
      return getOrientation();

    case CAR_COLOR:
      return getCarColor();

    case CAR_TYPE:
      return getCarType();

    case MOVE_STATE:
      return getMoveState();

    case SEX:
      return getSex();

    case AGE:
      return getAge();

    case HAT:
      return getHat();

    case GLASS:
      return getGlass();

    case MASK:
      return getMask();

    case UPPER_CLOTHES_COLOR:
      return getUpperClothesColor();

    case UPPER_CLOTHES_TYPE:
      return getUpperClothesType();

    case CAP_TYPE:
      return getCapType();

    case CAP_LOCATION:
      return getCapLocation();

    case CAP_FEATURE:
      return getCapFeature();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORIENTATION:
      return isSetOrientation();
    case CAR_COLOR:
      return isSetCarColor();
    case CAR_TYPE:
      return isSetCarType();
    case MOVE_STATE:
      return isSetMoveState();
    case SEX:
      return isSetSex();
    case AGE:
      return isSetAge();
    case HAT:
      return isSetHat();
    case GLASS:
      return isSetGlass();
    case MASK:
      return isSetMask();
    case UPPER_CLOTHES_COLOR:
      return isSetUpperClothesColor();
    case UPPER_CLOTHES_TYPE:
      return isSetUpperClothesType();
    case CAP_TYPE:
      return isSetCapType();
    case CAP_LOCATION:
      return isSetCapLocation();
    case CAP_FEATURE:
      return isSetCapFeature();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CapNonmotorResult)
      return this.equals((CapNonmotorResult)that);
    return false;
  }

  public boolean equals(CapNonmotorResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orientation = true;
    boolean that_present_orientation = true;
    if (this_present_orientation || that_present_orientation) {
      if (!(this_present_orientation && that_present_orientation))
        return false;
      if (this.orientation != that.orientation)
        return false;
    }

    boolean this_present_carColor = true;
    boolean that_present_carColor = true;
    if (this_present_carColor || that_present_carColor) {
      if (!(this_present_carColor && that_present_carColor))
        return false;
      if (this.carColor != that.carColor)
        return false;
    }

    boolean this_present_carType = true;
    boolean that_present_carType = true;
    if (this_present_carType || that_present_carType) {
      if (!(this_present_carType && that_present_carType))
        return false;
      if (this.carType != that.carType)
        return false;
    }

    boolean this_present_moveState = true;
    boolean that_present_moveState = true;
    if (this_present_moveState || that_present_moveState) {
      if (!(this_present_moveState && that_present_moveState))
        return false;
      if (this.moveState != that.moveState)
        return false;
    }

    boolean this_present_sex = true;
    boolean that_present_sex = true;
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (this.sex != that.sex)
        return false;
    }

    boolean this_present_age = true;
    boolean that_present_age = true;
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (this.age != that.age)
        return false;
    }

    boolean this_present_hat = true;
    boolean that_present_hat = true;
    if (this_present_hat || that_present_hat) {
      if (!(this_present_hat && that_present_hat))
        return false;
      if (this.hat != that.hat)
        return false;
    }

    boolean this_present_glass = true;
    boolean that_present_glass = true;
    if (this_present_glass || that_present_glass) {
      if (!(this_present_glass && that_present_glass))
        return false;
      if (this.glass != that.glass)
        return false;
    }

    boolean this_present_mask = true;
    boolean that_present_mask = true;
    if (this_present_mask || that_present_mask) {
      if (!(this_present_mask && that_present_mask))
        return false;
      if (this.mask != that.mask)
        return false;
    }

    boolean this_present_upperClothesColor = true;
    boolean that_present_upperClothesColor = true;
    if (this_present_upperClothesColor || that_present_upperClothesColor) {
      if (!(this_present_upperClothesColor && that_present_upperClothesColor))
        return false;
      if (this.upperClothesColor != that.upperClothesColor)
        return false;
    }

    boolean this_present_upperClothesType = true;
    boolean that_present_upperClothesType = true;
    if (this_present_upperClothesType || that_present_upperClothesType) {
      if (!(this_present_upperClothesType && that_present_upperClothesType))
        return false;
      if (this.upperClothesType != that.upperClothesType)
        return false;
    }

    boolean this_present_capType = true;
    boolean that_present_capType = true;
    if (this_present_capType || that_present_capType) {
      if (!(this_present_capType && that_present_capType))
        return false;
      if (this.capType != that.capType)
        return false;
    }

    boolean this_present_capLocation = true && this.isSetCapLocation();
    boolean that_present_capLocation = true && that.isSetCapLocation();
    if (this_present_capLocation || that_present_capLocation) {
      if (!(this_present_capLocation && that_present_capLocation))
        return false;
      if (!this.capLocation.equals(that.capLocation))
        return false;
    }

    boolean this_present_capFeature = true && this.isSetCapFeature();
    boolean that_present_capFeature = true && that.isSetCapFeature();
    if (this_present_capFeature || that_present_capFeature) {
      if (!(this_present_capFeature && that_present_capFeature))
        return false;
      if (!this.capFeature.equals(that.capFeature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + orientation;

    hashCode = hashCode * 8191 + carColor;

    hashCode = hashCode * 8191 + carType;

    hashCode = hashCode * 8191 + moveState;

    hashCode = hashCode * 8191 + sex;

    hashCode = hashCode * 8191 + age;

    hashCode = hashCode * 8191 + hat;

    hashCode = hashCode * 8191 + glass;

    hashCode = hashCode * 8191 + mask;

    hashCode = hashCode * 8191 + upperClothesColor;

    hashCode = hashCode * 8191 + upperClothesType;

    hashCode = hashCode * 8191 + capType;

    hashCode = hashCode * 8191 + ((isSetCapLocation()) ? 131071 : 524287);
    if (isSetCapLocation())
      hashCode = hashCode * 8191 + capLocation.hashCode();

    hashCode = hashCode * 8191 + ((isSetCapFeature()) ? 131071 : 524287);
    if (isSetCapFeature())
      hashCode = hashCode * 8191 + capFeature.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CapNonmotorResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrientation()).compareTo(other.isSetOrientation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrientation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orientation, other.orientation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarColor()).compareTo(other.isSetCarColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carColor, other.carColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCarType()).compareTo(other.isSetCarType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carType, other.carType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMoveState()).compareTo(other.isSetMoveState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoveState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moveState, other.moveState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHat()).compareTo(other.isSetHat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hat, other.hat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGlass()).compareTo(other.isSetGlass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.glass, other.glass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMask()).compareTo(other.isSetMask());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMask()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mask, other.mask);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpperClothesColor()).compareTo(other.isSetUpperClothesColor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperClothesColor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperClothesColor, other.upperClothesColor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUpperClothesType()).compareTo(other.isSetUpperClothesType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperClothesType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperClothesType, other.upperClothesType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapType()).compareTo(other.isSetCapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capType, other.capType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapLocation()).compareTo(other.isSetCapLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capLocation, other.capLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCapFeature()).compareTo(other.isSetCapFeature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCapFeature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.capFeature, other.capFeature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CapNonmotorResult(");
    boolean first = true;

    sb.append("orientation:");
    sb.append(this.orientation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carColor:");
    sb.append(this.carColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("carType:");
    sb.append(this.carType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moveState:");
    sb.append(this.moveState);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    sb.append(this.sex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    sb.append(this.age);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hat:");
    sb.append(this.hat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("glass:");
    sb.append(this.glass);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mask:");
    sb.append(this.mask);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upperClothesColor:");
    sb.append(this.upperClothesColor);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upperClothesType:");
    sb.append(this.upperClothesType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capType:");
    sb.append(this.capType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("capLocation:");
    if (this.capLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.capLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("capFeature:");
    if (this.capFeature == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.capFeature, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CapNonmotorResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapNonmotorResultStandardScheme getScheme() {
      return new CapNonmotorResultStandardScheme();
    }
  }

  private static class CapNonmotorResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CapNonmotorResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CapNonmotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORIENTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orientation = iprot.readI32();
              struct.setOrientationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CAR_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carColor = iprot.readI32();
              struct.setCarColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CAR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.carType = iprot.readI32();
              struct.setCarTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOVE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.moveState = iprot.readI32();
              struct.setMoveStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = iprot.readI32();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.age = iprot.readI32();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // HAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hat = iprot.readI32();
              struct.setHatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.glass = iprot.readI32();
              struct.setGlassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MASK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mask = iprot.readI32();
              struct.setMaskIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPPER_CLOTHES_COLOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upperClothesColor = iprot.readI32();
              struct.setUpperClothesColorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPPER_CLOTHES_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upperClothesType = iprot.readI32();
              struct.setUpperClothesTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.capType = iprot.readI32();
              struct.setCapTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CAP_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capLocation = iprot.readString();
              struct.setCapLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CAP_FEATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.capFeature = iprot.readBinary();
              struct.setCapFeatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CapNonmotorResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ORIENTATION_FIELD_DESC);
      oprot.writeI32(struct.orientation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_COLOR_FIELD_DESC);
      oprot.writeI32(struct.carColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAR_TYPE_FIELD_DESC);
      oprot.writeI32(struct.carType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MOVE_STATE_FIELD_DESC);
      oprot.writeI32(struct.moveState);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEX_FIELD_DESC);
      oprot.writeI32(struct.sex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGE_FIELD_DESC);
      oprot.writeI32(struct.age);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAT_FIELD_DESC);
      oprot.writeI32(struct.hat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GLASS_FIELD_DESC);
      oprot.writeI32(struct.glass);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MASK_FIELD_DESC);
      oprot.writeI32(struct.mask);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPPER_CLOTHES_COLOR_FIELD_DESC);
      oprot.writeI32(struct.upperClothesColor);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPPER_CLOTHES_TYPE_FIELD_DESC);
      oprot.writeI32(struct.upperClothesType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_TYPE_FIELD_DESC);
      oprot.writeI32(struct.capType);
      oprot.writeFieldEnd();
      if (struct.capLocation != null) {
        oprot.writeFieldBegin(CAP_LOCATION_FIELD_DESC);
        oprot.writeString(struct.capLocation);
        oprot.writeFieldEnd();
      }
      if (struct.capFeature != null) {
        oprot.writeFieldBegin(CAP_FEATURE_FIELD_DESC);
        oprot.writeBinary(struct.capFeature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CapNonmotorResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapNonmotorResultTupleScheme getScheme() {
      return new CapNonmotorResultTupleScheme();
    }
  }

  private static class CapNonmotorResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CapNonmotorResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CapNonmotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrientation()) {
        optionals.set(0);
      }
      if (struct.isSetCarColor()) {
        optionals.set(1);
      }
      if (struct.isSetCarType()) {
        optionals.set(2);
      }
      if (struct.isSetMoveState()) {
        optionals.set(3);
      }
      if (struct.isSetSex()) {
        optionals.set(4);
      }
      if (struct.isSetAge()) {
        optionals.set(5);
      }
      if (struct.isSetHat()) {
        optionals.set(6);
      }
      if (struct.isSetGlass()) {
        optionals.set(7);
      }
      if (struct.isSetMask()) {
        optionals.set(8);
      }
      if (struct.isSetUpperClothesColor()) {
        optionals.set(9);
      }
      if (struct.isSetUpperClothesType()) {
        optionals.set(10);
      }
      if (struct.isSetCapType()) {
        optionals.set(11);
      }
      if (struct.isSetCapLocation()) {
        optionals.set(12);
      }
      if (struct.isSetCapFeature()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetOrientation()) {
        oprot.writeI32(struct.orientation);
      }
      if (struct.isSetCarColor()) {
        oprot.writeI32(struct.carColor);
      }
      if (struct.isSetCarType()) {
        oprot.writeI32(struct.carType);
      }
      if (struct.isSetMoveState()) {
        oprot.writeI32(struct.moveState);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex);
      }
      if (struct.isSetAge()) {
        oprot.writeI32(struct.age);
      }
      if (struct.isSetHat()) {
        oprot.writeI32(struct.hat);
      }
      if (struct.isSetGlass()) {
        oprot.writeI32(struct.glass);
      }
      if (struct.isSetMask()) {
        oprot.writeI32(struct.mask);
      }
      if (struct.isSetUpperClothesColor()) {
        oprot.writeI32(struct.upperClothesColor);
      }
      if (struct.isSetUpperClothesType()) {
        oprot.writeI32(struct.upperClothesType);
      }
      if (struct.isSetCapType()) {
        oprot.writeI32(struct.capType);
      }
      if (struct.isSetCapLocation()) {
        oprot.writeString(struct.capLocation);
      }
      if (struct.isSetCapFeature()) {
        oprot.writeBinary(struct.capFeature);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CapNonmotorResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.orientation = iprot.readI32();
        struct.setOrientationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.carColor = iprot.readI32();
        struct.setCarColorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.carType = iprot.readI32();
        struct.setCarTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.moveState = iprot.readI32();
        struct.setMoveStateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sex = iprot.readI32();
        struct.setSexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.age = iprot.readI32();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.hat = iprot.readI32();
        struct.setHatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.glass = iprot.readI32();
        struct.setGlassIsSet(true);
      }
      if (incoming.get(8)) {
        struct.mask = iprot.readI32();
        struct.setMaskIsSet(true);
      }
      if (incoming.get(9)) {
        struct.upperClothesColor = iprot.readI32();
        struct.setUpperClothesColorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.upperClothesType = iprot.readI32();
        struct.setUpperClothesTypeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.capType = iprot.readI32();
        struct.setCapTypeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.capLocation = iprot.readString();
        struct.setCapLocationIsSet(true);
      }
      if (incoming.get(13)) {
        struct.capFeature = iprot.readBinary();
        struct.setCapFeatureIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class CapFaceDetectResult implements org.apache.thrift.TBase<CapFaceDetectResult, CapFaceDetectResult._Fields>, java.io.Serializable, Cloneable, Comparable<CapFaceDetectResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CapFaceDetectResult");

  private static final org.apache.thrift.protocol.TField RC_FACE_FIELD_DESC = new org.apache.thrift.protocol.TField("rcFace", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PT_LEFT_EYE_FIELD_DESC = new org.apache.thrift.protocol.TField("ptLeftEye", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PT_RIGHT_EYE_FIELD_DESC = new org.apache.thrift.protocol.TField("ptRightEye", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField PT_MOUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("ptMouth", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField PT_NOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("ptNose", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField I_YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("iYaw", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField I_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("iPitch", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField I_ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("iRoll", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField I_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("iQuality", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField I_GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("iGender", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField I_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("iAge", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField STR_SDK_VER_FIELD_DESC = new org.apache.thrift.protocol.TField("strSdkVer", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BIN_FEA_FIELD_DESC = new org.apache.thrift.protocol.TField("binFea", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField BIN_IMG_FIELD_DESC = new org.apache.thrift.protocol.TField("binImg", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CapFaceDetectResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CapFaceDetectResultTupleSchemeFactory();

  public CapRECT rcFace; // required
  public CapPOINT ptLeftEye; // required
  public CapPOINT ptRightEye; // required
  public CapPOINT ptMouth; // required
  public CapPOINT ptNose; // required
  public int iYaw; // required
  public int iPitch; // required
  public int iRoll; // required
  public int iQuality; // required
  public int iGender; // required
  public int iAge; // required
  public java.lang.String strSdkVer; // required
  public java.nio.ByteBuffer binFea; // required
  public java.nio.ByteBuffer binImg; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RC_FACE((short)1, "rcFace"),
    PT_LEFT_EYE((short)2, "ptLeftEye"),
    PT_RIGHT_EYE((short)3, "ptRightEye"),
    PT_MOUTH((short)4, "ptMouth"),
    PT_NOSE((short)5, "ptNose"),
    I_YAW((short)6, "iYaw"),
    I_PITCH((short)7, "iPitch"),
    I_ROLL((short)8, "iRoll"),
    I_QUALITY((short)9, "iQuality"),
    I_GENDER((short)10, "iGender"),
    I_AGE((short)11, "iAge"),
    STR_SDK_VER((short)13, "strSdkVer"),
    BIN_FEA((short)14, "binFea"),
    BIN_IMG((short)15, "binImg");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RC_FACE
          return RC_FACE;
        case 2: // PT_LEFT_EYE
          return PT_LEFT_EYE;
        case 3: // PT_RIGHT_EYE
          return PT_RIGHT_EYE;
        case 4: // PT_MOUTH
          return PT_MOUTH;
        case 5: // PT_NOSE
          return PT_NOSE;
        case 6: // I_YAW
          return I_YAW;
        case 7: // I_PITCH
          return I_PITCH;
        case 8: // I_ROLL
          return I_ROLL;
        case 9: // I_QUALITY
          return I_QUALITY;
        case 10: // I_GENDER
          return I_GENDER;
        case 11: // I_AGE
          return I_AGE;
        case 13: // STR_SDK_VER
          return STR_SDK_VER;
        case 14: // BIN_FEA
          return BIN_FEA;
        case 15: // BIN_IMG
          return BIN_IMG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IYAW_ISSET_ID = 0;
  private static final int __IPITCH_ISSET_ID = 1;
  private static final int __IROLL_ISSET_ID = 2;
  private static final int __IQUALITY_ISSET_ID = 3;
  private static final int __IGENDER_ISSET_ID = 4;
  private static final int __IAGE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RC_FACE, new org.apache.thrift.meta_data.FieldMetaData("rcFace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapRECT.class)));
    tmpMap.put(_Fields.PT_LEFT_EYE, new org.apache.thrift.meta_data.FieldMetaData("ptLeftEye", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapPOINT.class)));
    tmpMap.put(_Fields.PT_RIGHT_EYE, new org.apache.thrift.meta_data.FieldMetaData("ptRightEye", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapPOINT.class)));
    tmpMap.put(_Fields.PT_MOUTH, new org.apache.thrift.meta_data.FieldMetaData("ptMouth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapPOINT.class)));
    tmpMap.put(_Fields.PT_NOSE, new org.apache.thrift.meta_data.FieldMetaData("ptNose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapPOINT.class)));
    tmpMap.put(_Fields.I_YAW, new org.apache.thrift.meta_data.FieldMetaData("iYaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_PITCH, new org.apache.thrift.meta_data.FieldMetaData("iPitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_ROLL, new org.apache.thrift.meta_data.FieldMetaData("iRoll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("iQuality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_GENDER, new org.apache.thrift.meta_data.FieldMetaData("iGender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I_AGE, new org.apache.thrift.meta_data.FieldMetaData("iAge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STR_SDK_VER, new org.apache.thrift.meta_data.FieldMetaData("strSdkVer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIN_FEA, new org.apache.thrift.meta_data.FieldMetaData("binFea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BIN_IMG, new org.apache.thrift.meta_data.FieldMetaData("binImg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CapFaceDetectResult.class, metaDataMap);
  }

  public CapFaceDetectResult() {
  }

  public CapFaceDetectResult(
    CapRECT rcFace,
    CapPOINT ptLeftEye,
    CapPOINT ptRightEye,
    CapPOINT ptMouth,
    CapPOINT ptNose,
    int iYaw,
    int iPitch,
    int iRoll,
    int iQuality,
    int iGender,
    int iAge,
    java.lang.String strSdkVer,
    java.nio.ByteBuffer binFea,
    java.nio.ByteBuffer binImg)
  {
    this();
    this.rcFace = rcFace;
    this.ptLeftEye = ptLeftEye;
    this.ptRightEye = ptRightEye;
    this.ptMouth = ptMouth;
    this.ptNose = ptNose;
    this.iYaw = iYaw;
    setIYawIsSet(true);
    this.iPitch = iPitch;
    setIPitchIsSet(true);
    this.iRoll = iRoll;
    setIRollIsSet(true);
    this.iQuality = iQuality;
    setIQualityIsSet(true);
    this.iGender = iGender;
    setIGenderIsSet(true);
    this.iAge = iAge;
    setIAgeIsSet(true);
    this.strSdkVer = strSdkVer;
    this.binFea = org.apache.thrift.TBaseHelper.copyBinary(binFea);
    this.binImg = org.apache.thrift.TBaseHelper.copyBinary(binImg);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CapFaceDetectResult(CapFaceDetectResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRcFace()) {
      this.rcFace = new CapRECT(other.rcFace);
    }
    if (other.isSetPtLeftEye()) {
      this.ptLeftEye = new CapPOINT(other.ptLeftEye);
    }
    if (other.isSetPtRightEye()) {
      this.ptRightEye = new CapPOINT(other.ptRightEye);
    }
    if (other.isSetPtMouth()) {
      this.ptMouth = new CapPOINT(other.ptMouth);
    }
    if (other.isSetPtNose()) {
      this.ptNose = new CapPOINT(other.ptNose);
    }
    this.iYaw = other.iYaw;
    this.iPitch = other.iPitch;
    this.iRoll = other.iRoll;
    this.iQuality = other.iQuality;
    this.iGender = other.iGender;
    this.iAge = other.iAge;
    if (other.isSetStrSdkVer()) {
      this.strSdkVer = other.strSdkVer;
    }
    if (other.isSetBinFea()) {
      this.binFea = org.apache.thrift.TBaseHelper.copyBinary(other.binFea);
    }
    if (other.isSetBinImg()) {
      this.binImg = org.apache.thrift.TBaseHelper.copyBinary(other.binImg);
    }
  }

  public CapFaceDetectResult deepCopy() {
    return new CapFaceDetectResult(this);
  }

  @Override
  public void clear() {
    this.rcFace = null;
    this.ptLeftEye = null;
    this.ptRightEye = null;
    this.ptMouth = null;
    this.ptNose = null;
    setIYawIsSet(false);
    this.iYaw = 0;
    setIPitchIsSet(false);
    this.iPitch = 0;
    setIRollIsSet(false);
    this.iRoll = 0;
    setIQualityIsSet(false);
    this.iQuality = 0;
    setIGenderIsSet(false);
    this.iGender = 0;
    setIAgeIsSet(false);
    this.iAge = 0;
    this.strSdkVer = null;
    this.binFea = null;
    this.binImg = null;
  }

  public CapRECT getRcFace() {
    return this.rcFace;
  }

  public CapFaceDetectResult setRcFace(CapRECT rcFace) {
    this.rcFace = rcFace;
    return this;
  }

  public void unsetRcFace() {
    this.rcFace = null;
  }

  /** Returns true if field rcFace is set (has been assigned a value) and false otherwise */
  public boolean isSetRcFace() {
    return this.rcFace != null;
  }

  public void setRcFaceIsSet(boolean value) {
    if (!value) {
      this.rcFace = null;
    }
  }

  public CapPOINT getPtLeftEye() {
    return this.ptLeftEye;
  }

  public CapFaceDetectResult setPtLeftEye(CapPOINT ptLeftEye) {
    this.ptLeftEye = ptLeftEye;
    return this;
  }

  public void unsetPtLeftEye() {
    this.ptLeftEye = null;
  }

  /** Returns true if field ptLeftEye is set (has been assigned a value) and false otherwise */
  public boolean isSetPtLeftEye() {
    return this.ptLeftEye != null;
  }

  public void setPtLeftEyeIsSet(boolean value) {
    if (!value) {
      this.ptLeftEye = null;
    }
  }

  public CapPOINT getPtRightEye() {
    return this.ptRightEye;
  }

  public CapFaceDetectResult setPtRightEye(CapPOINT ptRightEye) {
    this.ptRightEye = ptRightEye;
    return this;
  }

  public void unsetPtRightEye() {
    this.ptRightEye = null;
  }

  /** Returns true if field ptRightEye is set (has been assigned a value) and false otherwise */
  public boolean isSetPtRightEye() {
    return this.ptRightEye != null;
  }

  public void setPtRightEyeIsSet(boolean value) {
    if (!value) {
      this.ptRightEye = null;
    }
  }

  public CapPOINT getPtMouth() {
    return this.ptMouth;
  }

  public CapFaceDetectResult setPtMouth(CapPOINT ptMouth) {
    this.ptMouth = ptMouth;
    return this;
  }

  public void unsetPtMouth() {
    this.ptMouth = null;
  }

  /** Returns true if field ptMouth is set (has been assigned a value) and false otherwise */
  public boolean isSetPtMouth() {
    return this.ptMouth != null;
  }

  public void setPtMouthIsSet(boolean value) {
    if (!value) {
      this.ptMouth = null;
    }
  }

  public CapPOINT getPtNose() {
    return this.ptNose;
  }

  public CapFaceDetectResult setPtNose(CapPOINT ptNose) {
    this.ptNose = ptNose;
    return this;
  }

  public void unsetPtNose() {
    this.ptNose = null;
  }

  /** Returns true if field ptNose is set (has been assigned a value) and false otherwise */
  public boolean isSetPtNose() {
    return this.ptNose != null;
  }

  public void setPtNoseIsSet(boolean value) {
    if (!value) {
      this.ptNose = null;
    }
  }

  public int getIYaw() {
    return this.iYaw;
  }

  public CapFaceDetectResult setIYaw(int iYaw) {
    this.iYaw = iYaw;
    setIYawIsSet(true);
    return this;
  }

  public void unsetIYaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IYAW_ISSET_ID);
  }

  /** Returns true if field iYaw is set (has been assigned a value) and false otherwise */
  public boolean isSetIYaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IYAW_ISSET_ID);
  }

  public void setIYawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IYAW_ISSET_ID, value);
  }

  public int getIPitch() {
    return this.iPitch;
  }

  public CapFaceDetectResult setIPitch(int iPitch) {
    this.iPitch = iPitch;
    setIPitchIsSet(true);
    return this;
  }

  public void unsetIPitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IPITCH_ISSET_ID);
  }

  /** Returns true if field iPitch is set (has been assigned a value) and false otherwise */
  public boolean isSetIPitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IPITCH_ISSET_ID);
  }

  public void setIPitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IPITCH_ISSET_ID, value);
  }

  public int getIRoll() {
    return this.iRoll;
  }

  public CapFaceDetectResult setIRoll(int iRoll) {
    this.iRoll = iRoll;
    setIRollIsSet(true);
    return this;
  }

  public void unsetIRoll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IROLL_ISSET_ID);
  }

  /** Returns true if field iRoll is set (has been assigned a value) and false otherwise */
  public boolean isSetIRoll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IROLL_ISSET_ID);
  }

  public void setIRollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IROLL_ISSET_ID, value);
  }

  public int getIQuality() {
    return this.iQuality;
  }

  public CapFaceDetectResult setIQuality(int iQuality) {
    this.iQuality = iQuality;
    setIQualityIsSet(true);
    return this;
  }

  public void unsetIQuality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IQUALITY_ISSET_ID);
  }

  /** Returns true if field iQuality is set (has been assigned a value) and false otherwise */
  public boolean isSetIQuality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IQUALITY_ISSET_ID);
  }

  public void setIQualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IQUALITY_ISSET_ID, value);
  }

  public int getIGender() {
    return this.iGender;
  }

  public CapFaceDetectResult setIGender(int iGender) {
    this.iGender = iGender;
    setIGenderIsSet(true);
    return this;
  }

  public void unsetIGender() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGENDER_ISSET_ID);
  }

  /** Returns true if field iGender is set (has been assigned a value) and false otherwise */
  public boolean isSetIGender() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGENDER_ISSET_ID);
  }

  public void setIGenderIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGENDER_ISSET_ID, value);
  }

  public int getIAge() {
    return this.iAge;
  }

  public CapFaceDetectResult setIAge(int iAge) {
    this.iAge = iAge;
    setIAgeIsSet(true);
    return this;
  }

  public void unsetIAge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IAGE_ISSET_ID);
  }

  /** Returns true if field iAge is set (has been assigned a value) and false otherwise */
  public boolean isSetIAge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IAGE_ISSET_ID);
  }

  public void setIAgeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IAGE_ISSET_ID, value);
  }

  public java.lang.String getStrSdkVer() {
    return this.strSdkVer;
  }

  public CapFaceDetectResult setStrSdkVer(java.lang.String strSdkVer) {
    this.strSdkVer = strSdkVer;
    return this;
  }

  public void unsetStrSdkVer() {
    this.strSdkVer = null;
  }

  /** Returns true if field strSdkVer is set (has been assigned a value) and false otherwise */
  public boolean isSetStrSdkVer() {
    return this.strSdkVer != null;
  }

  public void setStrSdkVerIsSet(boolean value) {
    if (!value) {
      this.strSdkVer = null;
    }
  }

  public byte[] getBinFea() {
    setBinFea(org.apache.thrift.TBaseHelper.rightSize(binFea));
    return binFea == null ? null : binFea.array();
  }

  public java.nio.ByteBuffer bufferForBinFea() {
    return org.apache.thrift.TBaseHelper.copyBinary(binFea);
  }

  public CapFaceDetectResult setBinFea(byte[] binFea) {
    this.binFea = binFea == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(binFea.clone());
    return this;
  }

  public CapFaceDetectResult setBinFea(java.nio.ByteBuffer binFea) {
    this.binFea = org.apache.thrift.TBaseHelper.copyBinary(binFea);
    return this;
  }

  public void unsetBinFea() {
    this.binFea = null;
  }

  /** Returns true if field binFea is set (has been assigned a value) and false otherwise */
  public boolean isSetBinFea() {
    return this.binFea != null;
  }

  public void setBinFeaIsSet(boolean value) {
    if (!value) {
      this.binFea = null;
    }
  }

  public byte[] getBinImg() {
    setBinImg(org.apache.thrift.TBaseHelper.rightSize(binImg));
    return binImg == null ? null : binImg.array();
  }

  public java.nio.ByteBuffer bufferForBinImg() {
    return org.apache.thrift.TBaseHelper.copyBinary(binImg);
  }

  public CapFaceDetectResult setBinImg(byte[] binImg) {
    this.binImg = binImg == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(binImg.clone());
    return this;
  }

  public CapFaceDetectResult setBinImg(java.nio.ByteBuffer binImg) {
    this.binImg = org.apache.thrift.TBaseHelper.copyBinary(binImg);
    return this;
  }

  public void unsetBinImg() {
    this.binImg = null;
  }

  /** Returns true if field binImg is set (has been assigned a value) and false otherwise */
  public boolean isSetBinImg() {
    return this.binImg != null;
  }

  public void setBinImgIsSet(boolean value) {
    if (!value) {
      this.binImg = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RC_FACE:
      if (value == null) {
        unsetRcFace();
      } else {
        setRcFace((CapRECT)value);
      }
      break;

    case PT_LEFT_EYE:
      if (value == null) {
        unsetPtLeftEye();
      } else {
        setPtLeftEye((CapPOINT)value);
      }
      break;

    case PT_RIGHT_EYE:
      if (value == null) {
        unsetPtRightEye();
      } else {
        setPtRightEye((CapPOINT)value);
      }
      break;

    case PT_MOUTH:
      if (value == null) {
        unsetPtMouth();
      } else {
        setPtMouth((CapPOINT)value);
      }
      break;

    case PT_NOSE:
      if (value == null) {
        unsetPtNose();
      } else {
        setPtNose((CapPOINT)value);
      }
      break;

    case I_YAW:
      if (value == null) {
        unsetIYaw();
      } else {
        setIYaw((java.lang.Integer)value);
      }
      break;

    case I_PITCH:
      if (value == null) {
        unsetIPitch();
      } else {
        setIPitch((java.lang.Integer)value);
      }
      break;

    case I_ROLL:
      if (value == null) {
        unsetIRoll();
      } else {
        setIRoll((java.lang.Integer)value);
      }
      break;

    case I_QUALITY:
      if (value == null) {
        unsetIQuality();
      } else {
        setIQuality((java.lang.Integer)value);
      }
      break;

    case I_GENDER:
      if (value == null) {
        unsetIGender();
      } else {
        setIGender((java.lang.Integer)value);
      }
      break;

    case I_AGE:
      if (value == null) {
        unsetIAge();
      } else {
        setIAge((java.lang.Integer)value);
      }
      break;

    case STR_SDK_VER:
      if (value == null) {
        unsetStrSdkVer();
      } else {
        setStrSdkVer((java.lang.String)value);
      }
      break;

    case BIN_FEA:
      if (value == null) {
        unsetBinFea();
      } else {
        if (value instanceof byte[]) {
          setBinFea((byte[])value);
        } else {
          setBinFea((java.nio.ByteBuffer)value);
        }
      }
      break;

    case BIN_IMG:
      if (value == null) {
        unsetBinImg();
      } else {
        if (value instanceof byte[]) {
          setBinImg((byte[])value);
        } else {
          setBinImg((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RC_FACE:
      return getRcFace();

    case PT_LEFT_EYE:
      return getPtLeftEye();

    case PT_RIGHT_EYE:
      return getPtRightEye();

    case PT_MOUTH:
      return getPtMouth();

    case PT_NOSE:
      return getPtNose();

    case I_YAW:
      return getIYaw();

    case I_PITCH:
      return getIPitch();

    case I_ROLL:
      return getIRoll();

    case I_QUALITY:
      return getIQuality();

    case I_GENDER:
      return getIGender();

    case I_AGE:
      return getIAge();

    case STR_SDK_VER:
      return getStrSdkVer();

    case BIN_FEA:
      return getBinFea();

    case BIN_IMG:
      return getBinImg();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RC_FACE:
      return isSetRcFace();
    case PT_LEFT_EYE:
      return isSetPtLeftEye();
    case PT_RIGHT_EYE:
      return isSetPtRightEye();
    case PT_MOUTH:
      return isSetPtMouth();
    case PT_NOSE:
      return isSetPtNose();
    case I_YAW:
      return isSetIYaw();
    case I_PITCH:
      return isSetIPitch();
    case I_ROLL:
      return isSetIRoll();
    case I_QUALITY:
      return isSetIQuality();
    case I_GENDER:
      return isSetIGender();
    case I_AGE:
      return isSetIAge();
    case STR_SDK_VER:
      return isSetStrSdkVer();
    case BIN_FEA:
      return isSetBinFea();
    case BIN_IMG:
      return isSetBinImg();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CapFaceDetectResult)
      return this.equals((CapFaceDetectResult)that);
    return false;
  }

  public boolean equals(CapFaceDetectResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rcFace = true && this.isSetRcFace();
    boolean that_present_rcFace = true && that.isSetRcFace();
    if (this_present_rcFace || that_present_rcFace) {
      if (!(this_present_rcFace && that_present_rcFace))
        return false;
      if (!this.rcFace.equals(that.rcFace))
        return false;
    }

    boolean this_present_ptLeftEye = true && this.isSetPtLeftEye();
    boolean that_present_ptLeftEye = true && that.isSetPtLeftEye();
    if (this_present_ptLeftEye || that_present_ptLeftEye) {
      if (!(this_present_ptLeftEye && that_present_ptLeftEye))
        return false;
      if (!this.ptLeftEye.equals(that.ptLeftEye))
        return false;
    }

    boolean this_present_ptRightEye = true && this.isSetPtRightEye();
    boolean that_present_ptRightEye = true && that.isSetPtRightEye();
    if (this_present_ptRightEye || that_present_ptRightEye) {
      if (!(this_present_ptRightEye && that_present_ptRightEye))
        return false;
      if (!this.ptRightEye.equals(that.ptRightEye))
        return false;
    }

    boolean this_present_ptMouth = true && this.isSetPtMouth();
    boolean that_present_ptMouth = true && that.isSetPtMouth();
    if (this_present_ptMouth || that_present_ptMouth) {
      if (!(this_present_ptMouth && that_present_ptMouth))
        return false;
      if (!this.ptMouth.equals(that.ptMouth))
        return false;
    }

    boolean this_present_ptNose = true && this.isSetPtNose();
    boolean that_present_ptNose = true && that.isSetPtNose();
    if (this_present_ptNose || that_present_ptNose) {
      if (!(this_present_ptNose && that_present_ptNose))
        return false;
      if (!this.ptNose.equals(that.ptNose))
        return false;
    }

    boolean this_present_iYaw = true;
    boolean that_present_iYaw = true;
    if (this_present_iYaw || that_present_iYaw) {
      if (!(this_present_iYaw && that_present_iYaw))
        return false;
      if (this.iYaw != that.iYaw)
        return false;
    }

    boolean this_present_iPitch = true;
    boolean that_present_iPitch = true;
    if (this_present_iPitch || that_present_iPitch) {
      if (!(this_present_iPitch && that_present_iPitch))
        return false;
      if (this.iPitch != that.iPitch)
        return false;
    }

    boolean this_present_iRoll = true;
    boolean that_present_iRoll = true;
    if (this_present_iRoll || that_present_iRoll) {
      if (!(this_present_iRoll && that_present_iRoll))
        return false;
      if (this.iRoll != that.iRoll)
        return false;
    }

    boolean this_present_iQuality = true;
    boolean that_present_iQuality = true;
    if (this_present_iQuality || that_present_iQuality) {
      if (!(this_present_iQuality && that_present_iQuality))
        return false;
      if (this.iQuality != that.iQuality)
        return false;
    }

    boolean this_present_iGender = true;
    boolean that_present_iGender = true;
    if (this_present_iGender || that_present_iGender) {
      if (!(this_present_iGender && that_present_iGender))
        return false;
      if (this.iGender != that.iGender)
        return false;
    }

    boolean this_present_iAge = true;
    boolean that_present_iAge = true;
    if (this_present_iAge || that_present_iAge) {
      if (!(this_present_iAge && that_present_iAge))
        return false;
      if (this.iAge != that.iAge)
        return false;
    }

    boolean this_present_strSdkVer = true && this.isSetStrSdkVer();
    boolean that_present_strSdkVer = true && that.isSetStrSdkVer();
    if (this_present_strSdkVer || that_present_strSdkVer) {
      if (!(this_present_strSdkVer && that_present_strSdkVer))
        return false;
      if (!this.strSdkVer.equals(that.strSdkVer))
        return false;
    }

    boolean this_present_binFea = true && this.isSetBinFea();
    boolean that_present_binFea = true && that.isSetBinFea();
    if (this_present_binFea || that_present_binFea) {
      if (!(this_present_binFea && that_present_binFea))
        return false;
      if (!this.binFea.equals(that.binFea))
        return false;
    }

    boolean this_present_binImg = true && this.isSetBinImg();
    boolean that_present_binImg = true && that.isSetBinImg();
    if (this_present_binImg || that_present_binImg) {
      if (!(this_present_binImg && that_present_binImg))
        return false;
      if (!this.binImg.equals(that.binImg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRcFace()) ? 131071 : 524287);
    if (isSetRcFace())
      hashCode = hashCode * 8191 + rcFace.hashCode();

    hashCode = hashCode * 8191 + ((isSetPtLeftEye()) ? 131071 : 524287);
    if (isSetPtLeftEye())
      hashCode = hashCode * 8191 + ptLeftEye.hashCode();

    hashCode = hashCode * 8191 + ((isSetPtRightEye()) ? 131071 : 524287);
    if (isSetPtRightEye())
      hashCode = hashCode * 8191 + ptRightEye.hashCode();

    hashCode = hashCode * 8191 + ((isSetPtMouth()) ? 131071 : 524287);
    if (isSetPtMouth())
      hashCode = hashCode * 8191 + ptMouth.hashCode();

    hashCode = hashCode * 8191 + ((isSetPtNose()) ? 131071 : 524287);
    if (isSetPtNose())
      hashCode = hashCode * 8191 + ptNose.hashCode();

    hashCode = hashCode * 8191 + iYaw;

    hashCode = hashCode * 8191 + iPitch;

    hashCode = hashCode * 8191 + iRoll;

    hashCode = hashCode * 8191 + iQuality;

    hashCode = hashCode * 8191 + iGender;

    hashCode = hashCode * 8191 + iAge;

    hashCode = hashCode * 8191 + ((isSetStrSdkVer()) ? 131071 : 524287);
    if (isSetStrSdkVer())
      hashCode = hashCode * 8191 + strSdkVer.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinFea()) ? 131071 : 524287);
    if (isSetBinFea())
      hashCode = hashCode * 8191 + binFea.hashCode();

    hashCode = hashCode * 8191 + ((isSetBinImg()) ? 131071 : 524287);
    if (isSetBinImg())
      hashCode = hashCode * 8191 + binImg.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CapFaceDetectResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRcFace()).compareTo(other.isSetRcFace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRcFace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcFace, other.rcFace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPtLeftEye()).compareTo(other.isSetPtLeftEye());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtLeftEye()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptLeftEye, other.ptLeftEye);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPtRightEye()).compareTo(other.isSetPtRightEye());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtRightEye()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptRightEye, other.ptRightEye);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPtMouth()).compareTo(other.isSetPtMouth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtMouth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptMouth, other.ptMouth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPtNose()).compareTo(other.isSetPtNose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPtNose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ptNose, other.ptNose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIYaw()).compareTo(other.isSetIYaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIYaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iYaw, other.iYaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIPitch()).compareTo(other.isSetIPitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIPitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iPitch, other.iPitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIRoll()).compareTo(other.isSetIRoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIRoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iRoll, other.iRoll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIQuality()).compareTo(other.isSetIQuality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIQuality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iQuality, other.iQuality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIGender()).compareTo(other.isSetIGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iGender, other.iGender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIAge()).compareTo(other.isSetIAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAge, other.iAge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStrSdkVer()).compareTo(other.isSetStrSdkVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrSdkVer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strSdkVer, other.strSdkVer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinFea()).compareTo(other.isSetBinFea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinFea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binFea, other.binFea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBinImg()).compareTo(other.isSetBinImg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinImg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binImg, other.binImg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CapFaceDetectResult(");
    boolean first = true;

    sb.append("rcFace:");
    if (this.rcFace == null) {
      sb.append("null");
    } else {
      sb.append(this.rcFace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ptLeftEye:");
    if (this.ptLeftEye == null) {
      sb.append("null");
    } else {
      sb.append(this.ptLeftEye);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ptRightEye:");
    if (this.ptRightEye == null) {
      sb.append("null");
    } else {
      sb.append(this.ptRightEye);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ptMouth:");
    if (this.ptMouth == null) {
      sb.append("null");
    } else {
      sb.append(this.ptMouth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ptNose:");
    if (this.ptNose == null) {
      sb.append("null");
    } else {
      sb.append(this.ptNose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("iYaw:");
    sb.append(this.iYaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iPitch:");
    sb.append(this.iPitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iRoll:");
    sb.append(this.iRoll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iQuality:");
    sb.append(this.iQuality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iGender:");
    sb.append(this.iGender);
    first = false;
    if (!first) sb.append(", ");
    sb.append("iAge:");
    sb.append(this.iAge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strSdkVer:");
    if (this.strSdkVer == null) {
      sb.append("null");
    } else {
      sb.append(this.strSdkVer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binFea:");
    if (this.binFea == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binFea, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binImg:");
    if (this.binImg == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binImg, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (rcFace != null) {
      rcFace.validate();
    }
    if (ptLeftEye != null) {
      ptLeftEye.validate();
    }
    if (ptRightEye != null) {
      ptRightEye.validate();
    }
    if (ptMouth != null) {
      ptMouth.validate();
    }
    if (ptNose != null) {
      ptNose.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CapFaceDetectResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapFaceDetectResultStandardScheme getScheme() {
      return new CapFaceDetectResultStandardScheme();
    }
  }

  private static class CapFaceDetectResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CapFaceDetectResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CapFaceDetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RC_FACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.rcFace = new CapRECT();
              struct.rcFace.read(iprot);
              struct.setRcFaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PT_LEFT_EYE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ptLeftEye = new CapPOINT();
              struct.ptLeftEye.read(iprot);
              struct.setPtLeftEyeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PT_RIGHT_EYE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ptRightEye = new CapPOINT();
              struct.ptRightEye.read(iprot);
              struct.setPtRightEyeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PT_MOUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ptMouth = new CapPOINT();
              struct.ptMouth.read(iprot);
              struct.setPtMouthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PT_NOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ptNose = new CapPOINT();
              struct.ptNose.read(iprot);
              struct.setPtNoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // I_YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iYaw = iprot.readI32();
              struct.setIYawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // I_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iPitch = iprot.readI32();
              struct.setIPitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // I_ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iRoll = iprot.readI32();
              struct.setIRollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // I_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iQuality = iprot.readI32();
              struct.setIQualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // I_GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iGender = iprot.readI32();
              struct.setIGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // I_AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.iAge = iprot.readI32();
              struct.setIAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STR_SDK_VER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strSdkVer = iprot.readString();
              struct.setStrSdkVerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BIN_FEA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binFea = iprot.readBinary();
              struct.setBinFeaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // BIN_IMG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binImg = iprot.readBinary();
              struct.setBinImgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CapFaceDetectResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.rcFace != null) {
        oprot.writeFieldBegin(RC_FACE_FIELD_DESC);
        struct.rcFace.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ptLeftEye != null) {
        oprot.writeFieldBegin(PT_LEFT_EYE_FIELD_DESC);
        struct.ptLeftEye.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ptRightEye != null) {
        oprot.writeFieldBegin(PT_RIGHT_EYE_FIELD_DESC);
        struct.ptRightEye.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ptMouth != null) {
        oprot.writeFieldBegin(PT_MOUTH_FIELD_DESC);
        struct.ptMouth.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.ptNose != null) {
        oprot.writeFieldBegin(PT_NOSE_FIELD_DESC);
        struct.ptNose.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I_YAW_FIELD_DESC);
      oprot.writeI32(struct.iYaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_PITCH_FIELD_DESC);
      oprot.writeI32(struct.iPitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_ROLL_FIELD_DESC);
      oprot.writeI32(struct.iRoll);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_QUALITY_FIELD_DESC);
      oprot.writeI32(struct.iQuality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_GENDER_FIELD_DESC);
      oprot.writeI32(struct.iGender);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I_AGE_FIELD_DESC);
      oprot.writeI32(struct.iAge);
      oprot.writeFieldEnd();
      if (struct.strSdkVer != null) {
        oprot.writeFieldBegin(STR_SDK_VER_FIELD_DESC);
        oprot.writeString(struct.strSdkVer);
        oprot.writeFieldEnd();
      }
      if (struct.binFea != null) {
        oprot.writeFieldBegin(BIN_FEA_FIELD_DESC);
        oprot.writeBinary(struct.binFea);
        oprot.writeFieldEnd();
      }
      if (struct.binImg != null) {
        oprot.writeFieldBegin(BIN_IMG_FIELD_DESC);
        oprot.writeBinary(struct.binImg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CapFaceDetectResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapFaceDetectResultTupleScheme getScheme() {
      return new CapFaceDetectResultTupleScheme();
    }
  }

  private static class CapFaceDetectResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CapFaceDetectResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CapFaceDetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRcFace()) {
        optionals.set(0);
      }
      if (struct.isSetPtLeftEye()) {
        optionals.set(1);
      }
      if (struct.isSetPtRightEye()) {
        optionals.set(2);
      }
      if (struct.isSetPtMouth()) {
        optionals.set(3);
      }
      if (struct.isSetPtNose()) {
        optionals.set(4);
      }
      if (struct.isSetIYaw()) {
        optionals.set(5);
      }
      if (struct.isSetIPitch()) {
        optionals.set(6);
      }
      if (struct.isSetIRoll()) {
        optionals.set(7);
      }
      if (struct.isSetIQuality()) {
        optionals.set(8);
      }
      if (struct.isSetIGender()) {
        optionals.set(9);
      }
      if (struct.isSetIAge()) {
        optionals.set(10);
      }
      if (struct.isSetStrSdkVer()) {
        optionals.set(11);
      }
      if (struct.isSetBinFea()) {
        optionals.set(12);
      }
      if (struct.isSetBinImg()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetRcFace()) {
        struct.rcFace.write(oprot);
      }
      if (struct.isSetPtLeftEye()) {
        struct.ptLeftEye.write(oprot);
      }
      if (struct.isSetPtRightEye()) {
        struct.ptRightEye.write(oprot);
      }
      if (struct.isSetPtMouth()) {
        struct.ptMouth.write(oprot);
      }
      if (struct.isSetPtNose()) {
        struct.ptNose.write(oprot);
      }
      if (struct.isSetIYaw()) {
        oprot.writeI32(struct.iYaw);
      }
      if (struct.isSetIPitch()) {
        oprot.writeI32(struct.iPitch);
      }
      if (struct.isSetIRoll()) {
        oprot.writeI32(struct.iRoll);
      }
      if (struct.isSetIQuality()) {
        oprot.writeI32(struct.iQuality);
      }
      if (struct.isSetIGender()) {
        oprot.writeI32(struct.iGender);
      }
      if (struct.isSetIAge()) {
        oprot.writeI32(struct.iAge);
      }
      if (struct.isSetStrSdkVer()) {
        oprot.writeString(struct.strSdkVer);
      }
      if (struct.isSetBinFea()) {
        oprot.writeBinary(struct.binFea);
      }
      if (struct.isSetBinImg()) {
        oprot.writeBinary(struct.binImg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CapFaceDetectResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.rcFace = new CapRECT();
        struct.rcFace.read(iprot);
        struct.setRcFaceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ptLeftEye = new CapPOINT();
        struct.ptLeftEye.read(iprot);
        struct.setPtLeftEyeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ptRightEye = new CapPOINT();
        struct.ptRightEye.read(iprot);
        struct.setPtRightEyeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ptMouth = new CapPOINT();
        struct.ptMouth.read(iprot);
        struct.setPtMouthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ptNose = new CapPOINT();
        struct.ptNose.read(iprot);
        struct.setPtNoseIsSet(true);
      }
      if (incoming.get(5)) {
        struct.iYaw = iprot.readI32();
        struct.setIYawIsSet(true);
      }
      if (incoming.get(6)) {
        struct.iPitch = iprot.readI32();
        struct.setIPitchIsSet(true);
      }
      if (incoming.get(7)) {
        struct.iRoll = iprot.readI32();
        struct.setIRollIsSet(true);
      }
      if (incoming.get(8)) {
        struct.iQuality = iprot.readI32();
        struct.setIQualityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.iGender = iprot.readI32();
        struct.setIGenderIsSet(true);
      }
      if (incoming.get(10)) {
        struct.iAge = iprot.readI32();
        struct.setIAgeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.strSdkVer = iprot.readString();
        struct.setStrSdkVerIsSet(true);
      }
      if (incoming.get(12)) {
        struct.binFea = iprot.readBinary();
        struct.setBinFeaIsSet(true);
      }
      if (incoming.get(13)) {
        struct.binImg = iprot.readBinary();
        struct.setBinImgIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


package com.sensing.core.thrift.bean;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-04-27")
public class FaceTemplate implements org.apache.thrift.TBase<FaceTemplate, FaceTemplate._Fields>, java.io.Serializable, Cloneable, Comparable<FaceTemplate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FaceTemplate");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FT_DKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_dkey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_index", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField FT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_type", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_time", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField FT_IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_image", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMGMD_FIELD_DESC = new org.apache.thrift.protocol.TField("imgmd", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FT_FEA_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_fea", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FACE_X_FIELD_DESC = new org.apache.thrift.protocol.TField("face_x", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField FACE_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("face_y", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField FACE_CX_FIELD_DESC = new org.apache.thrift.protocol.TField("face_cx", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FACE_CY_FIELD_DESC = new org.apache.thrift.protocol.TField("face_cy", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField FT_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_quality", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField FT_REMARKS_FIELD_DESC = new org.apache.thrift.protocol.TField("ft_remarks", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FTDB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ftdb_id", org.apache.thrift.protocol.TType.I32, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FaceTemplateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FaceTemplateTupleSchemeFactory();

  public java.lang.String uuid; // required
  public java.lang.String obj_id; // required
  public java.lang.String ft_dkey; // required
  public int ft_index; // required
  public int ft_type; // required
  public long ft_time; // required
  public java.nio.ByteBuffer ft_image; // required
  public java.lang.String imgmd; // required
  public java.nio.ByteBuffer ft_fea; // required
  public int face_x; // required
  public int face_y; // required
  public int face_cx; // required
  public int face_cy; // required
  public int ft_quality; // required
  public java.lang.String ft_remarks; // required
  public int ftdb_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    OBJ_ID((short)2, "obj_id"),
    FT_DKEY((short)3, "ft_dkey"),
    FT_INDEX((short)4, "ft_index"),
    FT_TYPE((short)5, "ft_type"),
    FT_TIME((short)6, "ft_time"),
    FT_IMAGE((short)7, "ft_image"),
    IMGMD((short)8, "imgmd"),
    FT_FEA((short)9, "ft_fea"),
    FACE_X((short)10, "face_x"),
    FACE_Y((short)11, "face_y"),
    FACE_CX((short)12, "face_cx"),
    FACE_CY((short)13, "face_cy"),
    FT_QUALITY((short)14, "ft_quality"),
    FT_REMARKS((short)15, "ft_remarks"),
    FTDB_ID((short)16, "ftdb_id");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // OBJ_ID
          return OBJ_ID;
        case 3: // FT_DKEY
          return FT_DKEY;
        case 4: // FT_INDEX
          return FT_INDEX;
        case 5: // FT_TYPE
          return FT_TYPE;
        case 6: // FT_TIME
          return FT_TIME;
        case 7: // FT_IMAGE
          return FT_IMAGE;
        case 8: // IMGMD
          return IMGMD;
        case 9: // FT_FEA
          return FT_FEA;
        case 10: // FACE_X
          return FACE_X;
        case 11: // FACE_Y
          return FACE_Y;
        case 12: // FACE_CX
          return FACE_CX;
        case 13: // FACE_CY
          return FACE_CY;
        case 14: // FT_QUALITY
          return FT_QUALITY;
        case 15: // FT_REMARKS
          return FT_REMARKS;
        case 16: // FTDB_ID
          return FTDB_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FT_INDEX_ISSET_ID = 0;
  private static final int __FT_TYPE_ISSET_ID = 1;
  private static final int __FT_TIME_ISSET_ID = 2;
  private static final int __FACE_X_ISSET_ID = 3;
  private static final int __FACE_Y_ISSET_ID = 4;
  private static final int __FACE_CX_ISSET_ID = 5;
  private static final int __FACE_CY_ISSET_ID = 6;
  private static final int __FT_QUALITY_ISSET_ID = 7;
  private static final int __FTDB_ID_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_DKEY, new org.apache.thrift.meta_data.FieldMetaData("ft_dkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("ft_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("ft_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_TIME, new org.apache.thrift.meta_data.FieldMetaData("ft_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FT_IMAGE, new org.apache.thrift.meta_data.FieldMetaData("ft_image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.IMGMD, new org.apache.thrift.meta_data.FieldMetaData("imgmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FT_FEA, new org.apache.thrift.meta_data.FieldMetaData("ft_fea", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FACE_X, new org.apache.thrift.meta_data.FieldMetaData("face_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_Y, new org.apache.thrift.meta_data.FieldMetaData("face_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_CX, new org.apache.thrift.meta_data.FieldMetaData("face_cx", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_CY, new org.apache.thrift.meta_data.FieldMetaData("face_cy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("ft_quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FT_REMARKS, new org.apache.thrift.meta_data.FieldMetaData("ft_remarks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FTDB_ID, new org.apache.thrift.meta_data.FieldMetaData("ftdb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FaceTemplate.class, metaDataMap);
  }

  public FaceTemplate() {
  }

  public FaceTemplate(
    java.lang.String uuid,
    java.lang.String obj_id,
    java.lang.String ft_dkey,
    int ft_index,
    int ft_type,
    long ft_time,
    java.nio.ByteBuffer ft_image,
    java.lang.String imgmd,
    java.nio.ByteBuffer ft_fea,
    int face_x,
    int face_y,
    int face_cx,
    int face_cy,
    int ft_quality,
    java.lang.String ft_remarks,
    int ftdb_id)
  {
    this();
    this.uuid = uuid;
    this.obj_id = obj_id;
    this.ft_dkey = ft_dkey;
    this.ft_index = ft_index;
    setFt_indexIsSet(true);
    this.ft_type = ft_type;
    setFt_typeIsSet(true);
    this.ft_time = ft_time;
    setFt_timeIsSet(true);
    this.ft_image = org.apache.thrift.TBaseHelper.copyBinary(ft_image);
    this.imgmd = imgmd;
    this.ft_fea = org.apache.thrift.TBaseHelper.copyBinary(ft_fea);
    this.face_x = face_x;
    setFace_xIsSet(true);
    this.face_y = face_y;
    setFace_yIsSet(true);
    this.face_cx = face_cx;
    setFace_cxIsSet(true);
    this.face_cy = face_cy;
    setFace_cyIsSet(true);
    this.ft_quality = ft_quality;
    setFt_qualityIsSet(true);
    this.ft_remarks = ft_remarks;
    this.ftdb_id = ftdb_id;
    setFtdb_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FaceTemplate(FaceTemplate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetObj_id()) {
      this.obj_id = other.obj_id;
    }
    if (other.isSetFt_dkey()) {
      this.ft_dkey = other.ft_dkey;
    }
    this.ft_index = other.ft_index;
    this.ft_type = other.ft_type;
    this.ft_time = other.ft_time;
    if (other.isSetFt_image()) {
      this.ft_image = org.apache.thrift.TBaseHelper.copyBinary(other.ft_image);
    }
    if (other.isSetImgmd()) {
      this.imgmd = other.imgmd;
    }
    if (other.isSetFt_fea()) {
      this.ft_fea = org.apache.thrift.TBaseHelper.copyBinary(other.ft_fea);
    }
    this.face_x = other.face_x;
    this.face_y = other.face_y;
    this.face_cx = other.face_cx;
    this.face_cy = other.face_cy;
    this.ft_quality = other.ft_quality;
    if (other.isSetFt_remarks()) {
      this.ft_remarks = other.ft_remarks;
    }
    this.ftdb_id = other.ftdb_id;
  }

  public FaceTemplate deepCopy() {
    return new FaceTemplate(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.obj_id = null;
    this.ft_dkey = null;
    setFt_indexIsSet(false);
    this.ft_index = 0;
    setFt_typeIsSet(false);
    this.ft_type = 0;
    setFt_timeIsSet(false);
    this.ft_time = 0;
    this.ft_image = null;
    this.imgmd = null;
    this.ft_fea = null;
    setFace_xIsSet(false);
    this.face_x = 0;
    setFace_yIsSet(false);
    this.face_y = 0;
    setFace_cxIsSet(false);
    this.face_cx = 0;
    setFace_cyIsSet(false);
    this.face_cy = 0;
    setFt_qualityIsSet(false);
    this.ft_quality = 0;
    this.ft_remarks = null;
    setFtdb_idIsSet(false);
    this.ftdb_id = 0;
  }

  public java.lang.String getUuid() {
    return this.uuid;
  }

  public FaceTemplate setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public java.lang.String getObj_id() {
    return this.obj_id;
  }

  public FaceTemplate setObj_id(java.lang.String obj_id) {
    this.obj_id = obj_id;
    return this;
  }

  public void unsetObj_id() {
    this.obj_id = null;
  }

  /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
  public boolean isSetObj_id() {
    return this.obj_id != null;
  }

  public void setObj_idIsSet(boolean value) {
    if (!value) {
      this.obj_id = null;
    }
  }

  public java.lang.String getFt_dkey() {
    return this.ft_dkey;
  }

  public FaceTemplate setFt_dkey(java.lang.String ft_dkey) {
    this.ft_dkey = ft_dkey;
    return this;
  }

  public void unsetFt_dkey() {
    this.ft_dkey = null;
  }

  /** Returns true if field ft_dkey is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_dkey() {
    return this.ft_dkey != null;
  }

  public void setFt_dkeyIsSet(boolean value) {
    if (!value) {
      this.ft_dkey = null;
    }
  }

  public int getFt_index() {
    return this.ft_index;
  }

  public FaceTemplate setFt_index(int ft_index) {
    this.ft_index = ft_index;
    setFt_indexIsSet(true);
    return this;
  }

  public void unsetFt_index() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FT_INDEX_ISSET_ID);
  }

  /** Returns true if field ft_index is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_index() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FT_INDEX_ISSET_ID);
  }

  public void setFt_indexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FT_INDEX_ISSET_ID, value);
  }

  public int getFt_type() {
    return this.ft_type;
  }

  public FaceTemplate setFt_type(int ft_type) {
    this.ft_type = ft_type;
    setFt_typeIsSet(true);
    return this;
  }

  public void unsetFt_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FT_TYPE_ISSET_ID);
  }

  /** Returns true if field ft_type is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FT_TYPE_ISSET_ID);
  }

  public void setFt_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FT_TYPE_ISSET_ID, value);
  }

  public long getFt_time() {
    return this.ft_time;
  }

  public FaceTemplate setFt_time(long ft_time) {
    this.ft_time = ft_time;
    setFt_timeIsSet(true);
    return this;
  }

  public void unsetFt_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FT_TIME_ISSET_ID);
  }

  /** Returns true if field ft_time is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FT_TIME_ISSET_ID);
  }

  public void setFt_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FT_TIME_ISSET_ID, value);
  }

  public byte[] getFt_image() {
    setFt_image(org.apache.thrift.TBaseHelper.rightSize(ft_image));
    return ft_image == null ? null : ft_image.array();
  }

  public java.nio.ByteBuffer bufferForFt_image() {
    return org.apache.thrift.TBaseHelper.copyBinary(ft_image);
  }

  public FaceTemplate setFt_image(byte[] ft_image) {
    this.ft_image = ft_image == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(ft_image.clone());
    return this;
  }

  public FaceTemplate setFt_image(java.nio.ByteBuffer ft_image) {
    this.ft_image = org.apache.thrift.TBaseHelper.copyBinary(ft_image);
    return this;
  }

  public void unsetFt_image() {
    this.ft_image = null;
  }

  /** Returns true if field ft_image is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_image() {
    return this.ft_image != null;
  }

  public void setFt_imageIsSet(boolean value) {
    if (!value) {
      this.ft_image = null;
    }
  }

  public java.lang.String getImgmd() {
    return this.imgmd;
  }

  public FaceTemplate setImgmd(java.lang.String imgmd) {
    this.imgmd = imgmd;
    return this;
  }

  public void unsetImgmd() {
    this.imgmd = null;
  }

  /** Returns true if field imgmd is set (has been assigned a value) and false otherwise */
  public boolean isSetImgmd() {
    return this.imgmd != null;
  }

  public void setImgmdIsSet(boolean value) {
    if (!value) {
      this.imgmd = null;
    }
  }

  public byte[] getFt_fea() {
    setFt_fea(org.apache.thrift.TBaseHelper.rightSize(ft_fea));
    return ft_fea == null ? null : ft_fea.array();
  }

  public java.nio.ByteBuffer bufferForFt_fea() {
    return org.apache.thrift.TBaseHelper.copyBinary(ft_fea);
  }

  public FaceTemplate setFt_fea(byte[] ft_fea) {
    this.ft_fea = ft_fea == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(ft_fea.clone());
    return this;
  }

  public FaceTemplate setFt_fea(java.nio.ByteBuffer ft_fea) {
    this.ft_fea = org.apache.thrift.TBaseHelper.copyBinary(ft_fea);
    return this;
  }

  public void unsetFt_fea() {
    this.ft_fea = null;
  }

  /** Returns true if field ft_fea is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_fea() {
    return this.ft_fea != null;
  }

  public void setFt_feaIsSet(boolean value) {
    if (!value) {
      this.ft_fea = null;
    }
  }

  public int getFace_x() {
    return this.face_x;
  }

  public FaceTemplate setFace_x(int face_x) {
    this.face_x = face_x;
    setFace_xIsSet(true);
    return this;
  }

  public void unsetFace_x() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACE_X_ISSET_ID);
  }

  /** Returns true if field face_x is set (has been assigned a value) and false otherwise */
  public boolean isSetFace_x() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACE_X_ISSET_ID);
  }

  public void setFace_xIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACE_X_ISSET_ID, value);
  }

  public int getFace_y() {
    return this.face_y;
  }

  public FaceTemplate setFace_y(int face_y) {
    this.face_y = face_y;
    setFace_yIsSet(true);
    return this;
  }

  public void unsetFace_y() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACE_Y_ISSET_ID);
  }

  /** Returns true if field face_y is set (has been assigned a value) and false otherwise */
  public boolean isSetFace_y() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACE_Y_ISSET_ID);
  }

  public void setFace_yIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACE_Y_ISSET_ID, value);
  }

  public int getFace_cx() {
    return this.face_cx;
  }

  public FaceTemplate setFace_cx(int face_cx) {
    this.face_cx = face_cx;
    setFace_cxIsSet(true);
    return this;
  }

  public void unsetFace_cx() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACE_CX_ISSET_ID);
  }

  /** Returns true if field face_cx is set (has been assigned a value) and false otherwise */
  public boolean isSetFace_cx() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACE_CX_ISSET_ID);
  }

  public void setFace_cxIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACE_CX_ISSET_ID, value);
  }

  public int getFace_cy() {
    return this.face_cy;
  }

  public FaceTemplate setFace_cy(int face_cy) {
    this.face_cy = face_cy;
    setFace_cyIsSet(true);
    return this;
  }

  public void unsetFace_cy() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACE_CY_ISSET_ID);
  }

  /** Returns true if field face_cy is set (has been assigned a value) and false otherwise */
  public boolean isSetFace_cy() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACE_CY_ISSET_ID);
  }

  public void setFace_cyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACE_CY_ISSET_ID, value);
  }

  public int getFt_quality() {
    return this.ft_quality;
  }

  public FaceTemplate setFt_quality(int ft_quality) {
    this.ft_quality = ft_quality;
    setFt_qualityIsSet(true);
    return this;
  }

  public void unsetFt_quality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FT_QUALITY_ISSET_ID);
  }

  /** Returns true if field ft_quality is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_quality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FT_QUALITY_ISSET_ID);
  }

  public void setFt_qualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FT_QUALITY_ISSET_ID, value);
  }

  public java.lang.String getFt_remarks() {
    return this.ft_remarks;
  }

  public FaceTemplate setFt_remarks(java.lang.String ft_remarks) {
    this.ft_remarks = ft_remarks;
    return this;
  }

  public void unsetFt_remarks() {
    this.ft_remarks = null;
  }

  /** Returns true if field ft_remarks is set (has been assigned a value) and false otherwise */
  public boolean isSetFt_remarks() {
    return this.ft_remarks != null;
  }

  public void setFt_remarksIsSet(boolean value) {
    if (!value) {
      this.ft_remarks = null;
    }
  }

  public int getFtdb_id() {
    return this.ftdb_id;
  }

  public FaceTemplate setFtdb_id(int ftdb_id) {
    this.ftdb_id = ftdb_id;
    setFtdb_idIsSet(true);
    return this;
  }

  public void unsetFtdb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FTDB_ID_ISSET_ID);
  }

  /** Returns true if field ftdb_id is set (has been assigned a value) and false otherwise */
  public boolean isSetFtdb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FTDB_ID_ISSET_ID);
  }

  public void setFtdb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FTDB_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case OBJ_ID:
      if (value == null) {
        unsetObj_id();
      } else {
        setObj_id((java.lang.String)value);
      }
      break;

    case FT_DKEY:
      if (value == null) {
        unsetFt_dkey();
      } else {
        setFt_dkey((java.lang.String)value);
      }
      break;

    case FT_INDEX:
      if (value == null) {
        unsetFt_index();
      } else {
        setFt_index((java.lang.Integer)value);
      }
      break;

    case FT_TYPE:
      if (value == null) {
        unsetFt_type();
      } else {
        setFt_type((java.lang.Integer)value);
      }
      break;

    case FT_TIME:
      if (value == null) {
        unsetFt_time();
      } else {
        setFt_time((java.lang.Long)value);
      }
      break;

    case FT_IMAGE:
      if (value == null) {
        unsetFt_image();
      } else {
        if (value instanceof byte[]) {
          setFt_image((byte[])value);
        } else {
          setFt_image((java.nio.ByteBuffer)value);
        }
      }
      break;

    case IMGMD:
      if (value == null) {
        unsetImgmd();
      } else {
        setImgmd((java.lang.String)value);
      }
      break;

    case FT_FEA:
      if (value == null) {
        unsetFt_fea();
      } else {
        if (value instanceof byte[]) {
          setFt_fea((byte[])value);
        } else {
          setFt_fea((java.nio.ByteBuffer)value);
        }
      }
      break;

    case FACE_X:
      if (value == null) {
        unsetFace_x();
      } else {
        setFace_x((java.lang.Integer)value);
      }
      break;

    case FACE_Y:
      if (value == null) {
        unsetFace_y();
      } else {
        setFace_y((java.lang.Integer)value);
      }
      break;

    case FACE_CX:
      if (value == null) {
        unsetFace_cx();
      } else {
        setFace_cx((java.lang.Integer)value);
      }
      break;

    case FACE_CY:
      if (value == null) {
        unsetFace_cy();
      } else {
        setFace_cy((java.lang.Integer)value);
      }
      break;

    case FT_QUALITY:
      if (value == null) {
        unsetFt_quality();
      } else {
        setFt_quality((java.lang.Integer)value);
      }
      break;

    case FT_REMARKS:
      if (value == null) {
        unsetFt_remarks();
      } else {
        setFt_remarks((java.lang.String)value);
      }
      break;

    case FTDB_ID:
      if (value == null) {
        unsetFtdb_id();
      } else {
        setFtdb_id((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case OBJ_ID:
      return getObj_id();

    case FT_DKEY:
      return getFt_dkey();

    case FT_INDEX:
      return getFt_index();

    case FT_TYPE:
      return getFt_type();

    case FT_TIME:
      return getFt_time();

    case FT_IMAGE:
      return getFt_image();

    case IMGMD:
      return getImgmd();

    case FT_FEA:
      return getFt_fea();

    case FACE_X:
      return getFace_x();

    case FACE_Y:
      return getFace_y();

    case FACE_CX:
      return getFace_cx();

    case FACE_CY:
      return getFace_cy();

    case FT_QUALITY:
      return getFt_quality();

    case FT_REMARKS:
      return getFt_remarks();

    case FTDB_ID:
      return getFtdb_id();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case OBJ_ID:
      return isSetObj_id();
    case FT_DKEY:
      return isSetFt_dkey();
    case FT_INDEX:
      return isSetFt_index();
    case FT_TYPE:
      return isSetFt_type();
    case FT_TIME:
      return isSetFt_time();
    case FT_IMAGE:
      return isSetFt_image();
    case IMGMD:
      return isSetImgmd();
    case FT_FEA:
      return isSetFt_fea();
    case FACE_X:
      return isSetFace_x();
    case FACE_Y:
      return isSetFace_y();
    case FACE_CX:
      return isSetFace_cx();
    case FACE_CY:
      return isSetFace_cy();
    case FT_QUALITY:
      return isSetFt_quality();
    case FT_REMARKS:
      return isSetFt_remarks();
    case FTDB_ID:
      return isSetFtdb_id();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof FaceTemplate)
      return this.equals((FaceTemplate)that);
    return false;
  }

  public boolean equals(FaceTemplate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_obj_id = true && this.isSetObj_id();
    boolean that_present_obj_id = true && that.isSetObj_id();
    if (this_present_obj_id || that_present_obj_id) {
      if (!(this_present_obj_id && that_present_obj_id))
        return false;
      if (!this.obj_id.equals(that.obj_id))
        return false;
    }

    boolean this_present_ft_dkey = true && this.isSetFt_dkey();
    boolean that_present_ft_dkey = true && that.isSetFt_dkey();
    if (this_present_ft_dkey || that_present_ft_dkey) {
      if (!(this_present_ft_dkey && that_present_ft_dkey))
        return false;
      if (!this.ft_dkey.equals(that.ft_dkey))
        return false;
    }

    boolean this_present_ft_index = true;
    boolean that_present_ft_index = true;
    if (this_present_ft_index || that_present_ft_index) {
      if (!(this_present_ft_index && that_present_ft_index))
        return false;
      if (this.ft_index != that.ft_index)
        return false;
    }

    boolean this_present_ft_type = true;
    boolean that_present_ft_type = true;
    if (this_present_ft_type || that_present_ft_type) {
      if (!(this_present_ft_type && that_present_ft_type))
        return false;
      if (this.ft_type != that.ft_type)
        return false;
    }

    boolean this_present_ft_time = true;
    boolean that_present_ft_time = true;
    if (this_present_ft_time || that_present_ft_time) {
      if (!(this_present_ft_time && that_present_ft_time))
        return false;
      if (this.ft_time != that.ft_time)
        return false;
    }

    boolean this_present_ft_image = true && this.isSetFt_image();
    boolean that_present_ft_image = true && that.isSetFt_image();
    if (this_present_ft_image || that_present_ft_image) {
      if (!(this_present_ft_image && that_present_ft_image))
        return false;
      if (!this.ft_image.equals(that.ft_image))
        return false;
    }

    boolean this_present_imgmd = true && this.isSetImgmd();
    boolean that_present_imgmd = true && that.isSetImgmd();
    if (this_present_imgmd || that_present_imgmd) {
      if (!(this_present_imgmd && that_present_imgmd))
        return false;
      if (!this.imgmd.equals(that.imgmd))
        return false;
    }

    boolean this_present_ft_fea = true && this.isSetFt_fea();
    boolean that_present_ft_fea = true && that.isSetFt_fea();
    if (this_present_ft_fea || that_present_ft_fea) {
      if (!(this_present_ft_fea && that_present_ft_fea))
        return false;
      if (!this.ft_fea.equals(that.ft_fea))
        return false;
    }

    boolean this_present_face_x = true;
    boolean that_present_face_x = true;
    if (this_present_face_x || that_present_face_x) {
      if (!(this_present_face_x && that_present_face_x))
        return false;
      if (this.face_x != that.face_x)
        return false;
    }

    boolean this_present_face_y = true;
    boolean that_present_face_y = true;
    if (this_present_face_y || that_present_face_y) {
      if (!(this_present_face_y && that_present_face_y))
        return false;
      if (this.face_y != that.face_y)
        return false;
    }

    boolean this_present_face_cx = true;
    boolean that_present_face_cx = true;
    if (this_present_face_cx || that_present_face_cx) {
      if (!(this_present_face_cx && that_present_face_cx))
        return false;
      if (this.face_cx != that.face_cx)
        return false;
    }

    boolean this_present_face_cy = true;
    boolean that_present_face_cy = true;
    if (this_present_face_cy || that_present_face_cy) {
      if (!(this_present_face_cy && that_present_face_cy))
        return false;
      if (this.face_cy != that.face_cy)
        return false;
    }

    boolean this_present_ft_quality = true;
    boolean that_present_ft_quality = true;
    if (this_present_ft_quality || that_present_ft_quality) {
      if (!(this_present_ft_quality && that_present_ft_quality))
        return false;
      if (this.ft_quality != that.ft_quality)
        return false;
    }

    boolean this_present_ft_remarks = true && this.isSetFt_remarks();
    boolean that_present_ft_remarks = true && that.isSetFt_remarks();
    if (this_present_ft_remarks || that_present_ft_remarks) {
      if (!(this_present_ft_remarks && that_present_ft_remarks))
        return false;
      if (!this.ft_remarks.equals(that.ft_remarks))
        return false;
    }

    boolean this_present_ftdb_id = true;
    boolean that_present_ftdb_id = true;
    if (this_present_ftdb_id || that_present_ftdb_id) {
      if (!(this_present_ftdb_id && that_present_ftdb_id))
        return false;
      if (this.ftdb_id != that.ftdb_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetObj_id()) ? 131071 : 524287);
    if (isSetObj_id())
      hashCode = hashCode * 8191 + obj_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFt_dkey()) ? 131071 : 524287);
    if (isSetFt_dkey())
      hashCode = hashCode * 8191 + ft_dkey.hashCode();

    hashCode = hashCode * 8191 + ft_index;

    hashCode = hashCode * 8191 + ft_type;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ft_time);

    hashCode = hashCode * 8191 + ((isSetFt_image()) ? 131071 : 524287);
    if (isSetFt_image())
      hashCode = hashCode * 8191 + ft_image.hashCode();

    hashCode = hashCode * 8191 + ((isSetImgmd()) ? 131071 : 524287);
    if (isSetImgmd())
      hashCode = hashCode * 8191 + imgmd.hashCode();

    hashCode = hashCode * 8191 + ((isSetFt_fea()) ? 131071 : 524287);
    if (isSetFt_fea())
      hashCode = hashCode * 8191 + ft_fea.hashCode();

    hashCode = hashCode * 8191 + face_x;

    hashCode = hashCode * 8191 + face_y;

    hashCode = hashCode * 8191 + face_cx;

    hashCode = hashCode * 8191 + face_cy;

    hashCode = hashCode * 8191 + ft_quality;

    hashCode = hashCode * 8191 + ((isSetFt_remarks()) ? 131071 : 524287);
    if (isSetFt_remarks())
      hashCode = hashCode * 8191 + ft_remarks.hashCode();

    hashCode = hashCode * 8191 + ftdb_id;

    return hashCode;
  }

  @Override
  public int compareTo(FaceTemplate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObj_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_dkey()).compareTo(other.isSetFt_dkey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_dkey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_dkey, other.ft_dkey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_index()).compareTo(other.isSetFt_index());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_index()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_index, other.ft_index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_type()).compareTo(other.isSetFt_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_type, other.ft_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_time()).compareTo(other.isSetFt_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_time, other.ft_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_image()).compareTo(other.isSetFt_image());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_image()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_image, other.ft_image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImgmd()).compareTo(other.isSetImgmd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgmd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgmd, other.imgmd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_fea()).compareTo(other.isSetFt_fea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_fea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_fea, other.ft_fea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFace_x()).compareTo(other.isSetFace_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face_x, other.face_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFace_y()).compareTo(other.isSetFace_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face_y, other.face_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFace_cx()).compareTo(other.isSetFace_cx());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace_cx()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face_cx, other.face_cx);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFace_cy()).compareTo(other.isSetFace_cy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace_cy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face_cy, other.face_cy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_quality()).compareTo(other.isSetFt_quality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_quality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_quality, other.ft_quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFt_remarks()).compareTo(other.isSetFt_remarks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFt_remarks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ft_remarks, other.ft_remarks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFtdb_id()).compareTo(other.isSetFtdb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFtdb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ftdb_id, other.ftdb_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FaceTemplate(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("obj_id:");
    if (this.obj_id == null) {
      sb.append("null");
    } else {
      sb.append(this.obj_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_dkey:");
    if (this.ft_dkey == null) {
      sb.append("null");
    } else {
      sb.append(this.ft_dkey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_index:");
    sb.append(this.ft_index);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_type:");
    sb.append(this.ft_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_time:");
    sb.append(this.ft_time);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_image:");
    if (this.ft_image == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ft_image, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgmd:");
    if (this.imgmd == null) {
      sb.append("null");
    } else {
      sb.append(this.imgmd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_fea:");
    if (this.ft_fea == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.ft_fea, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("face_x:");
    sb.append(this.face_x);
    first = false;
    if (!first) sb.append(", ");
    sb.append("face_y:");
    sb.append(this.face_y);
    first = false;
    if (!first) sb.append(", ");
    sb.append("face_cx:");
    sb.append(this.face_cx);
    first = false;
    if (!first) sb.append(", ");
    sb.append("face_cy:");
    sb.append(this.face_cy);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_quality:");
    sb.append(this.ft_quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ft_remarks:");
    if (this.ft_remarks == null) {
      sb.append("null");
    } else {
      sb.append(this.ft_remarks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ftdb_id:");
    sb.append(this.ftdb_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FaceTemplateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceTemplateStandardScheme getScheme() {
      return new FaceTemplateStandardScheme();
    }
  }

  private static class FaceTemplateStandardScheme extends org.apache.thrift.scheme.StandardScheme<FaceTemplate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FaceTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OBJ_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.obj_id = iprot.readString();
              struct.setObj_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FT_DKEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ft_dkey = iprot.readString();
              struct.setFt_dkeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FT_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ft_index = iprot.readI32();
              struct.setFt_indexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ft_type = iprot.readI32();
              struct.setFt_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ft_time = iprot.readI64();
              struct.setFt_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FT_IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ft_image = iprot.readBinary();
              struct.setFt_imageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMGMD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgmd = iprot.readString();
              struct.setImgmdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FT_FEA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ft_fea = iprot.readBinary();
              struct.setFt_feaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FACE_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.face_x = iprot.readI32();
              struct.setFace_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FACE_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.face_y = iprot.readI32();
              struct.setFace_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FACE_CX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.face_cx = iprot.readI32();
              struct.setFace_cxIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FACE_CY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.face_cy = iprot.readI32();
              struct.setFace_cyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FT_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ft_quality = iprot.readI32();
              struct.setFt_qualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FT_REMARKS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ft_remarks = iprot.readString();
              struct.setFt_remarksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FTDB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ftdb_id = iprot.readI32();
              struct.setFtdb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FaceTemplate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.obj_id != null) {
        oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
        oprot.writeString(struct.obj_id);
        oprot.writeFieldEnd();
      }
      if (struct.ft_dkey != null) {
        oprot.writeFieldBegin(FT_DKEY_FIELD_DESC);
        oprot.writeString(struct.ft_dkey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FT_INDEX_FIELD_DESC);
      oprot.writeI32(struct.ft_index);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.ft_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_TIME_FIELD_DESC);
      oprot.writeI64(struct.ft_time);
      oprot.writeFieldEnd();
      if (struct.ft_image != null) {
        oprot.writeFieldBegin(FT_IMAGE_FIELD_DESC);
        oprot.writeBinary(struct.ft_image);
        oprot.writeFieldEnd();
      }
      if (struct.imgmd != null) {
        oprot.writeFieldBegin(IMGMD_FIELD_DESC);
        oprot.writeString(struct.imgmd);
        oprot.writeFieldEnd();
      }
      if (struct.ft_fea != null) {
        oprot.writeFieldBegin(FT_FEA_FIELD_DESC);
        oprot.writeBinary(struct.ft_fea);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FACE_X_FIELD_DESC);
      oprot.writeI32(struct.face_x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_Y_FIELD_DESC);
      oprot.writeI32(struct.face_y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_CX_FIELD_DESC);
      oprot.writeI32(struct.face_cx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_CY_FIELD_DESC);
      oprot.writeI32(struct.face_cy);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FT_QUALITY_FIELD_DESC);
      oprot.writeI32(struct.ft_quality);
      oprot.writeFieldEnd();
      if (struct.ft_remarks != null) {
        oprot.writeFieldBegin(FT_REMARKS_FIELD_DESC);
        oprot.writeString(struct.ft_remarks);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FTDB_ID_FIELD_DESC);
      oprot.writeI32(struct.ftdb_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FaceTemplateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FaceTemplateTupleScheme getScheme() {
      return new FaceTemplateTupleScheme();
    }
  }

  private static class FaceTemplateTupleScheme extends org.apache.thrift.scheme.TupleScheme<FaceTemplate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FaceTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetObj_id()) {
        optionals.set(1);
      }
      if (struct.isSetFt_dkey()) {
        optionals.set(2);
      }
      if (struct.isSetFt_index()) {
        optionals.set(3);
      }
      if (struct.isSetFt_type()) {
        optionals.set(4);
      }
      if (struct.isSetFt_time()) {
        optionals.set(5);
      }
      if (struct.isSetFt_image()) {
        optionals.set(6);
      }
      if (struct.isSetImgmd()) {
        optionals.set(7);
      }
      if (struct.isSetFt_fea()) {
        optionals.set(8);
      }
      if (struct.isSetFace_x()) {
        optionals.set(9);
      }
      if (struct.isSetFace_y()) {
        optionals.set(10);
      }
      if (struct.isSetFace_cx()) {
        optionals.set(11);
      }
      if (struct.isSetFace_cy()) {
        optionals.set(12);
      }
      if (struct.isSetFt_quality()) {
        optionals.set(13);
      }
      if (struct.isSetFt_remarks()) {
        optionals.set(14);
      }
      if (struct.isSetFtdb_id()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetObj_id()) {
        oprot.writeString(struct.obj_id);
      }
      if (struct.isSetFt_dkey()) {
        oprot.writeString(struct.ft_dkey);
      }
      if (struct.isSetFt_index()) {
        oprot.writeI32(struct.ft_index);
      }
      if (struct.isSetFt_type()) {
        oprot.writeI32(struct.ft_type);
      }
      if (struct.isSetFt_time()) {
        oprot.writeI64(struct.ft_time);
      }
      if (struct.isSetFt_image()) {
        oprot.writeBinary(struct.ft_image);
      }
      if (struct.isSetImgmd()) {
        oprot.writeString(struct.imgmd);
      }
      if (struct.isSetFt_fea()) {
        oprot.writeBinary(struct.ft_fea);
      }
      if (struct.isSetFace_x()) {
        oprot.writeI32(struct.face_x);
      }
      if (struct.isSetFace_y()) {
        oprot.writeI32(struct.face_y);
      }
      if (struct.isSetFace_cx()) {
        oprot.writeI32(struct.face_cx);
      }
      if (struct.isSetFace_cy()) {
        oprot.writeI32(struct.face_cy);
      }
      if (struct.isSetFt_quality()) {
        oprot.writeI32(struct.ft_quality);
      }
      if (struct.isSetFt_remarks()) {
        oprot.writeString(struct.ft_remarks);
      }
      if (struct.isSetFtdb_id()) {
        oprot.writeI32(struct.ftdb_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FaceTemplate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.obj_id = iprot.readString();
        struct.setObj_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ft_dkey = iprot.readString();
        struct.setFt_dkeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ft_index = iprot.readI32();
        struct.setFt_indexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ft_type = iprot.readI32();
        struct.setFt_typeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ft_time = iprot.readI64();
        struct.setFt_timeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ft_image = iprot.readBinary();
        struct.setFt_imageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imgmd = iprot.readString();
        struct.setImgmdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ft_fea = iprot.readBinary();
        struct.setFt_feaIsSet(true);
      }
      if (incoming.get(9)) {
        struct.face_x = iprot.readI32();
        struct.setFace_xIsSet(true);
      }
      if (incoming.get(10)) {
        struct.face_y = iprot.readI32();
        struct.setFace_yIsSet(true);
      }
      if (incoming.get(11)) {
        struct.face_cx = iprot.readI32();
        struct.setFace_cxIsSet(true);
      }
      if (incoming.get(12)) {
        struct.face_cy = iprot.readI32();
        struct.setFace_cyIsSet(true);
      }
      if (incoming.get(13)) {
        struct.ft_quality = iprot.readI32();
        struct.setFt_qualityIsSet(true);
      }
      if (incoming.get(14)) {
        struct.ft_remarks = iprot.readString();
        struct.setFt_remarksIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ftdb_id = iprot.readI32();
        struct.setFtdb_idIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


package com.sensing.core.thrift.cap.bean;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class LoadBalance {

  public interface Iface {

    public LbServerInfo GetServersInfo() throws org.apache.thrift.TException;

    public LbChannelInfo GetChannelInfo() throws org.apache.thrift.TException;

    public CapReturn PushServerInfo(LbServerInfo info) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> GetAllOpenedChannels() throws org.apache.thrift.TException;

    public CapReturn OpenCloseChannel(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag) throws org.apache.thrift.TException;

    public java.util.List<CapFacesSet> DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException;

    public CapReturn NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException;

    public CapReturn ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException;

    public CapSceneImageResult GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException;

    public java.util.List<CapFeaturesSet> DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetServersInfo(org.apache.thrift.async.AsyncMethodCallback<LbServerInfo> resultHandler) throws org.apache.thrift.TException;

    public void GetChannelInfo(org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo> resultHandler) throws org.apache.thrift.TException;

    public void PushServerInfo(LbServerInfo info, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void GetAllOpenedChannels(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void OpenCloseChannel(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException;

    public void NotifyMessage(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void ReceiveMessage(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException;

    public void GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException;

    public void DetectFeatures(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LbServerInfo GetServersInfo() throws org.apache.thrift.TException
    {
      send_GetServersInfo();
      return recv_GetServersInfo();
    }

    public void send_GetServersInfo() throws org.apache.thrift.TException
    {
      GetServersInfo_args args = new GetServersInfo_args();
      sendBase("GetServersInfo", args);
    }

    public LbServerInfo recv_GetServersInfo() throws org.apache.thrift.TException
    {
      GetServersInfo_result result = new GetServersInfo_result();
      receiveBase(result, "GetServersInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetServersInfo failed: unknown result");
    }

    public LbChannelInfo GetChannelInfo() throws org.apache.thrift.TException
    {
      send_GetChannelInfo();
      return recv_GetChannelInfo();
    }

    public void send_GetChannelInfo() throws org.apache.thrift.TException
    {
      GetChannelInfo_args args = new GetChannelInfo_args();
      sendBase("GetChannelInfo", args);
    }

    public LbChannelInfo recv_GetChannelInfo() throws org.apache.thrift.TException
    {
      GetChannelInfo_result result = new GetChannelInfo_result();
      receiveBase(result, "GetChannelInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetChannelInfo failed: unknown result");
    }

    public CapReturn PushServerInfo(LbServerInfo info) throws org.apache.thrift.TException
    {
      send_PushServerInfo(info);
      return recv_PushServerInfo();
    }

    public void send_PushServerInfo(LbServerInfo info) throws org.apache.thrift.TException
    {
      PushServerInfo_args args = new PushServerInfo_args();
      args.setInfo(info);
      sendBase("PushServerInfo", args);
    }

    public CapReturn recv_PushServerInfo() throws org.apache.thrift.TException
    {
      PushServerInfo_result result = new PushServerInfo_result();
      receiveBase(result, "PushServerInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PushServerInfo failed: unknown result");
    }

    public java.util.List<java.lang.String> GetAllOpenedChannels() throws org.apache.thrift.TException
    {
      send_GetAllOpenedChannels();
      return recv_GetAllOpenedChannels();
    }

    public void send_GetAllOpenedChannels() throws org.apache.thrift.TException
    {
      GetAllOpenedChannels_args args = new GetAllOpenedChannels_args();
      sendBase("GetAllOpenedChannels", args);
    }

    public java.util.List<java.lang.String> recv_GetAllOpenedChannels() throws org.apache.thrift.TException
    {
      GetAllOpenedChannels_result result = new GetAllOpenedChannels_result();
      receiveBase(result, "GetAllOpenedChannels");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAllOpenedChannels failed: unknown result");
    }

    public CapReturn OpenCloseChannel(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag) throws org.apache.thrift.TException
    {
      send_OpenCloseChannel(chInfo, iOpenFlag, iModifyFlag, iAllFlag);
      return recv_OpenCloseChannel();
    }

    public void send_OpenCloseChannel(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag) throws org.apache.thrift.TException
    {
      OpenCloseChannel_args args = new OpenCloseChannel_args();
      args.setChInfo(chInfo);
      args.setIOpenFlag(iOpenFlag);
      args.setIModifyFlag(iModifyFlag);
      args.setIAllFlag(iAllFlag);
      sendBase("OpenCloseChannel", args);
    }

    public CapReturn recv_OpenCloseChannel() throws org.apache.thrift.TException
    {
      OpenCloseChannel_result result = new OpenCloseChannel_result();
      receiveBase(result, "OpenCloseChannel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "OpenCloseChannel failed: unknown result");
    }

    public java.util.List<CapFacesSet> DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException
    {
      send_DetectFaces(lstImgs);
      return recv_DetectFaces();
    }

    public void send_DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs) throws org.apache.thrift.TException
    {
      DetectFaces_args args = new DetectFaces_args();
      args.setLstImgs(lstImgs);
      sendBase("DetectFaces", args);
    }

    public java.util.List<CapFacesSet> recv_DetectFaces() throws org.apache.thrift.TException
    {
      DetectFaces_result result = new DetectFaces_result();
      receiveBase(result, "DetectFaces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DetectFaces failed: unknown result");
    }

    public CapReturn NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException
    {
      send_NotifyMessage(iMsg, strNotifyJson);
      return recv_NotifyMessage();
    }

    public void send_NotifyMessage(int iMsg, java.lang.String strNotifyJson) throws org.apache.thrift.TException
    {
      NotifyMessage_args args = new NotifyMessage_args();
      args.setIMsg(iMsg);
      args.setStrNotifyJson(strNotifyJson);
      sendBase("NotifyMessage", args);
    }

    public CapReturn recv_NotifyMessage() throws org.apache.thrift.TException
    {
      NotifyMessage_result result = new NotifyMessage_result();
      receiveBase(result, "NotifyMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "NotifyMessage failed: unknown result");
    }

    public CapReturn ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException
    {
      send_ReceiveMessage(iMsg, strReceiveJson);
      return recv_ReceiveMessage();
    }

    public void send_ReceiveMessage(int iMsg, java.lang.String strReceiveJson) throws org.apache.thrift.TException
    {
      ReceiveMessage_args args = new ReceiveMessage_args();
      args.setIMsg(iMsg);
      args.setStrReceiveJson(strReceiveJson);
      sendBase("ReceiveMessage", args);
    }

    public CapReturn recv_ReceiveMessage() throws org.apache.thrift.TException
    {
      ReceiveMessage_result result = new ReceiveMessage_result();
      receiveBase(result, "ReceiveMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReceiveMessage failed: unknown result");
    }

    public CapSceneImageResult GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException
    {
      send_GetSceneImage(strChannelID, strCapID);
      return recv_GetSceneImage();
    }

    public void send_GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID) throws org.apache.thrift.TException
    {
      GetSceneImage_args args = new GetSceneImage_args();
      args.setStrChannelID(strChannelID);
      args.setStrCapID(strCapID);
      sendBase("GetSceneImage", args);
    }

    public CapSceneImageResult recv_GetSceneImage() throws org.apache.thrift.TException
    {
      GetSceneImage_result result = new GetSceneImage_result();
      receiveBase(result, "GetSceneImage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSceneImage failed: unknown result");
    }

    public java.util.List<CapFeaturesSet> DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException
    {
      send_DetectFeatures(imgBytes);
      return recv_DetectFeatures();
    }

    public void send_DetectFeatures(java.nio.ByteBuffer imgBytes) throws org.apache.thrift.TException
    {
      DetectFeatures_args args = new DetectFeatures_args();
      args.setImgBytes(imgBytes);
      sendBase("DetectFeatures", args);
    }

    public java.util.List<CapFeaturesSet> recv_DetectFeatures() throws org.apache.thrift.TException
    {
      DetectFeatures_result result = new DetectFeatures_result();
      receiveBase(result, "DetectFeatures");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "DetectFeatures failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetServersInfo(org.apache.thrift.async.AsyncMethodCallback<LbServerInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetServersInfo_call method_call = new GetServersInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetServersInfo_call extends org.apache.thrift.async.TAsyncMethodCall<LbServerInfo> {
      public GetServersInfo_call(org.apache.thrift.async.AsyncMethodCallback<LbServerInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetServersInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetServersInfo_args args = new GetServersInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LbServerInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetServersInfo();
      }
    }

    public void GetChannelInfo(org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetChannelInfo_call method_call = new GetChannelInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetChannelInfo_call extends org.apache.thrift.async.TAsyncMethodCall<LbChannelInfo> {
      public GetChannelInfo_call(org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetChannelInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetChannelInfo_args args = new GetChannelInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LbChannelInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetChannelInfo();
      }
    }

    public void PushServerInfo(LbServerInfo info, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PushServerInfo_call method_call = new PushServerInfo_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PushServerInfo_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private LbServerInfo info;
      public PushServerInfo_call(LbServerInfo info, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PushServerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PushServerInfo_args args = new PushServerInfo_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PushServerInfo();
      }
    }

    public void GetAllOpenedChannels(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAllOpenedChannels_call method_call = new GetAllOpenedChannels_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAllOpenedChannels_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public GetAllOpenedChannels_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAllOpenedChannels", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAllOpenedChannels_args args = new GetAllOpenedChannels_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAllOpenedChannels();
      }
    }

    public void OpenCloseChannel(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      OpenCloseChannel_call method_call = new OpenCloseChannel_call(chInfo, iOpenFlag, iModifyFlag, iAllFlag, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class OpenCloseChannel_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private CapChannelConfig chInfo;
      private int iOpenFlag;
      private int iModifyFlag;
      private int iAllFlag;
      public OpenCloseChannel_call(CapChannelConfig chInfo, int iOpenFlag, int iModifyFlag, int iAllFlag, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.chInfo = chInfo;
        this.iOpenFlag = iOpenFlag;
        this.iModifyFlag = iModifyFlag;
        this.iAllFlag = iAllFlag;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("OpenCloseChannel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        OpenCloseChannel_args args = new OpenCloseChannel_args();
        args.setChInfo(chInfo);
        args.setIOpenFlag(iOpenFlag);
        args.setIModifyFlag(iModifyFlag);
        args.setIAllFlag(iAllFlag);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_OpenCloseChannel();
      }
    }

    public void DetectFaces(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DetectFaces_call method_call = new DetectFaces_call(lstImgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DetectFaces_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CapFacesSet>> {
      private java.util.List<java.nio.ByteBuffer> lstImgs;
      public DetectFaces_call(java.util.List<java.nio.ByteBuffer> lstImgs, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lstImgs = lstImgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DetectFaces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DetectFaces_args args = new DetectFaces_args();
        args.setLstImgs(lstImgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CapFacesSet> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DetectFaces();
      }
    }

    public void NotifyMessage(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      NotifyMessage_call method_call = new NotifyMessage_call(iMsg, strNotifyJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class NotifyMessage_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private int iMsg;
      private java.lang.String strNotifyJson;
      public NotifyMessage_call(int iMsg, java.lang.String strNotifyJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iMsg = iMsg;
        this.strNotifyJson = strNotifyJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("NotifyMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        NotifyMessage_args args = new NotifyMessage_args();
        args.setIMsg(iMsg);
        args.setStrNotifyJson(strNotifyJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_NotifyMessage();
      }
    }

    public void ReceiveMessage(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReceiveMessage_call method_call = new ReceiveMessage_call(iMsg, strReceiveJson, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReceiveMessage_call extends org.apache.thrift.async.TAsyncMethodCall<CapReturn> {
      private int iMsg;
      private java.lang.String strReceiveJson;
      public ReceiveMessage_call(int iMsg, java.lang.String strReceiveJson, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.iMsg = iMsg;
        this.strReceiveJson = strReceiveJson;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReceiveMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReceiveMessage_args args = new ReceiveMessage_args();
        args.setIMsg(iMsg);
        args.setStrReceiveJson(strReceiveJson);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapReturn getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReceiveMessage();
      }
    }

    public void GetSceneImage(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSceneImage_call method_call = new GetSceneImage_call(strChannelID, strCapID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSceneImage_call extends org.apache.thrift.async.TAsyncMethodCall<CapSceneImageResult> {
      private java.lang.String strChannelID;
      private java.lang.String strCapID;
      public GetSceneImage_call(java.lang.String strChannelID, java.lang.String strCapID, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.strChannelID = strChannelID;
        this.strCapID = strCapID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSceneImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSceneImage_args args = new GetSceneImage_args();
        args.setStrChannelID(strChannelID);
        args.setStrCapID(strCapID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CapSceneImageResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSceneImage();
      }
    }

    public void DetectFeatures(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DetectFeatures_call method_call = new DetectFeatures_call(imgBytes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DetectFeatures_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<CapFeaturesSet>> {
      private java.nio.ByteBuffer imgBytes;
      public DetectFeatures_call(java.nio.ByteBuffer imgBytes, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imgBytes = imgBytes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DetectFeatures", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DetectFeatures_args args = new DetectFeatures_args();
        args.setImgBytes(imgBytes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<CapFeaturesSet> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_DetectFeatures();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetServersInfo", new GetServersInfo());
      processMap.put("GetChannelInfo", new GetChannelInfo());
      processMap.put("PushServerInfo", new PushServerInfo());
      processMap.put("GetAllOpenedChannels", new GetAllOpenedChannels());
      processMap.put("OpenCloseChannel", new OpenCloseChannel());
      processMap.put("DetectFaces", new DetectFaces());
      processMap.put("NotifyMessage", new NotifyMessage());
      processMap.put("ReceiveMessage", new ReceiveMessage());
      processMap.put("GetSceneImage", new GetSceneImage());
      processMap.put("DetectFeatures", new DetectFeatures());
      return processMap;
    }

    public static class GetServersInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetServersInfo_args> {
      public GetServersInfo() {
        super("GetServersInfo");
      }

      public GetServersInfo_args getEmptyArgsInstance() {
        return new GetServersInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetServersInfo_result getResult(I iface, GetServersInfo_args args) throws org.apache.thrift.TException {
        GetServersInfo_result result = new GetServersInfo_result();
        result.success = iface.GetServersInfo();
        return result;
      }
    }

    public static class GetChannelInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetChannelInfo_args> {
      public GetChannelInfo() {
        super("GetChannelInfo");
      }

      public GetChannelInfo_args getEmptyArgsInstance() {
        return new GetChannelInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetChannelInfo_result getResult(I iface, GetChannelInfo_args args) throws org.apache.thrift.TException {
        GetChannelInfo_result result = new GetChannelInfo_result();
        result.success = iface.GetChannelInfo();
        return result;
      }
    }

    public static class PushServerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PushServerInfo_args> {
      public PushServerInfo() {
        super("PushServerInfo");
      }

      public PushServerInfo_args getEmptyArgsInstance() {
        return new PushServerInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public PushServerInfo_result getResult(I iface, PushServerInfo_args args) throws org.apache.thrift.TException {
        PushServerInfo_result result = new PushServerInfo_result();
        result.success = iface.PushServerInfo(args.info);
        return result;
      }
    }

    public static class GetAllOpenedChannels<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAllOpenedChannels_args> {
      public GetAllOpenedChannels() {
        super("GetAllOpenedChannels");
      }

      public GetAllOpenedChannels_args getEmptyArgsInstance() {
        return new GetAllOpenedChannels_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAllOpenedChannels_result getResult(I iface, GetAllOpenedChannels_args args) throws org.apache.thrift.TException {
        GetAllOpenedChannels_result result = new GetAllOpenedChannels_result();
        result.success = iface.GetAllOpenedChannels();
        return result;
      }
    }

    public static class OpenCloseChannel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, OpenCloseChannel_args> {
      public OpenCloseChannel() {
        super("OpenCloseChannel");
      }

      public OpenCloseChannel_args getEmptyArgsInstance() {
        return new OpenCloseChannel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public OpenCloseChannel_result getResult(I iface, OpenCloseChannel_args args) throws org.apache.thrift.TException {
        OpenCloseChannel_result result = new OpenCloseChannel_result();
        result.success = iface.OpenCloseChannel(args.chInfo, args.iOpenFlag, args.iModifyFlag, args.iAllFlag);
        return result;
      }
    }

    public static class DetectFaces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DetectFaces_args> {
      public DetectFaces() {
        super("DetectFaces");
      }

      public DetectFaces_args getEmptyArgsInstance() {
        return new DetectFaces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DetectFaces_result getResult(I iface, DetectFaces_args args) throws org.apache.thrift.TException {
        DetectFaces_result result = new DetectFaces_result();
        result.success = iface.DetectFaces(args.lstImgs);
        return result;
      }
    }

    public static class NotifyMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, NotifyMessage_args> {
      public NotifyMessage() {
        super("NotifyMessage");
      }

      public NotifyMessage_args getEmptyArgsInstance() {
        return new NotifyMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public NotifyMessage_result getResult(I iface, NotifyMessage_args args) throws org.apache.thrift.TException {
        NotifyMessage_result result = new NotifyMessage_result();
        result.success = iface.NotifyMessage(args.iMsg, args.strNotifyJson);
        return result;
      }
    }

    public static class ReceiveMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReceiveMessage_args> {
      public ReceiveMessage() {
        super("ReceiveMessage");
      }

      public ReceiveMessage_args getEmptyArgsInstance() {
        return new ReceiveMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReceiveMessage_result getResult(I iface, ReceiveMessage_args args) throws org.apache.thrift.TException {
        ReceiveMessage_result result = new ReceiveMessage_result();
        result.success = iface.ReceiveMessage(args.iMsg, args.strReceiveJson);
        return result;
      }
    }

    public static class GetSceneImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSceneImage_args> {
      public GetSceneImage() {
        super("GetSceneImage");
      }

      public GetSceneImage_args getEmptyArgsInstance() {
        return new GetSceneImage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSceneImage_result getResult(I iface, GetSceneImage_args args) throws org.apache.thrift.TException {
        GetSceneImage_result result = new GetSceneImage_result();
        result.success = iface.GetSceneImage(args.strChannelID, args.strCapID);
        return result;
      }
    }

    public static class DetectFeatures<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DetectFeatures_args> {
      public DetectFeatures() {
        super("DetectFeatures");
      }

      public DetectFeatures_args getEmptyArgsInstance() {
        return new DetectFeatures_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DetectFeatures_result getResult(I iface, DetectFeatures_args args) throws org.apache.thrift.TException {
        DetectFeatures_result result = new DetectFeatures_result();
        result.success = iface.DetectFeatures(args.imgBytes);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetServersInfo", new GetServersInfo());
      processMap.put("GetChannelInfo", new GetChannelInfo());
      processMap.put("PushServerInfo", new PushServerInfo());
      processMap.put("GetAllOpenedChannels", new GetAllOpenedChannels());
      processMap.put("OpenCloseChannel", new OpenCloseChannel());
      processMap.put("DetectFaces", new DetectFaces());
      processMap.put("NotifyMessage", new NotifyMessage());
      processMap.put("ReceiveMessage", new ReceiveMessage());
      processMap.put("GetSceneImage", new GetSceneImage());
      processMap.put("DetectFeatures", new DetectFeatures());
      return processMap;
    }

    public static class GetServersInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetServersInfo_args, LbServerInfo> {
      public GetServersInfo() {
        super("GetServersInfo");
      }

      public GetServersInfo_args getEmptyArgsInstance() {
        return new GetServersInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<LbServerInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<LbServerInfo>() { 
          public void onComplete(LbServerInfo o) {
            GetServersInfo_result result = new GetServersInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetServersInfo_result result = new GetServersInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetServersInfo_args args, org.apache.thrift.async.AsyncMethodCallback<LbServerInfo> resultHandler) throws org.apache.thrift.TException {
        iface.GetServersInfo(resultHandler);
      }
    }

    public static class GetChannelInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetChannelInfo_args, LbChannelInfo> {
      public GetChannelInfo() {
        super("GetChannelInfo");
      }

      public GetChannelInfo_args getEmptyArgsInstance() {
        return new GetChannelInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo>() { 
          public void onComplete(LbChannelInfo o) {
            GetChannelInfo_result result = new GetChannelInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetChannelInfo_result result = new GetChannelInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetChannelInfo_args args, org.apache.thrift.async.AsyncMethodCallback<LbChannelInfo> resultHandler) throws org.apache.thrift.TException {
        iface.GetChannelInfo(resultHandler);
      }
    }

    public static class PushServerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PushServerInfo_args, CapReturn> {
      public PushServerInfo() {
        super("PushServerInfo");
      }

      public PushServerInfo_args getEmptyArgsInstance() {
        return new PushServerInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            PushServerInfo_result result = new PushServerInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            PushServerInfo_result result = new PushServerInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, PushServerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.PushServerInfo(args.info,resultHandler);
      }
    }

    public static class GetAllOpenedChannels<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAllOpenedChannels_args, java.util.List<java.lang.String>> {
      public GetAllOpenedChannels() {
        super("GetAllOpenedChannels");
      }

      public GetAllOpenedChannels_args getEmptyArgsInstance() {
        return new GetAllOpenedChannels_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            GetAllOpenedChannels_result result = new GetAllOpenedChannels_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetAllOpenedChannels_result result = new GetAllOpenedChannels_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAllOpenedChannels_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.GetAllOpenedChannels(resultHandler);
      }
    }

    public static class OpenCloseChannel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, OpenCloseChannel_args, CapReturn> {
      public OpenCloseChannel() {
        super("OpenCloseChannel");
      }

      public OpenCloseChannel_args getEmptyArgsInstance() {
        return new OpenCloseChannel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            OpenCloseChannel_result result = new OpenCloseChannel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            OpenCloseChannel_result result = new OpenCloseChannel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, OpenCloseChannel_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.OpenCloseChannel(args.chInfo, args.iOpenFlag, args.iModifyFlag, args.iAllFlag,resultHandler);
      }
    }

    public static class DetectFaces<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DetectFaces_args, java.util.List<CapFacesSet>> {
      public DetectFaces() {
        super("DetectFaces");
      }

      public DetectFaces_args getEmptyArgsInstance() {
        return new DetectFaces_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>>() { 
          public void onComplete(java.util.List<CapFacesSet> o) {
            DetectFaces_result result = new DetectFaces_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DetectFaces_result result = new DetectFaces_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DetectFaces_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFacesSet>> resultHandler) throws org.apache.thrift.TException {
        iface.DetectFaces(args.lstImgs,resultHandler);
      }
    }

    public static class NotifyMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, NotifyMessage_args, CapReturn> {
      public NotifyMessage() {
        super("NotifyMessage");
      }

      public NotifyMessage_args getEmptyArgsInstance() {
        return new NotifyMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            NotifyMessage_result result = new NotifyMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            NotifyMessage_result result = new NotifyMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, NotifyMessage_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.NotifyMessage(args.iMsg, args.strNotifyJson,resultHandler);
      }
    }

    public static class ReceiveMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReceiveMessage_args, CapReturn> {
      public ReceiveMessage() {
        super("ReceiveMessage");
      }

      public ReceiveMessage_args getEmptyArgsInstance() {
        return new ReceiveMessage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapReturn> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapReturn>() { 
          public void onComplete(CapReturn o) {
            ReceiveMessage_result result = new ReceiveMessage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ReceiveMessage_result result = new ReceiveMessage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReceiveMessage_args args, org.apache.thrift.async.AsyncMethodCallback<CapReturn> resultHandler) throws org.apache.thrift.TException {
        iface.ReceiveMessage(args.iMsg, args.strReceiveJson,resultHandler);
      }
    }

    public static class GetSceneImage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSceneImage_args, CapSceneImageResult> {
      public GetSceneImage() {
        super("GetSceneImage");
      }

      public GetSceneImage_args getEmptyArgsInstance() {
        return new GetSceneImage_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult>() { 
          public void onComplete(CapSceneImageResult o) {
            GetSceneImage_result result = new GetSceneImage_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            GetSceneImage_result result = new GetSceneImage_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSceneImage_args args, org.apache.thrift.async.AsyncMethodCallback<CapSceneImageResult> resultHandler) throws org.apache.thrift.TException {
        iface.GetSceneImage(args.strChannelID, args.strCapID,resultHandler);
      }
    }

    public static class DetectFeatures<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DetectFeatures_args, java.util.List<CapFeaturesSet>> {
      public DetectFeatures() {
        super("DetectFeatures");
      }

      public DetectFeatures_args getEmptyArgsInstance() {
        return new DetectFeatures_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>>() { 
          public void onComplete(java.util.List<CapFeaturesSet> o) {
            DetectFeatures_result result = new DetectFeatures_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            DetectFeatures_result result = new DetectFeatures_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DetectFeatures_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<CapFeaturesSet>> resultHandler) throws org.apache.thrift.TException {
        iface.DetectFeatures(args.imgBytes,resultHandler);
      }
    }

  }

  public static class GetServersInfo_args implements org.apache.thrift.TBase<GetServersInfo_args, GetServersInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetServersInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetServersInfo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetServersInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetServersInfo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetServersInfo_args.class, metaDataMap);
    }

    public GetServersInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetServersInfo_args(GetServersInfo_args other) {
    }

    public GetServersInfo_args deepCopy() {
      return new GetServersInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetServersInfo_args)
        return this.equals((GetServersInfo_args)that);
      return false;
    }

    public boolean equals(GetServersInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetServersInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetServersInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetServersInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_argsStandardScheme getScheme() {
        return new GetServersInfo_argsStandardScheme();
      }
    }

    private static class GetServersInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetServersInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetServersInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_argsTupleScheme getScheme() {
        return new GetServersInfo_argsTupleScheme();
      }
    }

    private static class GetServersInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetServersInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetServersInfo_result implements org.apache.thrift.TBase<GetServersInfo_result, GetServersInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetServersInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetServersInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetServersInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetServersInfo_resultTupleSchemeFactory();

    public LbServerInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LbServerInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetServersInfo_result.class, metaDataMap);
    }

    public GetServersInfo_result() {
    }

    public GetServersInfo_result(
      LbServerInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetServersInfo_result(GetServersInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new LbServerInfo(other.success);
      }
    }

    public GetServersInfo_result deepCopy() {
      return new GetServersInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LbServerInfo getSuccess() {
      return this.success;
    }

    public GetServersInfo_result setSuccess(LbServerInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LbServerInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetServersInfo_result)
        return this.equals((GetServersInfo_result)that);
      return false;
    }

    public boolean equals(GetServersInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetServersInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetServersInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetServersInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_resultStandardScheme getScheme() {
        return new GetServersInfo_resultStandardScheme();
      }
    }

    private static class GetServersInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetServersInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LbServerInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetServersInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetServersInfo_resultTupleScheme getScheme() {
        return new GetServersInfo_resultTupleScheme();
      }
    }

    private static class GetServersInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetServersInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetServersInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LbServerInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetChannelInfo_args implements org.apache.thrift.TBase<GetChannelInfo_args, GetChannelInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetChannelInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChannelInfo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetChannelInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetChannelInfo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelInfo_args.class, metaDataMap);
    }

    public GetChannelInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChannelInfo_args(GetChannelInfo_args other) {
    }

    public GetChannelInfo_args deepCopy() {
      return new GetChannelInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChannelInfo_args)
        return this.equals((GetChannelInfo_args)that);
      return false;
    }

    public boolean equals(GetChannelInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetChannelInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetChannelInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChannelInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetChannelInfo_argsStandardScheme getScheme() {
        return new GetChannelInfo_argsStandardScheme();
      }
    }

    private static class GetChannelInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetChannelInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChannelInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetChannelInfo_argsTupleScheme getScheme() {
        return new GetChannelInfo_argsTupleScheme();
      }
    }

    private static class GetChannelInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetChannelInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetChannelInfo_result implements org.apache.thrift.TBase<GetChannelInfo_result, GetChannelInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetChannelInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetChannelInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetChannelInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetChannelInfo_resultTupleSchemeFactory();

    public LbChannelInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LbChannelInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetChannelInfo_result.class, metaDataMap);
    }

    public GetChannelInfo_result() {
    }

    public GetChannelInfo_result(
      LbChannelInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetChannelInfo_result(GetChannelInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new LbChannelInfo(other.success);
      }
    }

    public GetChannelInfo_result deepCopy() {
      return new GetChannelInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LbChannelInfo getSuccess() {
      return this.success;
    }

    public GetChannelInfo_result setSuccess(LbChannelInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LbChannelInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetChannelInfo_result)
        return this.equals((GetChannelInfo_result)that);
      return false;
    }

    public boolean equals(GetChannelInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetChannelInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetChannelInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetChannelInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetChannelInfo_resultStandardScheme getScheme() {
        return new GetChannelInfo_resultStandardScheme();
      }
    }

    private static class GetChannelInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetChannelInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetChannelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LbChannelInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetChannelInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetChannelInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetChannelInfo_resultTupleScheme getScheme() {
        return new GetChannelInfo_resultTupleScheme();
      }
    }

    private static class GetChannelInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetChannelInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetChannelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetChannelInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LbChannelInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PushServerInfo_args implements org.apache.thrift.TBase<PushServerInfo_args, PushServerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<PushServerInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushServerInfo_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PushServerInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PushServerInfo_argsTupleSchemeFactory();

    public LbServerInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LbServerInfo.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushServerInfo_args.class, metaDataMap);
    }

    public PushServerInfo_args() {
    }

    public PushServerInfo_args(
      LbServerInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushServerInfo_args(PushServerInfo_args other) {
      if (other.isSetInfo()) {
        this.info = new LbServerInfo(other.info);
      }
    }

    public PushServerInfo_args deepCopy() {
      return new PushServerInfo_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    public LbServerInfo getInfo() {
      return this.info;
    }

    public PushServerInfo_args setInfo(LbServerInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((LbServerInfo)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PushServerInfo_args)
        return this.equals((PushServerInfo_args)that);
      return false;
    }

    public boolean equals(PushServerInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInfo()) ? 131071 : 524287);
      if (isSetInfo())
        hashCode = hashCode * 8191 + info.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PushServerInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PushServerInfo_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushServerInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushServerInfo_argsStandardScheme getScheme() {
        return new PushServerInfo_argsStandardScheme();
      }
    }

    private static class PushServerInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<PushServerInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new LbServerInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushServerInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushServerInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushServerInfo_argsTupleScheme getScheme() {
        return new PushServerInfo_argsTupleScheme();
      }
    }

    private static class PushServerInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<PushServerInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushServerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new LbServerInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PushServerInfo_result implements org.apache.thrift.TBase<PushServerInfo_result, PushServerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<PushServerInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushServerInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PushServerInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PushServerInfo_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushServerInfo_result.class, metaDataMap);
    }

    public PushServerInfo_result() {
    }

    public PushServerInfo_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushServerInfo_result(PushServerInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public PushServerInfo_result deepCopy() {
      return new PushServerInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public PushServerInfo_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PushServerInfo_result)
        return this.equals((PushServerInfo_result)that);
      return false;
    }

    public boolean equals(PushServerInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PushServerInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PushServerInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushServerInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushServerInfo_resultStandardScheme getScheme() {
        return new PushServerInfo_resultStandardScheme();
      }
    }

    private static class PushServerInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<PushServerInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushServerInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushServerInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PushServerInfo_resultTupleScheme getScheme() {
        return new PushServerInfo_resultTupleScheme();
      }
    }

    private static class PushServerInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<PushServerInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushServerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAllOpenedChannels_args implements org.apache.thrift.TBase<GetAllOpenedChannels_args, GetAllOpenedChannels_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllOpenedChannels_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllOpenedChannels_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAllOpenedChannels_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAllOpenedChannels_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllOpenedChannels_args.class, metaDataMap);
    }

    public GetAllOpenedChannels_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllOpenedChannels_args(GetAllOpenedChannels_args other) {
    }

    public GetAllOpenedChannels_args deepCopy() {
      return new GetAllOpenedChannels_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllOpenedChannels_args)
        return this.equals((GetAllOpenedChannels_args)that);
      return false;
    }

    public boolean equals(GetAllOpenedChannels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(GetAllOpenedChannels_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAllOpenedChannels_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllOpenedChannels_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAllOpenedChannels_argsStandardScheme getScheme() {
        return new GetAllOpenedChannels_argsStandardScheme();
      }
    }

    private static class GetAllOpenedChannels_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAllOpenedChannels_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllOpenedChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllOpenedChannels_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllOpenedChannels_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAllOpenedChannels_argsTupleScheme getScheme() {
        return new GetAllOpenedChannels_argsTupleScheme();
      }
    }

    private static class GetAllOpenedChannels_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAllOpenedChannels_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllOpenedChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllOpenedChannels_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetAllOpenedChannels_result implements org.apache.thrift.TBase<GetAllOpenedChannels_result, GetAllOpenedChannels_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAllOpenedChannels_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAllOpenedChannels_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetAllOpenedChannels_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetAllOpenedChannels_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAllOpenedChannels_result.class, metaDataMap);
    }

    public GetAllOpenedChannels_result() {
    }

    public GetAllOpenedChannels_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAllOpenedChannels_result(GetAllOpenedChannels_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public GetAllOpenedChannels_result deepCopy() {
      return new GetAllOpenedChannels_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public GetAllOpenedChannels_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAllOpenedChannels_result)
        return this.equals((GetAllOpenedChannels_result)that);
      return false;
    }

    public boolean equals(GetAllOpenedChannels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetAllOpenedChannels_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetAllOpenedChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAllOpenedChannels_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAllOpenedChannels_resultStandardScheme getScheme() {
        return new GetAllOpenedChannels_resultStandardScheme();
      }
    }

    private static class GetAllOpenedChannels_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetAllOpenedChannels_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAllOpenedChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list120.size);
                  java.lang.String _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = iprot.readString();
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAllOpenedChannels_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter123 : struct.success)
            {
              oprot.writeString(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAllOpenedChannels_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetAllOpenedChannels_resultTupleScheme getScheme() {
        return new GetAllOpenedChannels_resultTupleScheme();
      }
    }

    private static class GetAllOpenedChannels_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetAllOpenedChannels_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAllOpenedChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter124 : struct.success)
            {
              oprot.writeString(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAllOpenedChannels_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list125.size);
            java.lang.String _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = iprot.readString();
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class OpenCloseChannel_args implements org.apache.thrift.TBase<OpenCloseChannel_args, OpenCloseChannel_args._Fields>, java.io.Serializable, Cloneable, Comparable<OpenCloseChannel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenCloseChannel_args");

    private static final org.apache.thrift.protocol.TField CH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("chInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField I_OPEN_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("iOpenFlag", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField I_MODIFY_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("iModifyFlag", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField I_ALL_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("iAllFlag", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenCloseChannel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenCloseChannel_argsTupleSchemeFactory();

    public CapChannelConfig chInfo; // required
    public int iOpenFlag; // required
    public int iModifyFlag; // required
    public int iAllFlag; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CH_INFO((short)1, "chInfo"),
      I_OPEN_FLAG((short)2, "iOpenFlag"),
      I_MODIFY_FLAG((short)3, "iModifyFlag"),
      I_ALL_FLAG((short)4, "iAllFlag");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CH_INFO
            return CH_INFO;
          case 2: // I_OPEN_FLAG
            return I_OPEN_FLAG;
          case 3: // I_MODIFY_FLAG
            return I_MODIFY_FLAG;
          case 4: // I_ALL_FLAG
            return I_ALL_FLAG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IOPENFLAG_ISSET_ID = 0;
    private static final int __IMODIFYFLAG_ISSET_ID = 1;
    private static final int __IALLFLAG_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CH_INFO, new org.apache.thrift.meta_data.FieldMetaData("chInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapChannelConfig.class)));
      tmpMap.put(_Fields.I_OPEN_FLAG, new org.apache.thrift.meta_data.FieldMetaData("iOpenFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.I_MODIFY_FLAG, new org.apache.thrift.meta_data.FieldMetaData("iModifyFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.I_ALL_FLAG, new org.apache.thrift.meta_data.FieldMetaData("iAllFlag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenCloseChannel_args.class, metaDataMap);
    }

    public OpenCloseChannel_args() {
    }

    public OpenCloseChannel_args(
      CapChannelConfig chInfo,
      int iOpenFlag,
      int iModifyFlag,
      int iAllFlag)
    {
      this();
      this.chInfo = chInfo;
      this.iOpenFlag = iOpenFlag;
      setIOpenFlagIsSet(true);
      this.iModifyFlag = iModifyFlag;
      setIModifyFlagIsSet(true);
      this.iAllFlag = iAllFlag;
      setIAllFlagIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OpenCloseChannel_args(OpenCloseChannel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetChInfo()) {
        this.chInfo = new CapChannelConfig(other.chInfo);
      }
      this.iOpenFlag = other.iOpenFlag;
      this.iModifyFlag = other.iModifyFlag;
      this.iAllFlag = other.iAllFlag;
    }

    public OpenCloseChannel_args deepCopy() {
      return new OpenCloseChannel_args(this);
    }

    @Override
    public void clear() {
      this.chInfo = null;
      setIOpenFlagIsSet(false);
      this.iOpenFlag = 0;
      setIModifyFlagIsSet(false);
      this.iModifyFlag = 0;
      setIAllFlagIsSet(false);
      this.iAllFlag = 0;
    }

    public CapChannelConfig getChInfo() {
      return this.chInfo;
    }

    public OpenCloseChannel_args setChInfo(CapChannelConfig chInfo) {
      this.chInfo = chInfo;
      return this;
    }

    public void unsetChInfo() {
      this.chInfo = null;
    }

    /** Returns true if field chInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetChInfo() {
      return this.chInfo != null;
    }

    public void setChInfoIsSet(boolean value) {
      if (!value) {
        this.chInfo = null;
      }
    }

    public int getIOpenFlag() {
      return this.iOpenFlag;
    }

    public OpenCloseChannel_args setIOpenFlag(int iOpenFlag) {
      this.iOpenFlag = iOpenFlag;
      setIOpenFlagIsSet(true);
      return this;
    }

    public void unsetIOpenFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IOPENFLAG_ISSET_ID);
    }

    /** Returns true if field iOpenFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetIOpenFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IOPENFLAG_ISSET_ID);
    }

    public void setIOpenFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IOPENFLAG_ISSET_ID, value);
    }

    public int getIModifyFlag() {
      return this.iModifyFlag;
    }

    public OpenCloseChannel_args setIModifyFlag(int iModifyFlag) {
      this.iModifyFlag = iModifyFlag;
      setIModifyFlagIsSet(true);
      return this;
    }

    public void unsetIModifyFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMODIFYFLAG_ISSET_ID);
    }

    /** Returns true if field iModifyFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetIModifyFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMODIFYFLAG_ISSET_ID);
    }

    public void setIModifyFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMODIFYFLAG_ISSET_ID, value);
    }

    public int getIAllFlag() {
      return this.iAllFlag;
    }

    public OpenCloseChannel_args setIAllFlag(int iAllFlag) {
      this.iAllFlag = iAllFlag;
      setIAllFlagIsSet(true);
      return this;
    }

    public void unsetIAllFlag() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IALLFLAG_ISSET_ID);
    }

    /** Returns true if field iAllFlag is set (has been assigned a value) and false otherwise */
    public boolean isSetIAllFlag() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IALLFLAG_ISSET_ID);
    }

    public void setIAllFlagIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IALLFLAG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CH_INFO:
        if (value == null) {
          unsetChInfo();
        } else {
          setChInfo((CapChannelConfig)value);
        }
        break;

      case I_OPEN_FLAG:
        if (value == null) {
          unsetIOpenFlag();
        } else {
          setIOpenFlag((java.lang.Integer)value);
        }
        break;

      case I_MODIFY_FLAG:
        if (value == null) {
          unsetIModifyFlag();
        } else {
          setIModifyFlag((java.lang.Integer)value);
        }
        break;

      case I_ALL_FLAG:
        if (value == null) {
          unsetIAllFlag();
        } else {
          setIAllFlag((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CH_INFO:
        return getChInfo();

      case I_OPEN_FLAG:
        return getIOpenFlag();

      case I_MODIFY_FLAG:
        return getIModifyFlag();

      case I_ALL_FLAG:
        return getIAllFlag();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CH_INFO:
        return isSetChInfo();
      case I_OPEN_FLAG:
        return isSetIOpenFlag();
      case I_MODIFY_FLAG:
        return isSetIModifyFlag();
      case I_ALL_FLAG:
        return isSetIAllFlag();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof OpenCloseChannel_args)
        return this.equals((OpenCloseChannel_args)that);
      return false;
    }

    public boolean equals(OpenCloseChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chInfo = true && this.isSetChInfo();
      boolean that_present_chInfo = true && that.isSetChInfo();
      if (this_present_chInfo || that_present_chInfo) {
        if (!(this_present_chInfo && that_present_chInfo))
          return false;
        if (!this.chInfo.equals(that.chInfo))
          return false;
      }

      boolean this_present_iOpenFlag = true;
      boolean that_present_iOpenFlag = true;
      if (this_present_iOpenFlag || that_present_iOpenFlag) {
        if (!(this_present_iOpenFlag && that_present_iOpenFlag))
          return false;
        if (this.iOpenFlag != that.iOpenFlag)
          return false;
      }

      boolean this_present_iModifyFlag = true;
      boolean that_present_iModifyFlag = true;
      if (this_present_iModifyFlag || that_present_iModifyFlag) {
        if (!(this_present_iModifyFlag && that_present_iModifyFlag))
          return false;
        if (this.iModifyFlag != that.iModifyFlag)
          return false;
      }

      boolean this_present_iAllFlag = true;
      boolean that_present_iAllFlag = true;
      if (this_present_iAllFlag || that_present_iAllFlag) {
        if (!(this_present_iAllFlag && that_present_iAllFlag))
          return false;
        if (this.iAllFlag != that.iAllFlag)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetChInfo()) ? 131071 : 524287);
      if (isSetChInfo())
        hashCode = hashCode * 8191 + chInfo.hashCode();

      hashCode = hashCode * 8191 + iOpenFlag;

      hashCode = hashCode * 8191 + iModifyFlag;

      hashCode = hashCode * 8191 + iAllFlag;

      return hashCode;
    }

    @Override
    public int compareTo(OpenCloseChannel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetChInfo()).compareTo(other.isSetChInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chInfo, other.chInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIOpenFlag()).compareTo(other.isSetIOpenFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIOpenFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iOpenFlag, other.iOpenFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIModifyFlag()).compareTo(other.isSetIModifyFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIModifyFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iModifyFlag, other.iModifyFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIAllFlag()).compareTo(other.isSetIAllFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIAllFlag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iAllFlag, other.iAllFlag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenCloseChannel_args(");
      boolean first = true;

      sb.append("chInfo:");
      if (this.chInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.chInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("iOpenFlag:");
      sb.append(this.iOpenFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iModifyFlag:");
      sb.append(this.iModifyFlag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("iAllFlag:");
      sb.append(this.iAllFlag);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (chInfo != null) {
        chInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OpenCloseChannel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannel_argsStandardScheme getScheme() {
        return new OpenCloseChannel_argsStandardScheme();
      }
    }

    private static class OpenCloseChannel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenCloseChannel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OpenCloseChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CH_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.chInfo = new CapChannelConfig();
                struct.chInfo.read(iprot);
                struct.setChInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // I_OPEN_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iOpenFlag = iprot.readI32();
                struct.setIOpenFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // I_MODIFY_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iModifyFlag = iprot.readI32();
                struct.setIModifyFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // I_ALL_FLAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iAllFlag = iprot.readI32();
                struct.setIAllFlagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OpenCloseChannel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.chInfo != null) {
          oprot.writeFieldBegin(CH_INFO_FIELD_DESC);
          struct.chInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(I_OPEN_FLAG_FIELD_DESC);
        oprot.writeI32(struct.iOpenFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_MODIFY_FLAG_FIELD_DESC);
        oprot.writeI32(struct.iModifyFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(I_ALL_FLAG_FIELD_DESC);
        oprot.writeI32(struct.iAllFlag);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OpenCloseChannel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannel_argsTupleScheme getScheme() {
        return new OpenCloseChannel_argsTupleScheme();
      }
    }

    private static class OpenCloseChannel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenCloseChannel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetChInfo()) {
          optionals.set(0);
        }
        if (struct.isSetIOpenFlag()) {
          optionals.set(1);
        }
        if (struct.isSetIModifyFlag()) {
          optionals.set(2);
        }
        if (struct.isSetIAllFlag()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetChInfo()) {
          struct.chInfo.write(oprot);
        }
        if (struct.isSetIOpenFlag()) {
          oprot.writeI32(struct.iOpenFlag);
        }
        if (struct.isSetIModifyFlag()) {
          oprot.writeI32(struct.iModifyFlag);
        }
        if (struct.isSetIAllFlag()) {
          oprot.writeI32(struct.iAllFlag);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.chInfo = new CapChannelConfig();
          struct.chInfo.read(iprot);
          struct.setChInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.iOpenFlag = iprot.readI32();
          struct.setIOpenFlagIsSet(true);
        }
        if (incoming.get(2)) {
          struct.iModifyFlag = iprot.readI32();
          struct.setIModifyFlagIsSet(true);
        }
        if (incoming.get(3)) {
          struct.iAllFlag = iprot.readI32();
          struct.setIAllFlagIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class OpenCloseChannel_result implements org.apache.thrift.TBase<OpenCloseChannel_result, OpenCloseChannel_result._Fields>, java.io.Serializable, Cloneable, Comparable<OpenCloseChannel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenCloseChannel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OpenCloseChannel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OpenCloseChannel_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenCloseChannel_result.class, metaDataMap);
    }

    public OpenCloseChannel_result() {
    }

    public OpenCloseChannel_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public OpenCloseChannel_result(OpenCloseChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public OpenCloseChannel_result deepCopy() {
      return new OpenCloseChannel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public OpenCloseChannel_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof OpenCloseChannel_result)
        return this.equals((OpenCloseChannel_result)that);
      return false;
    }

    public boolean equals(OpenCloseChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(OpenCloseChannel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("OpenCloseChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class OpenCloseChannel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannel_resultStandardScheme getScheme() {
        return new OpenCloseChannel_resultStandardScheme();
      }
    }

    private static class OpenCloseChannel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<OpenCloseChannel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, OpenCloseChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, OpenCloseChannel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class OpenCloseChannel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public OpenCloseChannel_resultTupleScheme getScheme() {
        return new OpenCloseChannel_resultTupleScheme();
      }
    }

    private static class OpenCloseChannel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<OpenCloseChannel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, OpenCloseChannel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFaces_args implements org.apache.thrift.TBase<DetectFaces_args, DetectFaces_args._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFaces_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFaces_args");

    private static final org.apache.thrift.protocol.TField LST_IMGS_FIELD_DESC = new org.apache.thrift.protocol.TField("lstImgs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFaces_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFaces_argsTupleSchemeFactory();

    public java.util.List<java.nio.ByteBuffer> lstImgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LST_IMGS((short)1, "lstImgs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LST_IMGS
            return LST_IMGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LST_IMGS, new org.apache.thrift.meta_data.FieldMetaData("lstImgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFaces_args.class, metaDataMap);
    }

    public DetectFaces_args() {
    }

    public DetectFaces_args(
      java.util.List<java.nio.ByteBuffer> lstImgs)
    {
      this();
      this.lstImgs = lstImgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFaces_args(DetectFaces_args other) {
      if (other.isSetLstImgs()) {
        java.util.List<java.nio.ByteBuffer> __this__lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(other.lstImgs);
        this.lstImgs = __this__lstImgs;
      }
    }

    public DetectFaces_args deepCopy() {
      return new DetectFaces_args(this);
    }

    @Override
    public void clear() {
      this.lstImgs = null;
    }

    public int getLstImgsSize() {
      return (this.lstImgs == null) ? 0 : this.lstImgs.size();
    }

    public java.util.Iterator<java.nio.ByteBuffer> getLstImgsIterator() {
      return (this.lstImgs == null) ? null : this.lstImgs.iterator();
    }

    public void addToLstImgs(java.nio.ByteBuffer elem) {
      if (this.lstImgs == null) {
        this.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.lstImgs.add(elem);
    }

    public java.util.List<java.nio.ByteBuffer> getLstImgs() {
      return this.lstImgs;
    }

    public DetectFaces_args setLstImgs(java.util.List<java.nio.ByteBuffer> lstImgs) {
      this.lstImgs = lstImgs;
      return this;
    }

    public void unsetLstImgs() {
      this.lstImgs = null;
    }

    /** Returns true if field lstImgs is set (has been assigned a value) and false otherwise */
    public boolean isSetLstImgs() {
      return this.lstImgs != null;
    }

    public void setLstImgsIsSet(boolean value) {
      if (!value) {
        this.lstImgs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LST_IMGS:
        if (value == null) {
          unsetLstImgs();
        } else {
          setLstImgs((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LST_IMGS:
        return getLstImgs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LST_IMGS:
        return isSetLstImgs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFaces_args)
        return this.equals((DetectFaces_args)that);
      return false;
    }

    public boolean equals(DetectFaces_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lstImgs = true && this.isSetLstImgs();
      boolean that_present_lstImgs = true && that.isSetLstImgs();
      if (this_present_lstImgs || that_present_lstImgs) {
        if (!(this_present_lstImgs && that_present_lstImgs))
          return false;
        if (!this.lstImgs.equals(that.lstImgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLstImgs()) ? 131071 : 524287);
      if (isSetLstImgs())
        hashCode = hashCode * 8191 + lstImgs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFaces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLstImgs()).compareTo(other.isSetLstImgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLstImgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lstImgs, other.lstImgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFaces_args(");
      boolean first = true;

      sb.append("lstImgs:");
      if (this.lstImgs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.lstImgs, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFaces_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_argsStandardScheme getScheme() {
        return new DetectFaces_argsStandardScheme();
      }
    }

    private static class DetectFaces_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFaces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LST_IMGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(_list128.size);
                  java.nio.ByteBuffer _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = iprot.readBinary();
                    struct.lstImgs.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setLstImgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFaces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lstImgs != null) {
          oprot.writeFieldBegin(LST_IMGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.lstImgs.size()));
            for (java.nio.ByteBuffer _iter131 : struct.lstImgs)
            {
              oprot.writeBinary(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFaces_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_argsTupleScheme getScheme() {
        return new DetectFaces_argsTupleScheme();
      }
    }

    private static class DetectFaces_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFaces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLstImgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLstImgs()) {
          {
            oprot.writeI32(struct.lstImgs.size());
            for (java.nio.ByteBuffer _iter132 : struct.lstImgs)
            {
              oprot.writeBinary(_iter132);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.lstImgs = new java.util.ArrayList<java.nio.ByteBuffer>(_list133.size);
            java.nio.ByteBuffer _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = iprot.readBinary();
              struct.lstImgs.add(_elem134);
            }
          }
          struct.setLstImgsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFaces_result implements org.apache.thrift.TBase<DetectFaces_result, DetectFaces_result._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFaces_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFaces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFaces_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFaces_resultTupleSchemeFactory();

    public java.util.List<CapFacesSet> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapFacesSet.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFaces_result.class, metaDataMap);
    }

    public DetectFaces_result() {
    }

    public DetectFaces_result(
      java.util.List<CapFacesSet> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFaces_result(DetectFaces_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CapFacesSet> __this__success = new java.util.ArrayList<CapFacesSet>(other.success.size());
        for (CapFacesSet other_element : other.success) {
          __this__success.add(new CapFacesSet(other_element));
        }
        this.success = __this__success;
      }
    }

    public DetectFaces_result deepCopy() {
      return new DetectFaces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CapFacesSet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CapFacesSet elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CapFacesSet>();
      }
      this.success.add(elem);
    }

    public java.util.List<CapFacesSet> getSuccess() {
      return this.success;
    }

    public DetectFaces_result setSuccess(java.util.List<CapFacesSet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CapFacesSet>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFaces_result)
        return this.equals((DetectFaces_result)that);
      return false;
    }

    public boolean equals(DetectFaces_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFaces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFaces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFaces_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_resultStandardScheme getScheme() {
        return new DetectFaces_resultStandardScheme();
      }
    }

    private static class DetectFaces_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFaces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CapFacesSet>(_list136.size);
                  CapFacesSet _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new CapFacesSet();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFaces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CapFacesSet _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFaces_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFaces_resultTupleScheme getScheme() {
        return new DetectFaces_resultTupleScheme();
      }
    }

    private static class DetectFaces_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFaces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CapFacesSet _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CapFacesSet>(_list141.size);
            CapFacesSet _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new CapFacesSet();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class NotifyMessage_args implements org.apache.thrift.TBase<NotifyMessage_args, NotifyMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyMessage_args");

    private static final org.apache.thrift.protocol.TField I_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("iMsg", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STR_NOTIFY_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("strNotifyJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifyMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifyMessage_argsTupleSchemeFactory();

    public int iMsg; // required
    public java.lang.String strNotifyJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_MSG((short)1, "iMsg"),
      STR_NOTIFY_JSON((short)2, "strNotifyJson");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_MSG
            return I_MSG;
          case 2: // STR_NOTIFY_JSON
            return STR_NOTIFY_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_MSG, new org.apache.thrift.meta_data.FieldMetaData("iMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_NOTIFY_JSON, new org.apache.thrift.meta_data.FieldMetaData("strNotifyJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyMessage_args.class, metaDataMap);
    }

    public NotifyMessage_args() {
    }

    public NotifyMessage_args(
      int iMsg,
      java.lang.String strNotifyJson)
    {
      this();
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      this.strNotifyJson = strNotifyJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NotifyMessage_args(NotifyMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.iMsg = other.iMsg;
      if (other.isSetStrNotifyJson()) {
        this.strNotifyJson = other.strNotifyJson;
      }
    }

    public NotifyMessage_args deepCopy() {
      return new NotifyMessage_args(this);
    }

    @Override
    public void clear() {
      setIMsgIsSet(false);
      this.iMsg = 0;
      this.strNotifyJson = null;
    }

    public int getIMsg() {
      return this.iMsg;
    }

    public NotifyMessage_args setIMsg(int iMsg) {
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      return this;
    }

    public void unsetIMsg() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    /** Returns true if field iMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetIMsg() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    public void setIMsgIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMSG_ISSET_ID, value);
    }

    public java.lang.String getStrNotifyJson() {
      return this.strNotifyJson;
    }

    public NotifyMessage_args setStrNotifyJson(java.lang.String strNotifyJson) {
      this.strNotifyJson = strNotifyJson;
      return this;
    }

    public void unsetStrNotifyJson() {
      this.strNotifyJson = null;
    }

    /** Returns true if field strNotifyJson is set (has been assigned a value) and false otherwise */
    public boolean isSetStrNotifyJson() {
      return this.strNotifyJson != null;
    }

    public void setStrNotifyJsonIsSet(boolean value) {
      if (!value) {
        this.strNotifyJson = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case I_MSG:
        if (value == null) {
          unsetIMsg();
        } else {
          setIMsg((java.lang.Integer)value);
        }
        break;

      case STR_NOTIFY_JSON:
        if (value == null) {
          unsetStrNotifyJson();
        } else {
          setStrNotifyJson((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_MSG:
        return getIMsg();

      case STR_NOTIFY_JSON:
        return getStrNotifyJson();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_MSG:
        return isSetIMsg();
      case STR_NOTIFY_JSON:
        return isSetStrNotifyJson();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof NotifyMessage_args)
        return this.equals((NotifyMessage_args)that);
      return false;
    }

    public boolean equals(NotifyMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iMsg = true;
      boolean that_present_iMsg = true;
      if (this_present_iMsg || that_present_iMsg) {
        if (!(this_present_iMsg && that_present_iMsg))
          return false;
        if (this.iMsg != that.iMsg)
          return false;
      }

      boolean this_present_strNotifyJson = true && this.isSetStrNotifyJson();
      boolean that_present_strNotifyJson = true && that.isSetStrNotifyJson();
      if (this_present_strNotifyJson || that_present_strNotifyJson) {
        if (!(this_present_strNotifyJson && that_present_strNotifyJson))
          return false;
        if (!this.strNotifyJson.equals(that.strNotifyJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + iMsg;

      hashCode = hashCode * 8191 + ((isSetStrNotifyJson()) ? 131071 : 524287);
      if (isSetStrNotifyJson())
        hashCode = hashCode * 8191 + strNotifyJson.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(NotifyMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIMsg()).compareTo(other.isSetIMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMsg, other.iMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrNotifyJson()).compareTo(other.isSetStrNotifyJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrNotifyJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strNotifyJson, other.strNotifyJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("NotifyMessage_args(");
      boolean first = true;

      sb.append("iMsg:");
      sb.append(this.iMsg);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strNotifyJson:");
      if (this.strNotifyJson == null) {
        sb.append("null");
      } else {
        sb.append(this.strNotifyJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NotifyMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_argsStandardScheme getScheme() {
        return new NotifyMessage_argsStandardScheme();
      }
    }

    private static class NotifyMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifyMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iMsg = iprot.readI32();
                struct.setIMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_NOTIFY_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strNotifyJson = iprot.readString();
                struct.setStrNotifyJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(I_MSG_FIELD_DESC);
        oprot.writeI32(struct.iMsg);
        oprot.writeFieldEnd();
        if (struct.strNotifyJson != null) {
          oprot.writeFieldBegin(STR_NOTIFY_JSON_FIELD_DESC);
          oprot.writeString(struct.strNotifyJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NotifyMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_argsTupleScheme getScheme() {
        return new NotifyMessage_argsTupleScheme();
      }
    }

    private static class NotifyMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifyMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIMsg()) {
          optionals.set(0);
        }
        if (struct.isSetStrNotifyJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIMsg()) {
          oprot.writeI32(struct.iMsg);
        }
        if (struct.isSetStrNotifyJson()) {
          oprot.writeString(struct.strNotifyJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.iMsg = iprot.readI32();
          struct.setIMsgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strNotifyJson = iprot.readString();
          struct.setStrNotifyJsonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class NotifyMessage_result implements org.apache.thrift.TBase<NotifyMessage_result, NotifyMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotifyMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifyMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifyMessage_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyMessage_result.class, metaDataMap);
    }

    public NotifyMessage_result() {
    }

    public NotifyMessage_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NotifyMessage_result(NotifyMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public NotifyMessage_result deepCopy() {
      return new NotifyMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public NotifyMessage_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof NotifyMessage_result)
        return this.equals((NotifyMessage_result)that);
      return false;
    }

    public boolean equals(NotifyMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(NotifyMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("NotifyMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NotifyMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_resultStandardScheme getScheme() {
        return new NotifyMessage_resultStandardScheme();
      }
    }

    private static class NotifyMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifyMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NotifyMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public NotifyMessage_resultTupleScheme getScheme() {
        return new NotifyMessage_resultTupleScheme();
      }
    }

    private static class NotifyMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifyMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NotifyMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReceiveMessage_args implements org.apache.thrift.TBase<ReceiveMessage_args, ReceiveMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReceiveMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReceiveMessage_args");

    private static final org.apache.thrift.protocol.TField I_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("iMsg", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField STR_RECEIVE_JSON_FIELD_DESC = new org.apache.thrift.protocol.TField("strReceiveJson", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReceiveMessage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReceiveMessage_argsTupleSchemeFactory();

    public int iMsg; // required
    public java.lang.String strReceiveJson; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      I_MSG((short)1, "iMsg"),
      STR_RECEIVE_JSON((short)2, "strReceiveJson");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // I_MSG
            return I_MSG;
          case 2: // STR_RECEIVE_JSON
            return STR_RECEIVE_JSON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __IMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.I_MSG, new org.apache.thrift.meta_data.FieldMetaData("iMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.STR_RECEIVE_JSON, new org.apache.thrift.meta_data.FieldMetaData("strReceiveJson", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiveMessage_args.class, metaDataMap);
    }

    public ReceiveMessage_args() {
    }

    public ReceiveMessage_args(
      int iMsg,
      java.lang.String strReceiveJson)
    {
      this();
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      this.strReceiveJson = strReceiveJson;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReceiveMessage_args(ReceiveMessage_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.iMsg = other.iMsg;
      if (other.isSetStrReceiveJson()) {
        this.strReceiveJson = other.strReceiveJson;
      }
    }

    public ReceiveMessage_args deepCopy() {
      return new ReceiveMessage_args(this);
    }

    @Override
    public void clear() {
      setIMsgIsSet(false);
      this.iMsg = 0;
      this.strReceiveJson = null;
    }

    public int getIMsg() {
      return this.iMsg;
    }

    public ReceiveMessage_args setIMsg(int iMsg) {
      this.iMsg = iMsg;
      setIMsgIsSet(true);
      return this;
    }

    public void unsetIMsg() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    /** Returns true if field iMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetIMsg() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMSG_ISSET_ID);
    }

    public void setIMsgIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMSG_ISSET_ID, value);
    }

    public java.lang.String getStrReceiveJson() {
      return this.strReceiveJson;
    }

    public ReceiveMessage_args setStrReceiveJson(java.lang.String strReceiveJson) {
      this.strReceiveJson = strReceiveJson;
      return this;
    }

    public void unsetStrReceiveJson() {
      this.strReceiveJson = null;
    }

    /** Returns true if field strReceiveJson is set (has been assigned a value) and false otherwise */
    public boolean isSetStrReceiveJson() {
      return this.strReceiveJson != null;
    }

    public void setStrReceiveJsonIsSet(boolean value) {
      if (!value) {
        this.strReceiveJson = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case I_MSG:
        if (value == null) {
          unsetIMsg();
        } else {
          setIMsg((java.lang.Integer)value);
        }
        break;

      case STR_RECEIVE_JSON:
        if (value == null) {
          unsetStrReceiveJson();
        } else {
          setStrReceiveJson((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case I_MSG:
        return getIMsg();

      case STR_RECEIVE_JSON:
        return getStrReceiveJson();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case I_MSG:
        return isSetIMsg();
      case STR_RECEIVE_JSON:
        return isSetStrReceiveJson();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReceiveMessage_args)
        return this.equals((ReceiveMessage_args)that);
      return false;
    }

    public boolean equals(ReceiveMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_iMsg = true;
      boolean that_present_iMsg = true;
      if (this_present_iMsg || that_present_iMsg) {
        if (!(this_present_iMsg && that_present_iMsg))
          return false;
        if (this.iMsg != that.iMsg)
          return false;
      }

      boolean this_present_strReceiveJson = true && this.isSetStrReceiveJson();
      boolean that_present_strReceiveJson = true && that.isSetStrReceiveJson();
      if (this_present_strReceiveJson || that_present_strReceiveJson) {
        if (!(this_present_strReceiveJson && that_present_strReceiveJson))
          return false;
        if (!this.strReceiveJson.equals(that.strReceiveJson))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + iMsg;

      hashCode = hashCode * 8191 + ((isSetStrReceiveJson()) ? 131071 : 524287);
      if (isSetStrReceiveJson())
        hashCode = hashCode * 8191 + strReceiveJson.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ReceiveMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetIMsg()).compareTo(other.isSetIMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iMsg, other.iMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrReceiveJson()).compareTo(other.isSetStrReceiveJson());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrReceiveJson()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strReceiveJson, other.strReceiveJson);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReceiveMessage_args(");
      boolean first = true;

      sb.append("iMsg:");
      sb.append(this.iMsg);
      first = false;
      if (!first) sb.append(", ");
      sb.append("strReceiveJson:");
      if (this.strReceiveJson == null) {
        sb.append("null");
      } else {
        sb.append(this.strReceiveJson);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReceiveMessage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_argsStandardScheme getScheme() {
        return new ReceiveMessage_argsStandardScheme();
      }
    }

    private static class ReceiveMessage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReceiveMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // I_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.iMsg = iprot.readI32();
                struct.setIMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_RECEIVE_JSON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strReceiveJson = iprot.readString();
                struct.setStrReceiveJsonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(I_MSG_FIELD_DESC);
        oprot.writeI32(struct.iMsg);
        oprot.writeFieldEnd();
        if (struct.strReceiveJson != null) {
          oprot.writeFieldBegin(STR_RECEIVE_JSON_FIELD_DESC);
          oprot.writeString(struct.strReceiveJson);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReceiveMessage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_argsTupleScheme getScheme() {
        return new ReceiveMessage_argsTupleScheme();
      }
    }

    private static class ReceiveMessage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReceiveMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetIMsg()) {
          optionals.set(0);
        }
        if (struct.isSetStrReceiveJson()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIMsg()) {
          oprot.writeI32(struct.iMsg);
        }
        if (struct.isSetStrReceiveJson()) {
          oprot.writeString(struct.strReceiveJson);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.iMsg = iprot.readI32();
          struct.setIMsgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strReceiveJson = iprot.readString();
          struct.setStrReceiveJsonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ReceiveMessage_result implements org.apache.thrift.TBase<ReceiveMessage_result, ReceiveMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReceiveMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReceiveMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReceiveMessage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReceiveMessage_resultTupleSchemeFactory();

    public CapReturn success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapReturn.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReceiveMessage_result.class, metaDataMap);
    }

    public ReceiveMessage_result() {
    }

    public ReceiveMessage_result(
      CapReturn success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReceiveMessage_result(ReceiveMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapReturn(other.success);
      }
    }

    public ReceiveMessage_result deepCopy() {
      return new ReceiveMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapReturn getSuccess() {
      return this.success;
    }

    public ReceiveMessage_result setSuccess(CapReturn success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapReturn)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ReceiveMessage_result)
        return this.equals((ReceiveMessage_result)that);
      return false;
    }

    public boolean equals(ReceiveMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ReceiveMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ReceiveMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReceiveMessage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_resultStandardScheme getScheme() {
        return new ReceiveMessage_resultStandardScheme();
      }
    }

    private static class ReceiveMessage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReceiveMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapReturn();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReceiveMessage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ReceiveMessage_resultTupleScheme getScheme() {
        return new ReceiveMessage_resultTupleScheme();
      }
    }

    private static class ReceiveMessage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReceiveMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReceiveMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapReturn();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneImage_args implements org.apache.thrift.TBase<GetSceneImage_args, GetSceneImage_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneImage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneImage_args");

    private static final org.apache.thrift.protocol.TField STR_CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strChannelID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField STR_CAP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("strCapID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneImage_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneImage_argsTupleSchemeFactory();

    public java.lang.String strChannelID; // required
    public java.lang.String strCapID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STR_CHANNEL_ID((short)1, "strChannelID"),
      STR_CAP_ID((short)2, "strCapID");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STR_CHANNEL_ID
            return STR_CHANNEL_ID;
          case 2: // STR_CAP_ID
            return STR_CAP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STR_CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("strChannelID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STR_CAP_ID, new org.apache.thrift.meta_data.FieldMetaData("strCapID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneImage_args.class, metaDataMap);
    }

    public GetSceneImage_args() {
    }

    public GetSceneImage_args(
      java.lang.String strChannelID,
      java.lang.String strCapID)
    {
      this();
      this.strChannelID = strChannelID;
      this.strCapID = strCapID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneImage_args(GetSceneImage_args other) {
      if (other.isSetStrChannelID()) {
        this.strChannelID = other.strChannelID;
      }
      if (other.isSetStrCapID()) {
        this.strCapID = other.strCapID;
      }
    }

    public GetSceneImage_args deepCopy() {
      return new GetSceneImage_args(this);
    }

    @Override
    public void clear() {
      this.strChannelID = null;
      this.strCapID = null;
    }

    public java.lang.String getStrChannelID() {
      return this.strChannelID;
    }

    public GetSceneImage_args setStrChannelID(java.lang.String strChannelID) {
      this.strChannelID = strChannelID;
      return this;
    }

    public void unsetStrChannelID() {
      this.strChannelID = null;
    }

    /** Returns true if field strChannelID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrChannelID() {
      return this.strChannelID != null;
    }

    public void setStrChannelIDIsSet(boolean value) {
      if (!value) {
        this.strChannelID = null;
      }
    }

    public java.lang.String getStrCapID() {
      return this.strCapID;
    }

    public GetSceneImage_args setStrCapID(java.lang.String strCapID) {
      this.strCapID = strCapID;
      return this;
    }

    public void unsetStrCapID() {
      this.strCapID = null;
    }

    /** Returns true if field strCapID is set (has been assigned a value) and false otherwise */
    public boolean isSetStrCapID() {
      return this.strCapID != null;
    }

    public void setStrCapIDIsSet(boolean value) {
      if (!value) {
        this.strCapID = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case STR_CHANNEL_ID:
        if (value == null) {
          unsetStrChannelID();
        } else {
          setStrChannelID((java.lang.String)value);
        }
        break;

      case STR_CAP_ID:
        if (value == null) {
          unsetStrCapID();
        } else {
          setStrCapID((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STR_CHANNEL_ID:
        return getStrChannelID();

      case STR_CAP_ID:
        return getStrCapID();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STR_CHANNEL_ID:
        return isSetStrChannelID();
      case STR_CAP_ID:
        return isSetStrCapID();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneImage_args)
        return this.equals((GetSceneImage_args)that);
      return false;
    }

    public boolean equals(GetSceneImage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_strChannelID = true && this.isSetStrChannelID();
      boolean that_present_strChannelID = true && that.isSetStrChannelID();
      if (this_present_strChannelID || that_present_strChannelID) {
        if (!(this_present_strChannelID && that_present_strChannelID))
          return false;
        if (!this.strChannelID.equals(that.strChannelID))
          return false;
      }

      boolean this_present_strCapID = true && this.isSetStrCapID();
      boolean that_present_strCapID = true && that.isSetStrCapID();
      if (this_present_strCapID || that_present_strCapID) {
        if (!(this_present_strCapID && that_present_strCapID))
          return false;
        if (!this.strCapID.equals(that.strCapID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStrChannelID()) ? 131071 : 524287);
      if (isSetStrChannelID())
        hashCode = hashCode * 8191 + strChannelID.hashCode();

      hashCode = hashCode * 8191 + ((isSetStrCapID()) ? 131071 : 524287);
      if (isSetStrCapID())
        hashCode = hashCode * 8191 + strCapID.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetStrChannelID()).compareTo(other.isSetStrChannelID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrChannelID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strChannelID, other.strChannelID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStrCapID()).compareTo(other.isSetStrCapID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStrCapID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strCapID, other.strCapID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneImage_args(");
      boolean first = true;

      sb.append("strChannelID:");
      if (this.strChannelID == null) {
        sb.append("null");
      } else {
        sb.append(this.strChannelID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("strCapID:");
      if (this.strCapID == null) {
        sb.append("null");
      } else {
        sb.append(this.strCapID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneImage_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_argsStandardScheme getScheme() {
        return new GetSceneImage_argsStandardScheme();
      }
    }

    private static class GetSceneImage_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STR_CHANNEL_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strChannelID = iprot.readString();
                struct.setStrChannelIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STR_CAP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.strCapID = iprot.readString();
                struct.setStrCapIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.strChannelID != null) {
          oprot.writeFieldBegin(STR_CHANNEL_ID_FIELD_DESC);
          oprot.writeString(struct.strChannelID);
          oprot.writeFieldEnd();
        }
        if (struct.strCapID != null) {
          oprot.writeFieldBegin(STR_CAP_ID_FIELD_DESC);
          oprot.writeString(struct.strCapID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneImage_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_argsTupleScheme getScheme() {
        return new GetSceneImage_argsTupleScheme();
      }
    }

    private static class GetSceneImage_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStrChannelID()) {
          optionals.set(0);
        }
        if (struct.isSetStrCapID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStrChannelID()) {
          oprot.writeString(struct.strChannelID);
        }
        if (struct.isSetStrCapID()) {
          oprot.writeString(struct.strCapID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.strChannelID = iprot.readString();
          struct.setStrChannelIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.strCapID = iprot.readString();
          struct.setStrCapIDIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class GetSceneImage_result implements org.apache.thrift.TBase<GetSceneImage_result, GetSceneImage_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSceneImage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSceneImage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSceneImage_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSceneImage_resultTupleSchemeFactory();

    public CapSceneImageResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapSceneImageResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSceneImage_result.class, metaDataMap);
    }

    public GetSceneImage_result() {
    }

    public GetSceneImage_result(
      CapSceneImageResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSceneImage_result(GetSceneImage_result other) {
      if (other.isSetSuccess()) {
        this.success = new CapSceneImageResult(other.success);
      }
    }

    public GetSceneImage_result deepCopy() {
      return new GetSceneImage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CapSceneImageResult getSuccess() {
      return this.success;
    }

    public GetSceneImage_result setSuccess(CapSceneImageResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CapSceneImageResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSceneImage_result)
        return this.equals((GetSceneImage_result)that);
      return false;
    }

    public boolean equals(GetSceneImage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(GetSceneImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSceneImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSceneImage_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_resultStandardScheme getScheme() {
        return new GetSceneImage_resultStandardScheme();
      }
    }

    private static class GetSceneImage_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSceneImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CapSceneImageResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSceneImage_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public GetSceneImage_resultTupleScheme getScheme() {
        return new GetSceneImage_resultTupleScheme();
      }
    }

    private static class GetSceneImage_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSceneImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSceneImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CapSceneImageResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFeatures_args implements org.apache.thrift.TBase<DetectFeatures_args, DetectFeatures_args._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFeatures_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFeatures_args");

    private static final org.apache.thrift.protocol.TField IMG_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("imgBytes", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFeatures_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFeatures_argsTupleSchemeFactory();

    public java.nio.ByteBuffer imgBytes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMG_BYTES((short)1, "imgBytes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMG_BYTES
            return IMG_BYTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMG_BYTES, new org.apache.thrift.meta_data.FieldMetaData("imgBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFeatures_args.class, metaDataMap);
    }

    public DetectFeatures_args() {
    }

    public DetectFeatures_args(
      java.nio.ByteBuffer imgBytes)
    {
      this();
      this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFeatures_args(DetectFeatures_args other) {
      if (other.isSetImgBytes()) {
        this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(other.imgBytes);
      }
    }

    public DetectFeatures_args deepCopy() {
      return new DetectFeatures_args(this);
    }

    @Override
    public void clear() {
      this.imgBytes = null;
    }

    public byte[] getImgBytes() {
      setImgBytes(org.apache.thrift.TBaseHelper.rightSize(imgBytes));
      return imgBytes == null ? null : imgBytes.array();
    }

    public java.nio.ByteBuffer bufferForImgBytes() {
      return org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
    }

    public DetectFeatures_args setImgBytes(byte[] imgBytes) {
      this.imgBytes = imgBytes == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(imgBytes.clone());
      return this;
    }

    public DetectFeatures_args setImgBytes(java.nio.ByteBuffer imgBytes) {
      this.imgBytes = org.apache.thrift.TBaseHelper.copyBinary(imgBytes);
      return this;
    }

    public void unsetImgBytes() {
      this.imgBytes = null;
    }

    /** Returns true if field imgBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetImgBytes() {
      return this.imgBytes != null;
    }

    public void setImgBytesIsSet(boolean value) {
      if (!value) {
        this.imgBytes = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case IMG_BYTES:
        if (value == null) {
          unsetImgBytes();
        } else {
          if (value instanceof byte[]) {
            setImgBytes((byte[])value);
          } else {
            setImgBytes((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case IMG_BYTES:
        return getImgBytes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case IMG_BYTES:
        return isSetImgBytes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFeatures_args)
        return this.equals((DetectFeatures_args)that);
      return false;
    }

    public boolean equals(DetectFeatures_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_imgBytes = true && this.isSetImgBytes();
      boolean that_present_imgBytes = true && that.isSetImgBytes();
      if (this_present_imgBytes || that_present_imgBytes) {
        if (!(this_present_imgBytes && that_present_imgBytes))
          return false;
        if (!this.imgBytes.equals(that.imgBytes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetImgBytes()) ? 131071 : 524287);
      if (isSetImgBytes())
        hashCode = hashCode * 8191 + imgBytes.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFeatures_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetImgBytes()).compareTo(other.isSetImgBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImgBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgBytes, other.imgBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFeatures_args(");
      boolean first = true;

      sb.append("imgBytes:");
      if (this.imgBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.imgBytes, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFeatures_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_argsStandardScheme getScheme() {
        return new DetectFeatures_argsStandardScheme();
      }
    }

    private static class DetectFeatures_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFeatures_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMG_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imgBytes = iprot.readBinary();
                struct.setImgBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imgBytes != null) {
          oprot.writeFieldBegin(IMG_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.imgBytes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFeatures_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_argsTupleScheme getScheme() {
        return new DetectFeatures_argsTupleScheme();
      }
    }

    private static class DetectFeatures_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFeatures_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetImgBytes()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetImgBytes()) {
          oprot.writeBinary(struct.imgBytes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.imgBytes = iprot.readBinary();
          struct.setImgBytesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class DetectFeatures_result implements org.apache.thrift.TBase<DetectFeatures_result, DetectFeatures_result._Fields>, java.io.Serializable, Cloneable, Comparable<DetectFeatures_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetectFeatures_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetectFeatures_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetectFeatures_resultTupleSchemeFactory();

    public java.util.List<CapFeaturesSet> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CapFeaturesSet.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetectFeatures_result.class, metaDataMap);
    }

    public DetectFeatures_result() {
    }

    public DetectFeatures_result(
      java.util.List<CapFeaturesSet> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DetectFeatures_result(DetectFeatures_result other) {
      if (other.isSetSuccess()) {
        java.util.List<CapFeaturesSet> __this__success = new java.util.ArrayList<CapFeaturesSet>(other.success.size());
        for (CapFeaturesSet other_element : other.success) {
          __this__success.add(new CapFeaturesSet(other_element));
        }
        this.success = __this__success;
      }
    }

    public DetectFeatures_result deepCopy() {
      return new DetectFeatures_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CapFeaturesSet> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CapFeaturesSet elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<CapFeaturesSet>();
      }
      this.success.add(elem);
    }

    public java.util.List<CapFeaturesSet> getSuccess() {
      return this.success;
    }

    public DetectFeatures_result setSuccess(java.util.List<CapFeaturesSet> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<CapFeaturesSet>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof DetectFeatures_result)
        return this.equals((DetectFeatures_result)that);
      return false;
    }

    public boolean equals(DetectFeatures_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(DetectFeatures_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("DetectFeatures_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DetectFeatures_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_resultStandardScheme getScheme() {
        return new DetectFeatures_resultStandardScheme();
      }
    }

    private static class DetectFeatures_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetectFeatures_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<CapFeaturesSet>(_list144.size);
                  CapFeaturesSet _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new CapFeaturesSet();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CapFeaturesSet _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DetectFeatures_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public DetectFeatures_resultTupleScheme getScheme() {
        return new DetectFeatures_resultTupleScheme();
      }
    }

    private static class DetectFeatures_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetectFeatures_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CapFeaturesSet _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DetectFeatures_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<CapFeaturesSet>(_list149.size);
            CapFeaturesSet _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new CapFeaturesSet();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sensing.core.thrift.cmp.bean;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "all"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-07-03")
public class DBInfoReturn implements org.apache.thrift.TBase<DBInfoReturn, DBInfoReturn._Fields>, java.io.Serializable, Cloneable, Comparable<DBInfoReturn> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DBInfoReturn");

  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DBID_FIELD_DESC = new org.apache.thrift.protocol.TField("DBID", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DBInfoReturnStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DBInfoReturnTupleSchemeFactory();

  public int errCode; // required
  public java.util.List<DBInfo> DBID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ERR_CODE((short)1, "errCode"),
    DBID((short)2, "DBID");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ERR_CODE
          return ERR_CODE;
        case 2: // DBID
          return DBID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ERRCODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DBID, new org.apache.thrift.meta_data.FieldMetaData("DBID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DBInfo.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DBInfoReturn.class, metaDataMap);
  }

  public DBInfoReturn() {
  }

  public DBInfoReturn(
    int errCode,
    java.util.List<DBInfo> DBID)
  {
    this();
    this.errCode = errCode;
    setErrCodeIsSet(true);
    this.DBID = DBID;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DBInfoReturn(DBInfoReturn other) {
    __isset_bitfield = other.__isset_bitfield;
    this.errCode = other.errCode;
    if (other.isSetDBID()) {
      java.util.List<DBInfo> __this__DBID = new java.util.ArrayList<DBInfo>(other.DBID.size());
      for (DBInfo other_element : other.DBID) {
        __this__DBID.add(new DBInfo(other_element));
      }
      this.DBID = __this__DBID;
    }
  }

  public DBInfoReturn deepCopy() {
    return new DBInfoReturn(this);
  }

  @Override
  public void clear() {
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.DBID = null;
  }

  public int getErrCode() {
    return this.errCode;
  }

  public DBInfoReturn setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public int getDBIDSize() {
    return (this.DBID == null) ? 0 : this.DBID.size();
  }

  public java.util.Iterator<DBInfo> getDBIDIterator() {
    return (this.DBID == null) ? null : this.DBID.iterator();
  }

  public void addToDBID(DBInfo elem) {
    if (this.DBID == null) {
      this.DBID = new java.util.ArrayList<DBInfo>();
    }
    this.DBID.add(elem);
  }

  public java.util.List<DBInfo> getDBID() {
    return this.DBID;
  }

  public DBInfoReturn setDBID(java.util.List<DBInfo> DBID) {
    this.DBID = DBID;
    return this;
  }

  public void unsetDBID() {
    this.DBID = null;
  }

  /** Returns true if field DBID is set (has been assigned a value) and false otherwise */
  public boolean isSetDBID() {
    return this.DBID != null;
  }

  public void setDBIDIsSet(boolean value) {
    if (!value) {
      this.DBID = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((java.lang.Integer)value);
      }
      break;

    case DBID:
      if (value == null) {
        unsetDBID();
      } else {
        setDBID((java.util.List<DBInfo>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ERR_CODE:
      return getErrCode();

    case DBID:
      return getDBID();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ERR_CODE:
      return isSetErrCode();
    case DBID:
      return isSetDBID();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DBInfoReturn)
      return this.equals((DBInfoReturn)that);
    return false;
  }

  public boolean equals(DBInfoReturn that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_DBID = true && this.isSetDBID();
    boolean that_present_DBID = true && that.isSetDBID();
    if (this_present_DBID || that_present_DBID) {
      if (!(this_present_DBID && that_present_DBID))
        return false;
      if (!this.DBID.equals(that.DBID))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + errCode;

    hashCode = hashCode * 8191 + ((isSetDBID()) ? 131071 : 524287);
    if (isSetDBID())
      hashCode = hashCode * 8191 + DBID.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DBInfoReturn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDBID()).compareTo(other.isSetDBID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDBID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.DBID, other.DBID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DBInfoReturn(");
    boolean first = true;

    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("DBID:");
    if (this.DBID == null) {
      sb.append("null");
    } else {
      sb.append(this.DBID);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DBInfoReturnStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DBInfoReturnStandardScheme getScheme() {
      return new DBInfoReturnStandardScheme();
    }
  }

  private static class DBInfoReturnStandardScheme extends org.apache.thrift.scheme.StandardScheme<DBInfoReturn> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DBInfoReturn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DBID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.DBID = new java.util.ArrayList<DBInfo>(_list24.size);
                DBInfo _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new DBInfo();
                  _elem25.read(iprot);
                  struct.DBID.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setDBIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DBInfoReturn struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.DBID != null) {
        oprot.writeFieldBegin(DBID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.DBID.size()));
          for (DBInfo _iter27 : struct.DBID)
          {
            _iter27.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DBInfoReturnTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DBInfoReturnTupleScheme getScheme() {
      return new DBInfoReturnTupleScheme();
    }
  }

  private static class DBInfoReturnTupleScheme extends org.apache.thrift.scheme.TupleScheme<DBInfoReturn> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DBInfoReturn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetErrCode()) {
        optionals.set(0);
      }
      if (struct.isSetDBID()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetErrCode()) {
        oprot.writeI32(struct.errCode);
      }
      if (struct.isSetDBID()) {
        {
          oprot.writeI32(struct.DBID.size());
          for (DBInfo _iter28 : struct.DBID)
          {
            _iter28.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DBInfoReturn struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.errCode = iprot.readI32();
        struct.setErrCodeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.DBID = new java.util.ArrayList<DBInfo>(_list29.size);
          DBInfo _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new DBInfo();
            _elem30.read(iprot);
            struct.DBID.add(_elem30);
          }
        }
        struct.setDBIDIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


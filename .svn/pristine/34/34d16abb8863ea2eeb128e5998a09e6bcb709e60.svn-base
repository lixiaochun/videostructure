package com.sensing.core.thrift.cap.bean;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2019-01-02")
public class CapChannelConfig implements org.apache.thrift.TBase<CapChannelConfig, CapChannelConfig._Fields>, java.io.Serializable, Cloneable, Comparable<CapChannelConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CapChannelConfig");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CHANNEL_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_uid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_PSW_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_psw", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHANNEL_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_addr", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHANNEL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_port", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CHANNEL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_no", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_type", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField MIN_FACE_WIDTH_FIELD_DESC = new org.apache.thrift.protocol.TField("min_face_width", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField MIN_IMG_QUALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("min_img_quality", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MIN_CAP_DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_cap_distance", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField MIN_CONFIDENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_confidence", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CHANNEL_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField CAP_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cap_stat", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ZOOM_FIELD_DESC = new org.apache.thrift.protocol.TField("zoom", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField MAX_FACE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("max_face_count", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField FACE_MERGE_FIELD_DESC = new org.apache.thrift.protocol.TField("face_merge", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField MERGE_ALL_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_all", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField MERGE_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_threshold", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField MERGE_TIME_OUT_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_time_out", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField CHANNEL_GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_guid", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CHANNEL_LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_longitude", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField CHANNEL_LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_latitude", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField CHANNEL_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_direct", org.apache.thrift.protocol.TType.I32, (short)25);
  private static final org.apache.thrift.protocol.TField CHANNEL_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("channel_area", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField IMPORTANT_FIELD_DESC = new org.apache.thrift.protocol.TField("important", org.apache.thrift.protocol.TType.I32, (short)27);
  private static final org.apache.thrift.protocol.TField STR_RESERVE_FIELD_DESC = new org.apache.thrift.protocol.TField("strReserve", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField MAX_YAW_FIELD_DESC = new org.apache.thrift.protocol.TField("max_yaw", org.apache.thrift.protocol.TType.I32, (short)29);
  private static final org.apache.thrift.protocol.TField MAX_PITCH_FIELD_DESC = new org.apache.thrift.protocol.TField("max_pitch", org.apache.thrift.protocol.TType.I32, (short)30);
  private static final org.apache.thrift.protocol.TField MAX_ROLL_FIELD_DESC = new org.apache.thrift.protocol.TField("max_roll", org.apache.thrift.protocol.TType.I32, (short)31);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CapChannelConfigStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CapChannelConfigTupleSchemeFactory();

  public java.lang.String uuid; // required
  public java.lang.String channel_uid; // required
  public java.lang.String channel_psw; // required
  public java.lang.String channel_name; // required
  public java.lang.String channel_addr; // required
  public int channel_port; // required
  public java.lang.String channel_no; // required
  public int channel_type; // required
  public int protocol; // required
  public int min_face_width; // required
  public int min_img_quality; // required
  public int min_cap_distance; // required
  public double min_confidence; // required
  public double channel_threshold; // required
  public int cap_stat; // required
  public int zoom; // required
  public int max_face_count; // required
  public boolean face_merge; // required
  public boolean merge_all; // required
  public double merge_threshold; // required
  public int merge_time_out; // required
  public java.lang.String channel_guid; // required
  public double channel_longitude; // required
  public double channel_latitude; // required
  public int channel_direct; // required
  public java.lang.String channel_area; // required
  public int important; // required
  public java.lang.String strReserve; // required
  public int max_yaw; // required
  public int max_pitch; // required
  public int max_roll; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    CHANNEL_UID((short)2, "channel_uid"),
    CHANNEL_PSW((short)3, "channel_psw"),
    CHANNEL_NAME((short)4, "channel_name"),
    CHANNEL_ADDR((short)5, "channel_addr"),
    CHANNEL_PORT((short)6, "channel_port"),
    CHANNEL_NO((short)7, "channel_no"),
    CHANNEL_TYPE((short)8, "channel_type"),
    PROTOCOL((short)9, "protocol"),
    MIN_FACE_WIDTH((short)10, "min_face_width"),
    MIN_IMG_QUALITY((short)11, "min_img_quality"),
    MIN_CAP_DISTANCE((short)12, "min_cap_distance"),
    MIN_CONFIDENCE((short)13, "min_confidence"),
    CHANNEL_THRESHOLD((short)14, "channel_threshold"),
    CAP_STAT((short)15, "cap_stat"),
    ZOOM((short)16, "zoom"),
    MAX_FACE_COUNT((short)17, "max_face_count"),
    FACE_MERGE((short)18, "face_merge"),
    MERGE_ALL((short)19, "merge_all"),
    MERGE_THRESHOLD((short)20, "merge_threshold"),
    MERGE_TIME_OUT((short)21, "merge_time_out"),
    CHANNEL_GUID((short)22, "channel_guid"),
    CHANNEL_LONGITUDE((short)23, "channel_longitude"),
    CHANNEL_LATITUDE((short)24, "channel_latitude"),
    CHANNEL_DIRECT((short)25, "channel_direct"),
    CHANNEL_AREA((short)26, "channel_area"),
    IMPORTANT((short)27, "important"),
    STR_RESERVE((short)28, "strReserve"),
    MAX_YAW((short)29, "max_yaw"),
    MAX_PITCH((short)30, "max_pitch"),
    MAX_ROLL((short)31, "max_roll");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // CHANNEL_UID
          return CHANNEL_UID;
        case 3: // CHANNEL_PSW
          return CHANNEL_PSW;
        case 4: // CHANNEL_NAME
          return CHANNEL_NAME;
        case 5: // CHANNEL_ADDR
          return CHANNEL_ADDR;
        case 6: // CHANNEL_PORT
          return CHANNEL_PORT;
        case 7: // CHANNEL_NO
          return CHANNEL_NO;
        case 8: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 9: // PROTOCOL
          return PROTOCOL;
        case 10: // MIN_FACE_WIDTH
          return MIN_FACE_WIDTH;
        case 11: // MIN_IMG_QUALITY
          return MIN_IMG_QUALITY;
        case 12: // MIN_CAP_DISTANCE
          return MIN_CAP_DISTANCE;
        case 13: // MIN_CONFIDENCE
          return MIN_CONFIDENCE;
        case 14: // CHANNEL_THRESHOLD
          return CHANNEL_THRESHOLD;
        case 15: // CAP_STAT
          return CAP_STAT;
        case 16: // ZOOM
          return ZOOM;
        case 17: // MAX_FACE_COUNT
          return MAX_FACE_COUNT;
        case 18: // FACE_MERGE
          return FACE_MERGE;
        case 19: // MERGE_ALL
          return MERGE_ALL;
        case 20: // MERGE_THRESHOLD
          return MERGE_THRESHOLD;
        case 21: // MERGE_TIME_OUT
          return MERGE_TIME_OUT;
        case 22: // CHANNEL_GUID
          return CHANNEL_GUID;
        case 23: // CHANNEL_LONGITUDE
          return CHANNEL_LONGITUDE;
        case 24: // CHANNEL_LATITUDE
          return CHANNEL_LATITUDE;
        case 25: // CHANNEL_DIRECT
          return CHANNEL_DIRECT;
        case 26: // CHANNEL_AREA
          return CHANNEL_AREA;
        case 27: // IMPORTANT
          return IMPORTANT;
        case 28: // STR_RESERVE
          return STR_RESERVE;
        case 29: // MAX_YAW
          return MAX_YAW;
        case 30: // MAX_PITCH
          return MAX_PITCH;
        case 31: // MAX_ROLL
          return MAX_ROLL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CHANNEL_PORT_ISSET_ID = 0;
  private static final int __CHANNEL_TYPE_ISSET_ID = 1;
  private static final int __PROTOCOL_ISSET_ID = 2;
  private static final int __MIN_FACE_WIDTH_ISSET_ID = 3;
  private static final int __MIN_IMG_QUALITY_ISSET_ID = 4;
  private static final int __MIN_CAP_DISTANCE_ISSET_ID = 5;
  private static final int __MIN_CONFIDENCE_ISSET_ID = 6;
  private static final int __CHANNEL_THRESHOLD_ISSET_ID = 7;
  private static final int __CAP_STAT_ISSET_ID = 8;
  private static final int __ZOOM_ISSET_ID = 9;
  private static final int __MAX_FACE_COUNT_ISSET_ID = 10;
  private static final int __FACE_MERGE_ISSET_ID = 11;
  private static final int __MERGE_ALL_ISSET_ID = 12;
  private static final int __MERGE_THRESHOLD_ISSET_ID = 13;
  private static final int __MERGE_TIME_OUT_ISSET_ID = 14;
  private static final int __CHANNEL_LONGITUDE_ISSET_ID = 15;
  private static final int __CHANNEL_LATITUDE_ISSET_ID = 16;
  private static final int __CHANNEL_DIRECT_ISSET_ID = 17;
  private static final int __IMPORTANT_ISSET_ID = 18;
  private static final int __MAX_YAW_ISSET_ID = 19;
  private static final int __MAX_PITCH_ISSET_ID = 20;
  private static final int __MAX_ROLL_ISSET_ID = 21;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_UID, new org.apache.thrift.meta_data.FieldMetaData("channel_uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_PSW, new org.apache.thrift.meta_data.FieldMetaData("channel_psw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_NAME, new org.apache.thrift.meta_data.FieldMetaData("channel_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_ADDR, new org.apache.thrift.meta_data.FieldMetaData("channel_addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_PORT, new org.apache.thrift.meta_data.FieldMetaData("channel_port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_NO, new org.apache.thrift.meta_data.FieldMetaData("channel_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channel_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_FACE_WIDTH, new org.apache.thrift.meta_data.FieldMetaData("min_face_width", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_IMG_QUALITY, new org.apache.thrift.meta_data.FieldMetaData("min_img_quality", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_CAP_DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("min_cap_distance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN_CONFIDENCE, new org.apache.thrift.meta_data.FieldMetaData("min_confidence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHANNEL_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("channel_threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CAP_STAT, new org.apache.thrift.meta_data.FieldMetaData("cap_stat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ZOOM, new org.apache.thrift.meta_data.FieldMetaData("zoom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_FACE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("max_face_count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FACE_MERGE, new org.apache.thrift.meta_data.FieldMetaData("face_merge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MERGE_ALL, new org.apache.thrift.meta_data.FieldMetaData("merge_all", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MERGE_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("merge_threshold", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MERGE_TIME_OUT, new org.apache.thrift.meta_data.FieldMetaData("merge_time_out", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_GUID, new org.apache.thrift.meta_data.FieldMetaData("channel_guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("channel_longitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHANNEL_LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("channel_latitude", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHANNEL_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("channel_direct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_AREA, new org.apache.thrift.meta_data.FieldMetaData("channel_area", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPORTANT, new org.apache.thrift.meta_data.FieldMetaData("important", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STR_RESERVE, new org.apache.thrift.meta_data.FieldMetaData("strReserve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_YAW, new org.apache.thrift.meta_data.FieldMetaData("max_yaw", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_PITCH, new org.apache.thrift.meta_data.FieldMetaData("max_pitch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_ROLL, new org.apache.thrift.meta_data.FieldMetaData("max_roll", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CapChannelConfig.class, metaDataMap);
  }

  public CapChannelConfig() {
  }

  public CapChannelConfig(
    java.lang.String uuid,
    java.lang.String channel_uid,
    java.lang.String channel_psw,
    java.lang.String channel_name,
    java.lang.String channel_addr,
    int channel_port,
    java.lang.String channel_no,
    int channel_type,
    int protocol,
    int min_face_width,
    int min_img_quality,
    int min_cap_distance,
    double min_confidence,
    double channel_threshold,
    int cap_stat,
    int zoom,
    int max_face_count,
    boolean face_merge,
    boolean merge_all,
    double merge_threshold,
    int merge_time_out,
    java.lang.String channel_guid,
    double channel_longitude,
    double channel_latitude,
    int channel_direct,
    java.lang.String channel_area,
    int important,
    java.lang.String strReserve,
    int max_yaw,
    int max_pitch,
    int max_roll)
  {
    this();
    this.uuid = uuid;
    this.channel_uid = channel_uid;
    this.channel_psw = channel_psw;
    this.channel_name = channel_name;
    this.channel_addr = channel_addr;
    this.channel_port = channel_port;
    setChannel_portIsSet(true);
    this.channel_no = channel_no;
    this.channel_type = channel_type;
    setChannel_typeIsSet(true);
    this.protocol = protocol;
    setProtocolIsSet(true);
    this.min_face_width = min_face_width;
    setMin_face_widthIsSet(true);
    this.min_img_quality = min_img_quality;
    setMin_img_qualityIsSet(true);
    this.min_cap_distance = min_cap_distance;
    setMin_cap_distanceIsSet(true);
    this.min_confidence = min_confidence;
    setMin_confidenceIsSet(true);
    this.channel_threshold = channel_threshold;
    setChannel_thresholdIsSet(true);
    this.cap_stat = cap_stat;
    setCap_statIsSet(true);
    this.zoom = zoom;
    setZoomIsSet(true);
    this.max_face_count = max_face_count;
    setMax_face_countIsSet(true);
    this.face_merge = face_merge;
    setFace_mergeIsSet(true);
    this.merge_all = merge_all;
    setMerge_allIsSet(true);
    this.merge_threshold = merge_threshold;
    setMerge_thresholdIsSet(true);
    this.merge_time_out = merge_time_out;
    setMerge_time_outIsSet(true);
    this.channel_guid = channel_guid;
    this.channel_longitude = channel_longitude;
    setChannel_longitudeIsSet(true);
    this.channel_latitude = channel_latitude;
    setChannel_latitudeIsSet(true);
    this.channel_direct = channel_direct;
    setChannel_directIsSet(true);
    this.channel_area = channel_area;
    this.important = important;
    setImportantIsSet(true);
    this.strReserve = strReserve;
    this.max_yaw = max_yaw;
    setMax_yawIsSet(true);
    this.max_pitch = max_pitch;
    setMax_pitchIsSet(true);
    this.max_roll = max_roll;
    setMax_rollIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CapChannelConfig(CapChannelConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetChannel_uid()) {
      this.channel_uid = other.channel_uid;
    }
    if (other.isSetChannel_psw()) {
      this.channel_psw = other.channel_psw;
    }
    if (other.isSetChannel_name()) {
      this.channel_name = other.channel_name;
    }
    if (other.isSetChannel_addr()) {
      this.channel_addr = other.channel_addr;
    }
    this.channel_port = other.channel_port;
    if (other.isSetChannel_no()) {
      this.channel_no = other.channel_no;
    }
    this.channel_type = other.channel_type;
    this.protocol = other.protocol;
    this.min_face_width = other.min_face_width;
    this.min_img_quality = other.min_img_quality;
    this.min_cap_distance = other.min_cap_distance;
    this.min_confidence = other.min_confidence;
    this.channel_threshold = other.channel_threshold;
    this.cap_stat = other.cap_stat;
    this.zoom = other.zoom;
    this.max_face_count = other.max_face_count;
    this.face_merge = other.face_merge;
    this.merge_all = other.merge_all;
    this.merge_threshold = other.merge_threshold;
    this.merge_time_out = other.merge_time_out;
    if (other.isSetChannel_guid()) {
      this.channel_guid = other.channel_guid;
    }
    this.channel_longitude = other.channel_longitude;
    this.channel_latitude = other.channel_latitude;
    this.channel_direct = other.channel_direct;
    if (other.isSetChannel_area()) {
      this.channel_area = other.channel_area;
    }
    this.important = other.important;
    if (other.isSetStrReserve()) {
      this.strReserve = other.strReserve;
    }
    this.max_yaw = other.max_yaw;
    this.max_pitch = other.max_pitch;
    this.max_roll = other.max_roll;
  }

  public CapChannelConfig deepCopy() {
    return new CapChannelConfig(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.channel_uid = null;
    this.channel_psw = null;
    this.channel_name = null;
    this.channel_addr = null;
    setChannel_portIsSet(false);
    this.channel_port = 0;
    this.channel_no = null;
    setChannel_typeIsSet(false);
    this.channel_type = 0;
    setProtocolIsSet(false);
    this.protocol = 0;
    setMin_face_widthIsSet(false);
    this.min_face_width = 0;
    setMin_img_qualityIsSet(false);
    this.min_img_quality = 0;
    setMin_cap_distanceIsSet(false);
    this.min_cap_distance = 0;
    setMin_confidenceIsSet(false);
    this.min_confidence = 0.0;
    setChannel_thresholdIsSet(false);
    this.channel_threshold = 0.0;
    setCap_statIsSet(false);
    this.cap_stat = 0;
    setZoomIsSet(false);
    this.zoom = 0;
    setMax_face_countIsSet(false);
    this.max_face_count = 0;
    setFace_mergeIsSet(false);
    this.face_merge = false;
    setMerge_allIsSet(false);
    this.merge_all = false;
    setMerge_thresholdIsSet(false);
    this.merge_threshold = 0.0;
    setMerge_time_outIsSet(false);
    this.merge_time_out = 0;
    this.channel_guid = null;
    setChannel_longitudeIsSet(false);
    this.channel_longitude = 0.0;
    setChannel_latitudeIsSet(false);
    this.channel_latitude = 0.0;
    setChannel_directIsSet(false);
    this.channel_direct = 0;
    this.channel_area = null;
    setImportantIsSet(false);
    this.important = 0;
    this.strReserve = null;
    setMax_yawIsSet(false);
    this.max_yaw = 0;
    setMax_pitchIsSet(false);
    this.max_pitch = 0;
    setMax_rollIsSet(false);
    this.max_roll = 0;
  }

  public java.lang.String getUuid() {
    return this.uuid;
  }

  public CapChannelConfig setUuid(java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public java.lang.String getChannel_uid() {
    return this.channel_uid;
  }

  public CapChannelConfig setChannel_uid(java.lang.String channel_uid) {
    this.channel_uid = channel_uid;
    return this;
  }

  public void unsetChannel_uid() {
    this.channel_uid = null;
  }

  /** Returns true if field channel_uid is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_uid() {
    return this.channel_uid != null;
  }

  public void setChannel_uidIsSet(boolean value) {
    if (!value) {
      this.channel_uid = null;
    }
  }

  public java.lang.String getChannel_psw() {
    return this.channel_psw;
  }

  public CapChannelConfig setChannel_psw(java.lang.String channel_psw) {
    this.channel_psw = channel_psw;
    return this;
  }

  public void unsetChannel_psw() {
    this.channel_psw = null;
  }

  /** Returns true if field channel_psw is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_psw() {
    return this.channel_psw != null;
  }

  public void setChannel_pswIsSet(boolean value) {
    if (!value) {
      this.channel_psw = null;
    }
  }

  public java.lang.String getChannel_name() {
    return this.channel_name;
  }

  public CapChannelConfig setChannel_name(java.lang.String channel_name) {
    this.channel_name = channel_name;
    return this;
  }

  public void unsetChannel_name() {
    this.channel_name = null;
  }

  /** Returns true if field channel_name is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_name() {
    return this.channel_name != null;
  }

  public void setChannel_nameIsSet(boolean value) {
    if (!value) {
      this.channel_name = null;
    }
  }

  public java.lang.String getChannel_addr() {
    return this.channel_addr;
  }

  public CapChannelConfig setChannel_addr(java.lang.String channel_addr) {
    this.channel_addr = channel_addr;
    return this;
  }

  public void unsetChannel_addr() {
    this.channel_addr = null;
  }

  /** Returns true if field channel_addr is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_addr() {
    return this.channel_addr != null;
  }

  public void setChannel_addrIsSet(boolean value) {
    if (!value) {
      this.channel_addr = null;
    }
  }

  public int getChannel_port() {
    return this.channel_port;
  }

  public CapChannelConfig setChannel_port(int channel_port) {
    this.channel_port = channel_port;
    setChannel_portIsSet(true);
    return this;
  }

  public void unsetChannel_port() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID);
  }

  /** Returns true if field channel_port is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_port() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID);
  }

  public void setChannel_portIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_PORT_ISSET_ID, value);
  }

  public java.lang.String getChannel_no() {
    return this.channel_no;
  }

  public CapChannelConfig setChannel_no(java.lang.String channel_no) {
    this.channel_no = channel_no;
    return this;
  }

  public void unsetChannel_no() {
    this.channel_no = null;
  }

  /** Returns true if field channel_no is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_no() {
    return this.channel_no != null;
  }

  public void setChannel_noIsSet(boolean value) {
    if (!value) {
      this.channel_no = null;
    }
  }

  public int getChannel_type() {
    return this.channel_type;
  }

  public CapChannelConfig setChannel_type(int channel_type) {
    this.channel_type = channel_type;
    setChannel_typeIsSet(true);
    return this;
  }

  public void unsetChannel_type() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_TYPE_ISSET_ID);
  }

  /** Returns true if field channel_type is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_type() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_TYPE_ISSET_ID);
  }

  public void setChannel_typeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_TYPE_ISSET_ID, value);
  }

  public int getProtocol() {
    return this.protocol;
  }

  public CapChannelConfig setProtocol(int protocol) {
    this.protocol = protocol;
    setProtocolIsSet(true);
    return this;
  }

  public void unsetProtocol() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROTOCOL_ISSET_ID);
  }

  /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocol() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROTOCOL_ISSET_ID);
  }

  public void setProtocolIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROTOCOL_ISSET_ID, value);
  }

  public int getMin_face_width() {
    return this.min_face_width;
  }

  public CapChannelConfig setMin_face_width(int min_face_width) {
    this.min_face_width = min_face_width;
    setMin_face_widthIsSet(true);
    return this;
  }

  public void unsetMin_face_width() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_FACE_WIDTH_ISSET_ID);
  }

  /** Returns true if field min_face_width is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_face_width() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_FACE_WIDTH_ISSET_ID);
  }

  public void setMin_face_widthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_FACE_WIDTH_ISSET_ID, value);
  }

  public int getMin_img_quality() {
    return this.min_img_quality;
  }

  public CapChannelConfig setMin_img_quality(int min_img_quality) {
    this.min_img_quality = min_img_quality;
    setMin_img_qualityIsSet(true);
    return this;
  }

  public void unsetMin_img_quality() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_IMG_QUALITY_ISSET_ID);
  }

  /** Returns true if field min_img_quality is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_img_quality() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_IMG_QUALITY_ISSET_ID);
  }

  public void setMin_img_qualityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_IMG_QUALITY_ISSET_ID, value);
  }

  public int getMin_cap_distance() {
    return this.min_cap_distance;
  }

  public CapChannelConfig setMin_cap_distance(int min_cap_distance) {
    this.min_cap_distance = min_cap_distance;
    setMin_cap_distanceIsSet(true);
    return this;
  }

  public void unsetMin_cap_distance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_CAP_DISTANCE_ISSET_ID);
  }

  /** Returns true if field min_cap_distance is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_cap_distance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_CAP_DISTANCE_ISSET_ID);
  }

  public void setMin_cap_distanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_CAP_DISTANCE_ISSET_ID, value);
  }

  public double getMin_confidence() {
    return this.min_confidence;
  }

  public CapChannelConfig setMin_confidence(double min_confidence) {
    this.min_confidence = min_confidence;
    setMin_confidenceIsSet(true);
    return this;
  }

  public void unsetMin_confidence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_CONFIDENCE_ISSET_ID);
  }

  /** Returns true if field min_confidence is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_confidence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_CONFIDENCE_ISSET_ID);
  }

  public void setMin_confidenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_CONFIDENCE_ISSET_ID, value);
  }

  public double getChannel_threshold() {
    return this.channel_threshold;
  }

  public CapChannelConfig setChannel_threshold(double channel_threshold) {
    this.channel_threshold = channel_threshold;
    setChannel_thresholdIsSet(true);
    return this;
  }

  public void unsetChannel_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field channel_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_THRESHOLD_ISSET_ID);
  }

  public void setChannel_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_THRESHOLD_ISSET_ID, value);
  }

  public int getCap_stat() {
    return this.cap_stat;
  }

  public CapChannelConfig setCap_stat(int cap_stat) {
    this.cap_stat = cap_stat;
    setCap_statIsSet(true);
    return this;
  }

  public void unsetCap_stat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CAP_STAT_ISSET_ID);
  }

  /** Returns true if field cap_stat is set (has been assigned a value) and false otherwise */
  public boolean isSetCap_stat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CAP_STAT_ISSET_ID);
  }

  public void setCap_statIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CAP_STAT_ISSET_ID, value);
  }

  public int getZoom() {
    return this.zoom;
  }

  public CapChannelConfig setZoom(int zoom) {
    this.zoom = zoom;
    setZoomIsSet(true);
    return this;
  }

  public void unsetZoom() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ZOOM_ISSET_ID);
  }

  /** Returns true if field zoom is set (has been assigned a value) and false otherwise */
  public boolean isSetZoom() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ZOOM_ISSET_ID);
  }

  public void setZoomIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ZOOM_ISSET_ID, value);
  }

  public int getMax_face_count() {
    return this.max_face_count;
  }

  public CapChannelConfig setMax_face_count(int max_face_count) {
    this.max_face_count = max_face_count;
    setMax_face_countIsSet(true);
    return this;
  }

  public void unsetMax_face_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_FACE_COUNT_ISSET_ID);
  }

  /** Returns true if field max_face_count is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_face_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_FACE_COUNT_ISSET_ID);
  }

  public void setMax_face_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_FACE_COUNT_ISSET_ID, value);
  }

  public boolean isFace_merge() {
    return this.face_merge;
  }

  public CapChannelConfig setFace_merge(boolean face_merge) {
    this.face_merge = face_merge;
    setFace_mergeIsSet(true);
    return this;
  }

  public void unsetFace_merge() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FACE_MERGE_ISSET_ID);
  }

  /** Returns true if field face_merge is set (has been assigned a value) and false otherwise */
  public boolean isSetFace_merge() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FACE_MERGE_ISSET_ID);
  }

  public void setFace_mergeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FACE_MERGE_ISSET_ID, value);
  }

  public boolean isMerge_all() {
    return this.merge_all;
  }

  public CapChannelConfig setMerge_all(boolean merge_all) {
    this.merge_all = merge_all;
    setMerge_allIsSet(true);
    return this;
  }

  public void unsetMerge_all() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MERGE_ALL_ISSET_ID);
  }

  /** Returns true if field merge_all is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_all() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MERGE_ALL_ISSET_ID);
  }

  public void setMerge_allIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MERGE_ALL_ISSET_ID, value);
  }

  public double getMerge_threshold() {
    return this.merge_threshold;
  }

  public CapChannelConfig setMerge_threshold(double merge_threshold) {
    this.merge_threshold = merge_threshold;
    setMerge_thresholdIsSet(true);
    return this;
  }

  public void unsetMerge_threshold() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MERGE_THRESHOLD_ISSET_ID);
  }

  /** Returns true if field merge_threshold is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_threshold() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MERGE_THRESHOLD_ISSET_ID);
  }

  public void setMerge_thresholdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MERGE_THRESHOLD_ISSET_ID, value);
  }

  public int getMerge_time_out() {
    return this.merge_time_out;
  }

  public CapChannelConfig setMerge_time_out(int merge_time_out) {
    this.merge_time_out = merge_time_out;
    setMerge_time_outIsSet(true);
    return this;
  }

  public void unsetMerge_time_out() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MERGE_TIME_OUT_ISSET_ID);
  }

  /** Returns true if field merge_time_out is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_time_out() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MERGE_TIME_OUT_ISSET_ID);
  }

  public void setMerge_time_outIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MERGE_TIME_OUT_ISSET_ID, value);
  }

  public java.lang.String getChannel_guid() {
    return this.channel_guid;
  }

  public CapChannelConfig setChannel_guid(java.lang.String channel_guid) {
    this.channel_guid = channel_guid;
    return this;
  }

  public void unsetChannel_guid() {
    this.channel_guid = null;
  }

  /** Returns true if field channel_guid is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_guid() {
    return this.channel_guid != null;
  }

  public void setChannel_guidIsSet(boolean value) {
    if (!value) {
      this.channel_guid = null;
    }
  }

  public double getChannel_longitude() {
    return this.channel_longitude;
  }

  public CapChannelConfig setChannel_longitude(double channel_longitude) {
    this.channel_longitude = channel_longitude;
    setChannel_longitudeIsSet(true);
    return this;
  }

  public void unsetChannel_longitude() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_LONGITUDE_ISSET_ID);
  }

  /** Returns true if field channel_longitude is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_longitude() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_LONGITUDE_ISSET_ID);
  }

  public void setChannel_longitudeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_LONGITUDE_ISSET_ID, value);
  }

  public double getChannel_latitude() {
    return this.channel_latitude;
  }

  public CapChannelConfig setChannel_latitude(double channel_latitude) {
    this.channel_latitude = channel_latitude;
    setChannel_latitudeIsSet(true);
    return this;
  }

  public void unsetChannel_latitude() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_LATITUDE_ISSET_ID);
  }

  /** Returns true if field channel_latitude is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_latitude() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_LATITUDE_ISSET_ID);
  }

  public void setChannel_latitudeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_LATITUDE_ISSET_ID, value);
  }

  public int getChannel_direct() {
    return this.channel_direct;
  }

  public CapChannelConfig setChannel_direct(int channel_direct) {
    this.channel_direct = channel_direct;
    setChannel_directIsSet(true);
    return this;
  }

  public void unsetChannel_direct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANNEL_DIRECT_ISSET_ID);
  }

  /** Returns true if field channel_direct is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_direct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANNEL_DIRECT_ISSET_ID);
  }

  public void setChannel_directIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANNEL_DIRECT_ISSET_ID, value);
  }

  public java.lang.String getChannel_area() {
    return this.channel_area;
  }

  public CapChannelConfig setChannel_area(java.lang.String channel_area) {
    this.channel_area = channel_area;
    return this;
  }

  public void unsetChannel_area() {
    this.channel_area = null;
  }

  /** Returns true if field channel_area is set (has been assigned a value) and false otherwise */
  public boolean isSetChannel_area() {
    return this.channel_area != null;
  }

  public void setChannel_areaIsSet(boolean value) {
    if (!value) {
      this.channel_area = null;
    }
  }

  public int getImportant() {
    return this.important;
  }

  public CapChannelConfig setImportant(int important) {
    this.important = important;
    setImportantIsSet(true);
    return this;
  }

  public void unsetImportant() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IMPORTANT_ISSET_ID);
  }

  /** Returns true if field important is set (has been assigned a value) and false otherwise */
  public boolean isSetImportant() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IMPORTANT_ISSET_ID);
  }

  public void setImportantIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IMPORTANT_ISSET_ID, value);
  }

  public java.lang.String getStrReserve() {
    return this.strReserve;
  }

  public CapChannelConfig setStrReserve(java.lang.String strReserve) {
    this.strReserve = strReserve;
    return this;
  }

  public void unsetStrReserve() {
    this.strReserve = null;
  }

  /** Returns true if field strReserve is set (has been assigned a value) and false otherwise */
  public boolean isSetStrReserve() {
    return this.strReserve != null;
  }

  public void setStrReserveIsSet(boolean value) {
    if (!value) {
      this.strReserve = null;
    }
  }

  public int getMax_yaw() {
    return this.max_yaw;
  }

  public CapChannelConfig setMax_yaw(int max_yaw) {
    this.max_yaw = max_yaw;
    setMax_yawIsSet(true);
    return this;
  }

  public void unsetMax_yaw() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_YAW_ISSET_ID);
  }

  /** Returns true if field max_yaw is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_yaw() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_YAW_ISSET_ID);
  }

  public void setMax_yawIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_YAW_ISSET_ID, value);
  }

  public int getMax_pitch() {
    return this.max_pitch;
  }

  public CapChannelConfig setMax_pitch(int max_pitch) {
    this.max_pitch = max_pitch;
    setMax_pitchIsSet(true);
    return this;
  }

  public void unsetMax_pitch() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_PITCH_ISSET_ID);
  }

  /** Returns true if field max_pitch is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_pitch() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_PITCH_ISSET_ID);
  }

  public void setMax_pitchIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_PITCH_ISSET_ID, value);
  }

  public int getMax_roll() {
    return this.max_roll;
  }

  public CapChannelConfig setMax_roll(int max_roll) {
    this.max_roll = max_roll;
    setMax_rollIsSet(true);
    return this;
  }

  public void unsetMax_roll() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_ROLL_ISSET_ID);
  }

  /** Returns true if field max_roll is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_roll() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_ROLL_ISSET_ID);
  }

  public void setMax_rollIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_ROLL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case CHANNEL_UID:
      if (value == null) {
        unsetChannel_uid();
      } else {
        setChannel_uid((java.lang.String)value);
      }
      break;

    case CHANNEL_PSW:
      if (value == null) {
        unsetChannel_psw();
      } else {
        setChannel_psw((java.lang.String)value);
      }
      break;

    case CHANNEL_NAME:
      if (value == null) {
        unsetChannel_name();
      } else {
        setChannel_name((java.lang.String)value);
      }
      break;

    case CHANNEL_ADDR:
      if (value == null) {
        unsetChannel_addr();
      } else {
        setChannel_addr((java.lang.String)value);
      }
      break;

    case CHANNEL_PORT:
      if (value == null) {
        unsetChannel_port();
      } else {
        setChannel_port((java.lang.Integer)value);
      }
      break;

    case CHANNEL_NO:
      if (value == null) {
        unsetChannel_no();
      } else {
        setChannel_no((java.lang.String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unsetChannel_type();
      } else {
        setChannel_type((java.lang.Integer)value);
      }
      break;

    case PROTOCOL:
      if (value == null) {
        unsetProtocol();
      } else {
        setProtocol((java.lang.Integer)value);
      }
      break;

    case MIN_FACE_WIDTH:
      if (value == null) {
        unsetMin_face_width();
      } else {
        setMin_face_width((java.lang.Integer)value);
      }
      break;

    case MIN_IMG_QUALITY:
      if (value == null) {
        unsetMin_img_quality();
      } else {
        setMin_img_quality((java.lang.Integer)value);
      }
      break;

    case MIN_CAP_DISTANCE:
      if (value == null) {
        unsetMin_cap_distance();
      } else {
        setMin_cap_distance((java.lang.Integer)value);
      }
      break;

    case MIN_CONFIDENCE:
      if (value == null) {
        unsetMin_confidence();
      } else {
        setMin_confidence((java.lang.Double)value);
      }
      break;

    case CHANNEL_THRESHOLD:
      if (value == null) {
        unsetChannel_threshold();
      } else {
        setChannel_threshold((java.lang.Double)value);
      }
      break;

    case CAP_STAT:
      if (value == null) {
        unsetCap_stat();
      } else {
        setCap_stat((java.lang.Integer)value);
      }
      break;

    case ZOOM:
      if (value == null) {
        unsetZoom();
      } else {
        setZoom((java.lang.Integer)value);
      }
      break;

    case MAX_FACE_COUNT:
      if (value == null) {
        unsetMax_face_count();
      } else {
        setMax_face_count((java.lang.Integer)value);
      }
      break;

    case FACE_MERGE:
      if (value == null) {
        unsetFace_merge();
      } else {
        setFace_merge((java.lang.Boolean)value);
      }
      break;

    case MERGE_ALL:
      if (value == null) {
        unsetMerge_all();
      } else {
        setMerge_all((java.lang.Boolean)value);
      }
      break;

    case MERGE_THRESHOLD:
      if (value == null) {
        unsetMerge_threshold();
      } else {
        setMerge_threshold((java.lang.Double)value);
      }
      break;

    case MERGE_TIME_OUT:
      if (value == null) {
        unsetMerge_time_out();
      } else {
        setMerge_time_out((java.lang.Integer)value);
      }
      break;

    case CHANNEL_GUID:
      if (value == null) {
        unsetChannel_guid();
      } else {
        setChannel_guid((java.lang.String)value);
      }
      break;

    case CHANNEL_LONGITUDE:
      if (value == null) {
        unsetChannel_longitude();
      } else {
        setChannel_longitude((java.lang.Double)value);
      }
      break;

    case CHANNEL_LATITUDE:
      if (value == null) {
        unsetChannel_latitude();
      } else {
        setChannel_latitude((java.lang.Double)value);
      }
      break;

    case CHANNEL_DIRECT:
      if (value == null) {
        unsetChannel_direct();
      } else {
        setChannel_direct((java.lang.Integer)value);
      }
      break;

    case CHANNEL_AREA:
      if (value == null) {
        unsetChannel_area();
      } else {
        setChannel_area((java.lang.String)value);
      }
      break;

    case IMPORTANT:
      if (value == null) {
        unsetImportant();
      } else {
        setImportant((java.lang.Integer)value);
      }
      break;

    case STR_RESERVE:
      if (value == null) {
        unsetStrReserve();
      } else {
        setStrReserve((java.lang.String)value);
      }
      break;

    case MAX_YAW:
      if (value == null) {
        unsetMax_yaw();
      } else {
        setMax_yaw((java.lang.Integer)value);
      }
      break;

    case MAX_PITCH:
      if (value == null) {
        unsetMax_pitch();
      } else {
        setMax_pitch((java.lang.Integer)value);
      }
      break;

    case MAX_ROLL:
      if (value == null) {
        unsetMax_roll();
      } else {
        setMax_roll((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case CHANNEL_UID:
      return getChannel_uid();

    case CHANNEL_PSW:
      return getChannel_psw();

    case CHANNEL_NAME:
      return getChannel_name();

    case CHANNEL_ADDR:
      return getChannel_addr();

    case CHANNEL_PORT:
      return getChannel_port();

    case CHANNEL_NO:
      return getChannel_no();

    case CHANNEL_TYPE:
      return getChannel_type();

    case PROTOCOL:
      return getProtocol();

    case MIN_FACE_WIDTH:
      return getMin_face_width();

    case MIN_IMG_QUALITY:
      return getMin_img_quality();

    case MIN_CAP_DISTANCE:
      return getMin_cap_distance();

    case MIN_CONFIDENCE:
      return getMin_confidence();

    case CHANNEL_THRESHOLD:
      return getChannel_threshold();

    case CAP_STAT:
      return getCap_stat();

    case ZOOM:
      return getZoom();

    case MAX_FACE_COUNT:
      return getMax_face_count();

    case FACE_MERGE:
      return isFace_merge();

    case MERGE_ALL:
      return isMerge_all();

    case MERGE_THRESHOLD:
      return getMerge_threshold();

    case MERGE_TIME_OUT:
      return getMerge_time_out();

    case CHANNEL_GUID:
      return getChannel_guid();

    case CHANNEL_LONGITUDE:
      return getChannel_longitude();

    case CHANNEL_LATITUDE:
      return getChannel_latitude();

    case CHANNEL_DIRECT:
      return getChannel_direct();

    case CHANNEL_AREA:
      return getChannel_area();

    case IMPORTANT:
      return getImportant();

    case STR_RESERVE:
      return getStrReserve();

    case MAX_YAW:
      return getMax_yaw();

    case MAX_PITCH:
      return getMax_pitch();

    case MAX_ROLL:
      return getMax_roll();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case CHANNEL_UID:
      return isSetChannel_uid();
    case CHANNEL_PSW:
      return isSetChannel_psw();
    case CHANNEL_NAME:
      return isSetChannel_name();
    case CHANNEL_ADDR:
      return isSetChannel_addr();
    case CHANNEL_PORT:
      return isSetChannel_port();
    case CHANNEL_NO:
      return isSetChannel_no();
    case CHANNEL_TYPE:
      return isSetChannel_type();
    case PROTOCOL:
      return isSetProtocol();
    case MIN_FACE_WIDTH:
      return isSetMin_face_width();
    case MIN_IMG_QUALITY:
      return isSetMin_img_quality();
    case MIN_CAP_DISTANCE:
      return isSetMin_cap_distance();
    case MIN_CONFIDENCE:
      return isSetMin_confidence();
    case CHANNEL_THRESHOLD:
      return isSetChannel_threshold();
    case CAP_STAT:
      return isSetCap_stat();
    case ZOOM:
      return isSetZoom();
    case MAX_FACE_COUNT:
      return isSetMax_face_count();
    case FACE_MERGE:
      return isSetFace_merge();
    case MERGE_ALL:
      return isSetMerge_all();
    case MERGE_THRESHOLD:
      return isSetMerge_threshold();
    case MERGE_TIME_OUT:
      return isSetMerge_time_out();
    case CHANNEL_GUID:
      return isSetChannel_guid();
    case CHANNEL_LONGITUDE:
      return isSetChannel_longitude();
    case CHANNEL_LATITUDE:
      return isSetChannel_latitude();
    case CHANNEL_DIRECT:
      return isSetChannel_direct();
    case CHANNEL_AREA:
      return isSetChannel_area();
    case IMPORTANT:
      return isSetImportant();
    case STR_RESERVE:
      return isSetStrReserve();
    case MAX_YAW:
      return isSetMax_yaw();
    case MAX_PITCH:
      return isSetMax_pitch();
    case MAX_ROLL:
      return isSetMax_roll();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CapChannelConfig)
      return this.equals((CapChannelConfig)that);
    return false;
  }

  public boolean equals(CapChannelConfig that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_channel_uid = true && this.isSetChannel_uid();
    boolean that_present_channel_uid = true && that.isSetChannel_uid();
    if (this_present_channel_uid || that_present_channel_uid) {
      if (!(this_present_channel_uid && that_present_channel_uid))
        return false;
      if (!this.channel_uid.equals(that.channel_uid))
        return false;
    }

    boolean this_present_channel_psw = true && this.isSetChannel_psw();
    boolean that_present_channel_psw = true && that.isSetChannel_psw();
    if (this_present_channel_psw || that_present_channel_psw) {
      if (!(this_present_channel_psw && that_present_channel_psw))
        return false;
      if (!this.channel_psw.equals(that.channel_psw))
        return false;
    }

    boolean this_present_channel_name = true && this.isSetChannel_name();
    boolean that_present_channel_name = true && that.isSetChannel_name();
    if (this_present_channel_name || that_present_channel_name) {
      if (!(this_present_channel_name && that_present_channel_name))
        return false;
      if (!this.channel_name.equals(that.channel_name))
        return false;
    }

    boolean this_present_channel_addr = true && this.isSetChannel_addr();
    boolean that_present_channel_addr = true && that.isSetChannel_addr();
    if (this_present_channel_addr || that_present_channel_addr) {
      if (!(this_present_channel_addr && that_present_channel_addr))
        return false;
      if (!this.channel_addr.equals(that.channel_addr))
        return false;
    }

    boolean this_present_channel_port = true;
    boolean that_present_channel_port = true;
    if (this_present_channel_port || that_present_channel_port) {
      if (!(this_present_channel_port && that_present_channel_port))
        return false;
      if (this.channel_port != that.channel_port)
        return false;
    }

    boolean this_present_channel_no = true && this.isSetChannel_no();
    boolean that_present_channel_no = true && that.isSetChannel_no();
    if (this_present_channel_no || that_present_channel_no) {
      if (!(this_present_channel_no && that_present_channel_no))
        return false;
      if (!this.channel_no.equals(that.channel_no))
        return false;
    }

    boolean this_present_channel_type = true;
    boolean that_present_channel_type = true;
    if (this_present_channel_type || that_present_channel_type) {
      if (!(this_present_channel_type && that_present_channel_type))
        return false;
      if (this.channel_type != that.channel_type)
        return false;
    }

    boolean this_present_protocol = true;
    boolean that_present_protocol = true;
    if (this_present_protocol || that_present_protocol) {
      if (!(this_present_protocol && that_present_protocol))
        return false;
      if (this.protocol != that.protocol)
        return false;
    }

    boolean this_present_min_face_width = true;
    boolean that_present_min_face_width = true;
    if (this_present_min_face_width || that_present_min_face_width) {
      if (!(this_present_min_face_width && that_present_min_face_width))
        return false;
      if (this.min_face_width != that.min_face_width)
        return false;
    }

    boolean this_present_min_img_quality = true;
    boolean that_present_min_img_quality = true;
    if (this_present_min_img_quality || that_present_min_img_quality) {
      if (!(this_present_min_img_quality && that_present_min_img_quality))
        return false;
      if (this.min_img_quality != that.min_img_quality)
        return false;
    }

    boolean this_present_min_cap_distance = true;
    boolean that_present_min_cap_distance = true;
    if (this_present_min_cap_distance || that_present_min_cap_distance) {
      if (!(this_present_min_cap_distance && that_present_min_cap_distance))
        return false;
      if (this.min_cap_distance != that.min_cap_distance)
        return false;
    }

    boolean this_present_min_confidence = true;
    boolean that_present_min_confidence = true;
    if (this_present_min_confidence || that_present_min_confidence) {
      if (!(this_present_min_confidence && that_present_min_confidence))
        return false;
      if (this.min_confidence != that.min_confidence)
        return false;
    }

    boolean this_present_channel_threshold = true;
    boolean that_present_channel_threshold = true;
    if (this_present_channel_threshold || that_present_channel_threshold) {
      if (!(this_present_channel_threshold && that_present_channel_threshold))
        return false;
      if (this.channel_threshold != that.channel_threshold)
        return false;
    }

    boolean this_present_cap_stat = true;
    boolean that_present_cap_stat = true;
    if (this_present_cap_stat || that_present_cap_stat) {
      if (!(this_present_cap_stat && that_present_cap_stat))
        return false;
      if (this.cap_stat != that.cap_stat)
        return false;
    }

    boolean this_present_zoom = true;
    boolean that_present_zoom = true;
    if (this_present_zoom || that_present_zoom) {
      if (!(this_present_zoom && that_present_zoom))
        return false;
      if (this.zoom != that.zoom)
        return false;
    }

    boolean this_present_max_face_count = true;
    boolean that_present_max_face_count = true;
    if (this_present_max_face_count || that_present_max_face_count) {
      if (!(this_present_max_face_count && that_present_max_face_count))
        return false;
      if (this.max_face_count != that.max_face_count)
        return false;
    }

    boolean this_present_face_merge = true;
    boolean that_present_face_merge = true;
    if (this_present_face_merge || that_present_face_merge) {
      if (!(this_present_face_merge && that_present_face_merge))
        return false;
      if (this.face_merge != that.face_merge)
        return false;
    }

    boolean this_present_merge_all = true;
    boolean that_present_merge_all = true;
    if (this_present_merge_all || that_present_merge_all) {
      if (!(this_present_merge_all && that_present_merge_all))
        return false;
      if (this.merge_all != that.merge_all)
        return false;
    }

    boolean this_present_merge_threshold = true;
    boolean that_present_merge_threshold = true;
    if (this_present_merge_threshold || that_present_merge_threshold) {
      if (!(this_present_merge_threshold && that_present_merge_threshold))
        return false;
      if (this.merge_threshold != that.merge_threshold)
        return false;
    }

    boolean this_present_merge_time_out = true;
    boolean that_present_merge_time_out = true;
    if (this_present_merge_time_out || that_present_merge_time_out) {
      if (!(this_present_merge_time_out && that_present_merge_time_out))
        return false;
      if (this.merge_time_out != that.merge_time_out)
        return false;
    }

    boolean this_present_channel_guid = true && this.isSetChannel_guid();
    boolean that_present_channel_guid = true && that.isSetChannel_guid();
    if (this_present_channel_guid || that_present_channel_guid) {
      if (!(this_present_channel_guid && that_present_channel_guid))
        return false;
      if (!this.channel_guid.equals(that.channel_guid))
        return false;
    }

    boolean this_present_channel_longitude = true;
    boolean that_present_channel_longitude = true;
    if (this_present_channel_longitude || that_present_channel_longitude) {
      if (!(this_present_channel_longitude && that_present_channel_longitude))
        return false;
      if (this.channel_longitude != that.channel_longitude)
        return false;
    }

    boolean this_present_channel_latitude = true;
    boolean that_present_channel_latitude = true;
    if (this_present_channel_latitude || that_present_channel_latitude) {
      if (!(this_present_channel_latitude && that_present_channel_latitude))
        return false;
      if (this.channel_latitude != that.channel_latitude)
        return false;
    }

    boolean this_present_channel_direct = true;
    boolean that_present_channel_direct = true;
    if (this_present_channel_direct || that_present_channel_direct) {
      if (!(this_present_channel_direct && that_present_channel_direct))
        return false;
      if (this.channel_direct != that.channel_direct)
        return false;
    }

    boolean this_present_channel_area = true && this.isSetChannel_area();
    boolean that_present_channel_area = true && that.isSetChannel_area();
    if (this_present_channel_area || that_present_channel_area) {
      if (!(this_present_channel_area && that_present_channel_area))
        return false;
      if (!this.channel_area.equals(that.channel_area))
        return false;
    }

    boolean this_present_important = true;
    boolean that_present_important = true;
    if (this_present_important || that_present_important) {
      if (!(this_present_important && that_present_important))
        return false;
      if (this.important != that.important)
        return false;
    }

    boolean this_present_strReserve = true && this.isSetStrReserve();
    boolean that_present_strReserve = true && that.isSetStrReserve();
    if (this_present_strReserve || that_present_strReserve) {
      if (!(this_present_strReserve && that_present_strReserve))
        return false;
      if (!this.strReserve.equals(that.strReserve))
        return false;
    }

    boolean this_present_max_yaw = true;
    boolean that_present_max_yaw = true;
    if (this_present_max_yaw || that_present_max_yaw) {
      if (!(this_present_max_yaw && that_present_max_yaw))
        return false;
      if (this.max_yaw != that.max_yaw)
        return false;
    }

    boolean this_present_max_pitch = true;
    boolean that_present_max_pitch = true;
    if (this_present_max_pitch || that_present_max_pitch) {
      if (!(this_present_max_pitch && that_present_max_pitch))
        return false;
      if (this.max_pitch != that.max_pitch)
        return false;
    }

    boolean this_present_max_roll = true;
    boolean that_present_max_roll = true;
    if (this_present_max_roll || that_present_max_roll) {
      if (!(this_present_max_roll && that_present_max_roll))
        return false;
      if (this.max_roll != that.max_roll)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_uid()) ? 131071 : 524287);
    if (isSetChannel_uid())
      hashCode = hashCode * 8191 + channel_uid.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_psw()) ? 131071 : 524287);
    if (isSetChannel_psw())
      hashCode = hashCode * 8191 + channel_psw.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_name()) ? 131071 : 524287);
    if (isSetChannel_name())
      hashCode = hashCode * 8191 + channel_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetChannel_addr()) ? 131071 : 524287);
    if (isSetChannel_addr())
      hashCode = hashCode * 8191 + channel_addr.hashCode();

    hashCode = hashCode * 8191 + channel_port;

    hashCode = hashCode * 8191 + ((isSetChannel_no()) ? 131071 : 524287);
    if (isSetChannel_no())
      hashCode = hashCode * 8191 + channel_no.hashCode();

    hashCode = hashCode * 8191 + channel_type;

    hashCode = hashCode * 8191 + protocol;

    hashCode = hashCode * 8191 + min_face_width;

    hashCode = hashCode * 8191 + min_img_quality;

    hashCode = hashCode * 8191 + min_cap_distance;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_confidence);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(channel_threshold);

    hashCode = hashCode * 8191 + cap_stat;

    hashCode = hashCode * 8191 + zoom;

    hashCode = hashCode * 8191 + max_face_count;

    hashCode = hashCode * 8191 + ((face_merge) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((merge_all) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(merge_threshold);

    hashCode = hashCode * 8191 + merge_time_out;

    hashCode = hashCode * 8191 + ((isSetChannel_guid()) ? 131071 : 524287);
    if (isSetChannel_guid())
      hashCode = hashCode * 8191 + channel_guid.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(channel_longitude);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(channel_latitude);

    hashCode = hashCode * 8191 + channel_direct;

    hashCode = hashCode * 8191 + ((isSetChannel_area()) ? 131071 : 524287);
    if (isSetChannel_area())
      hashCode = hashCode * 8191 + channel_area.hashCode();

    hashCode = hashCode * 8191 + important;

    hashCode = hashCode * 8191 + ((isSetStrReserve()) ? 131071 : 524287);
    if (isSetStrReserve())
      hashCode = hashCode * 8191 + strReserve.hashCode();

    hashCode = hashCode * 8191 + max_yaw;

    hashCode = hashCode * 8191 + max_pitch;

    hashCode = hashCode * 8191 + max_roll;

    return hashCode;
  }

  @Override
  public int compareTo(CapChannelConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_uid()).compareTo(other.isSetChannel_uid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_uid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_uid, other.channel_uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_psw()).compareTo(other.isSetChannel_psw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_psw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_psw, other.channel_psw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_name()).compareTo(other.isSetChannel_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_name, other.channel_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_addr()).compareTo(other.isSetChannel_addr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_addr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_addr, other.channel_addr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_port()).compareTo(other.isSetChannel_port());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_port()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_port, other.channel_port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_no()).compareTo(other.isSetChannel_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_no, other.channel_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_type()).compareTo(other.isSetChannel_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_type, other.channel_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_face_width()).compareTo(other.isSetMin_face_width());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_face_width()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_face_width, other.min_face_width);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_img_quality()).compareTo(other.isSetMin_img_quality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_img_quality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_img_quality, other.min_img_quality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_cap_distance()).compareTo(other.isSetMin_cap_distance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_cap_distance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_cap_distance, other.min_cap_distance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_confidence()).compareTo(other.isSetMin_confidence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_confidence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_confidence, other.min_confidence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_threshold()).compareTo(other.isSetChannel_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_threshold, other.channel_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCap_stat()).compareTo(other.isSetCap_stat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCap_stat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cap_stat, other.cap_stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetZoom()).compareTo(other.isSetZoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoom()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoom, other.zoom);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_face_count()).compareTo(other.isSetMax_face_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_face_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_face_count, other.max_face_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFace_merge()).compareTo(other.isSetFace_merge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFace_merge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.face_merge, other.face_merge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerge_all()).compareTo(other.isSetMerge_all());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_all()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_all, other.merge_all);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerge_threshold()).compareTo(other.isSetMerge_threshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_threshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_threshold, other.merge_threshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerge_time_out()).compareTo(other.isSetMerge_time_out());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_time_out()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_time_out, other.merge_time_out);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_guid()).compareTo(other.isSetChannel_guid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_guid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_guid, other.channel_guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_longitude()).compareTo(other.isSetChannel_longitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_longitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_longitude, other.channel_longitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_latitude()).compareTo(other.isSetChannel_latitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_latitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_latitude, other.channel_latitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_direct()).compareTo(other.isSetChannel_direct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_direct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_direct, other.channel_direct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChannel_area()).compareTo(other.isSetChannel_area());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannel_area()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channel_area, other.channel_area);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImportant()).compareTo(other.isSetImportant());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportant()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.important, other.important);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStrReserve()).compareTo(other.isSetStrReserve());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrReserve()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strReserve, other.strReserve);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_yaw()).compareTo(other.isSetMax_yaw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_yaw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_yaw, other.max_yaw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_pitch()).compareTo(other.isSetMax_pitch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_pitch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_pitch, other.max_pitch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_roll()).compareTo(other.isSetMax_roll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_roll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_roll, other.max_roll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CapChannelConfig(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_uid:");
    if (this.channel_uid == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_uid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_psw:");
    if (this.channel_psw == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_psw);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_name:");
    if (this.channel_name == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_addr:");
    if (this.channel_addr == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_addr);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_port:");
    sb.append(this.channel_port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_no:");
    if (this.channel_no == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_no);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_type:");
    sb.append(this.channel_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocol:");
    sb.append(this.protocol);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_face_width:");
    sb.append(this.min_face_width);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_img_quality:");
    sb.append(this.min_img_quality);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_cap_distance:");
    sb.append(this.min_cap_distance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_confidence:");
    sb.append(this.min_confidence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_threshold:");
    sb.append(this.channel_threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cap_stat:");
    sb.append(this.cap_stat);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zoom:");
    sb.append(this.zoom);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_face_count:");
    sb.append(this.max_face_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("face_merge:");
    sb.append(this.face_merge);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_all:");
    sb.append(this.merge_all);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_threshold:");
    sb.append(this.merge_threshold);
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_time_out:");
    sb.append(this.merge_time_out);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_guid:");
    if (this.channel_guid == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_guid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_longitude:");
    sb.append(this.channel_longitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_latitude:");
    sb.append(this.channel_latitude);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_direct:");
    sb.append(this.channel_direct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channel_area:");
    if (this.channel_area == null) {
      sb.append("null");
    } else {
      sb.append(this.channel_area);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("important:");
    sb.append(this.important);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strReserve:");
    if (this.strReserve == null) {
      sb.append("null");
    } else {
      sb.append(this.strReserve);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_yaw:");
    sb.append(this.max_yaw);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_pitch:");
    sb.append(this.max_pitch);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_roll:");
    sb.append(this.max_roll);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CapChannelConfigStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapChannelConfigStandardScheme getScheme() {
      return new CapChannelConfigStandardScheme();
    }
  }

  private static class CapChannelConfigStandardScheme extends org.apache.thrift.scheme.StandardScheme<CapChannelConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CapChannelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHANNEL_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_uid = iprot.readString();
              struct.setChannel_uidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_PSW
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_psw = iprot.readString();
              struct.setChannel_pswIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_name = iprot.readString();
              struct.setChannel_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHANNEL_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_addr = iprot.readString();
              struct.setChannel_addrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHANNEL_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_port = iprot.readI32();
              struct.setChannel_portIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHANNEL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_no = iprot.readString();
              struct.setChannel_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_type = iprot.readI32();
              struct.setChannel_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocol = iprot.readI32();
              struct.setProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MIN_FACE_WIDTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_face_width = iprot.readI32();
              struct.setMin_face_widthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MIN_IMG_QUALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_img_quality = iprot.readI32();
              struct.setMin_img_qualityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MIN_CAP_DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min_cap_distance = iprot.readI32();
              struct.setMin_cap_distanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MIN_CONFIDENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.min_confidence = iprot.readDouble();
              struct.setMin_confidenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CHANNEL_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.channel_threshold = iprot.readDouble();
              struct.setChannel_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CAP_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cap_stat = iprot.readI32();
              struct.setCap_statIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ZOOM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.zoom = iprot.readI32();
              struct.setZoomIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_FACE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_face_count = iprot.readI32();
              struct.setMax_face_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FACE_MERGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.face_merge = iprot.readBool();
              struct.setFace_mergeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MERGE_ALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.merge_all = iprot.readBool();
              struct.setMerge_allIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MERGE_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.merge_threshold = iprot.readDouble();
              struct.setMerge_thresholdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // MERGE_TIME_OUT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merge_time_out = iprot.readI32();
              struct.setMerge_time_outIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CHANNEL_GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_guid = iprot.readString();
              struct.setChannel_guidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CHANNEL_LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.channel_longitude = iprot.readDouble();
              struct.setChannel_longitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CHANNEL_LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.channel_latitude = iprot.readDouble();
              struct.setChannel_latitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CHANNEL_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channel_direct = iprot.readI32();
              struct.setChannel_directIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // CHANNEL_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channel_area = iprot.readString();
              struct.setChannel_areaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // IMPORTANT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.important = iprot.readI32();
              struct.setImportantIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // STR_RESERVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.strReserve = iprot.readString();
              struct.setStrReserveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // MAX_YAW
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_yaw = iprot.readI32();
              struct.setMax_yawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // MAX_PITCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_pitch = iprot.readI32();
              struct.setMax_pitchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // MAX_ROLL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.max_roll = iprot.readI32();
              struct.setMax_rollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CapChannelConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.channel_uid != null) {
        oprot.writeFieldBegin(CHANNEL_UID_FIELD_DESC);
        oprot.writeString(struct.channel_uid);
        oprot.writeFieldEnd();
      }
      if (struct.channel_psw != null) {
        oprot.writeFieldBegin(CHANNEL_PSW_FIELD_DESC);
        oprot.writeString(struct.channel_psw);
        oprot.writeFieldEnd();
      }
      if (struct.channel_name != null) {
        oprot.writeFieldBegin(CHANNEL_NAME_FIELD_DESC);
        oprot.writeString(struct.channel_name);
        oprot.writeFieldEnd();
      }
      if (struct.channel_addr != null) {
        oprot.writeFieldBegin(CHANNEL_ADDR_FIELD_DESC);
        oprot.writeString(struct.channel_addr);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_PORT_FIELD_DESC);
      oprot.writeI32(struct.channel_port);
      oprot.writeFieldEnd();
      if (struct.channel_no != null) {
        oprot.writeFieldBegin(CHANNEL_NO_FIELD_DESC);
        oprot.writeString(struct.channel_no);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
      oprot.writeI32(struct.channel_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
      oprot.writeI32(struct.protocol);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FACE_WIDTH_FIELD_DESC);
      oprot.writeI32(struct.min_face_width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_IMG_QUALITY_FIELD_DESC);
      oprot.writeI32(struct.min_img_quality);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_CAP_DISTANCE_FIELD_DESC);
      oprot.writeI32(struct.min_cap_distance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_CONFIDENCE_FIELD_DESC);
      oprot.writeDouble(struct.min_confidence);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct.channel_threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CAP_STAT_FIELD_DESC);
      oprot.writeI32(struct.cap_stat);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZOOM_FIELD_DESC);
      oprot.writeI32(struct.zoom);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_FACE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.max_face_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FACE_MERGE_FIELD_DESC);
      oprot.writeBool(struct.face_merge);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERGE_ALL_FIELD_DESC);
      oprot.writeBool(struct.merge_all);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERGE_THRESHOLD_FIELD_DESC);
      oprot.writeDouble(struct.merge_threshold);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MERGE_TIME_OUT_FIELD_DESC);
      oprot.writeI32(struct.merge_time_out);
      oprot.writeFieldEnd();
      if (struct.channel_guid != null) {
        oprot.writeFieldBegin(CHANNEL_GUID_FIELD_DESC);
        oprot.writeString(struct.channel_guid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CHANNEL_LONGITUDE_FIELD_DESC);
      oprot.writeDouble(struct.channel_longitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_LATITUDE_FIELD_DESC);
      oprot.writeDouble(struct.channel_latitude);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_DIRECT_FIELD_DESC);
      oprot.writeI32(struct.channel_direct);
      oprot.writeFieldEnd();
      if (struct.channel_area != null) {
        oprot.writeFieldBegin(CHANNEL_AREA_FIELD_DESC);
        oprot.writeString(struct.channel_area);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMPORTANT_FIELD_DESC);
      oprot.writeI32(struct.important);
      oprot.writeFieldEnd();
      if (struct.strReserve != null) {
        oprot.writeFieldBegin(STR_RESERVE_FIELD_DESC);
        oprot.writeString(struct.strReserve);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_YAW_FIELD_DESC);
      oprot.writeI32(struct.max_yaw);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_PITCH_FIELD_DESC);
      oprot.writeI32(struct.max_pitch);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_ROLL_FIELD_DESC);
      oprot.writeI32(struct.max_roll);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CapChannelConfigTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CapChannelConfigTupleScheme getScheme() {
      return new CapChannelConfigTupleScheme();
    }
  }

  private static class CapChannelConfigTupleScheme extends org.apache.thrift.scheme.TupleScheme<CapChannelConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CapChannelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetChannel_uid()) {
        optionals.set(1);
      }
      if (struct.isSetChannel_psw()) {
        optionals.set(2);
      }
      if (struct.isSetChannel_name()) {
        optionals.set(3);
      }
      if (struct.isSetChannel_addr()) {
        optionals.set(4);
      }
      if (struct.isSetChannel_port()) {
        optionals.set(5);
      }
      if (struct.isSetChannel_no()) {
        optionals.set(6);
      }
      if (struct.isSetChannel_type()) {
        optionals.set(7);
      }
      if (struct.isSetProtocol()) {
        optionals.set(8);
      }
      if (struct.isSetMin_face_width()) {
        optionals.set(9);
      }
      if (struct.isSetMin_img_quality()) {
        optionals.set(10);
      }
      if (struct.isSetMin_cap_distance()) {
        optionals.set(11);
      }
      if (struct.isSetMin_confidence()) {
        optionals.set(12);
      }
      if (struct.isSetChannel_threshold()) {
        optionals.set(13);
      }
      if (struct.isSetCap_stat()) {
        optionals.set(14);
      }
      if (struct.isSetZoom()) {
        optionals.set(15);
      }
      if (struct.isSetMax_face_count()) {
        optionals.set(16);
      }
      if (struct.isSetFace_merge()) {
        optionals.set(17);
      }
      if (struct.isSetMerge_all()) {
        optionals.set(18);
      }
      if (struct.isSetMerge_threshold()) {
        optionals.set(19);
      }
      if (struct.isSetMerge_time_out()) {
        optionals.set(20);
      }
      if (struct.isSetChannel_guid()) {
        optionals.set(21);
      }
      if (struct.isSetChannel_longitude()) {
        optionals.set(22);
      }
      if (struct.isSetChannel_latitude()) {
        optionals.set(23);
      }
      if (struct.isSetChannel_direct()) {
        optionals.set(24);
      }
      if (struct.isSetChannel_area()) {
        optionals.set(25);
      }
      if (struct.isSetImportant()) {
        optionals.set(26);
      }
      if (struct.isSetStrReserve()) {
        optionals.set(27);
      }
      if (struct.isSetMax_yaw()) {
        optionals.set(28);
      }
      if (struct.isSetMax_pitch()) {
        optionals.set(29);
      }
      if (struct.isSetMax_roll()) {
        optionals.set(30);
      }
      oprot.writeBitSet(optionals, 31);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetChannel_uid()) {
        oprot.writeString(struct.channel_uid);
      }
      if (struct.isSetChannel_psw()) {
        oprot.writeString(struct.channel_psw);
      }
      if (struct.isSetChannel_name()) {
        oprot.writeString(struct.channel_name);
      }
      if (struct.isSetChannel_addr()) {
        oprot.writeString(struct.channel_addr);
      }
      if (struct.isSetChannel_port()) {
        oprot.writeI32(struct.channel_port);
      }
      if (struct.isSetChannel_no()) {
        oprot.writeString(struct.channel_no);
      }
      if (struct.isSetChannel_type()) {
        oprot.writeI32(struct.channel_type);
      }
      if (struct.isSetProtocol()) {
        oprot.writeI32(struct.protocol);
      }
      if (struct.isSetMin_face_width()) {
        oprot.writeI32(struct.min_face_width);
      }
      if (struct.isSetMin_img_quality()) {
        oprot.writeI32(struct.min_img_quality);
      }
      if (struct.isSetMin_cap_distance()) {
        oprot.writeI32(struct.min_cap_distance);
      }
      if (struct.isSetMin_confidence()) {
        oprot.writeDouble(struct.min_confidence);
      }
      if (struct.isSetChannel_threshold()) {
        oprot.writeDouble(struct.channel_threshold);
      }
      if (struct.isSetCap_stat()) {
        oprot.writeI32(struct.cap_stat);
      }
      if (struct.isSetZoom()) {
        oprot.writeI32(struct.zoom);
      }
      if (struct.isSetMax_face_count()) {
        oprot.writeI32(struct.max_face_count);
      }
      if (struct.isSetFace_merge()) {
        oprot.writeBool(struct.face_merge);
      }
      if (struct.isSetMerge_all()) {
        oprot.writeBool(struct.merge_all);
      }
      if (struct.isSetMerge_threshold()) {
        oprot.writeDouble(struct.merge_threshold);
      }
      if (struct.isSetMerge_time_out()) {
        oprot.writeI32(struct.merge_time_out);
      }
      if (struct.isSetChannel_guid()) {
        oprot.writeString(struct.channel_guid);
      }
      if (struct.isSetChannel_longitude()) {
        oprot.writeDouble(struct.channel_longitude);
      }
      if (struct.isSetChannel_latitude()) {
        oprot.writeDouble(struct.channel_latitude);
      }
      if (struct.isSetChannel_direct()) {
        oprot.writeI32(struct.channel_direct);
      }
      if (struct.isSetChannel_area()) {
        oprot.writeString(struct.channel_area);
      }
      if (struct.isSetImportant()) {
        oprot.writeI32(struct.important);
      }
      if (struct.isSetStrReserve()) {
        oprot.writeString(struct.strReserve);
      }
      if (struct.isSetMax_yaw()) {
        oprot.writeI32(struct.max_yaw);
      }
      if (struct.isSetMax_pitch()) {
        oprot.writeI32(struct.max_pitch);
      }
      if (struct.isSetMax_roll()) {
        oprot.writeI32(struct.max_roll);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CapChannelConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(31);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.channel_uid = iprot.readString();
        struct.setChannel_uidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.channel_psw = iprot.readString();
        struct.setChannel_pswIsSet(true);
      }
      if (incoming.get(3)) {
        struct.channel_name = iprot.readString();
        struct.setChannel_nameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channel_addr = iprot.readString();
        struct.setChannel_addrIsSet(true);
      }
      if (incoming.get(5)) {
        struct.channel_port = iprot.readI32();
        struct.setChannel_portIsSet(true);
      }
      if (incoming.get(6)) {
        struct.channel_no = iprot.readString();
        struct.setChannel_noIsSet(true);
      }
      if (incoming.get(7)) {
        struct.channel_type = iprot.readI32();
        struct.setChannel_typeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.protocol = iprot.readI32();
        struct.setProtocolIsSet(true);
      }
      if (incoming.get(9)) {
        struct.min_face_width = iprot.readI32();
        struct.setMin_face_widthIsSet(true);
      }
      if (incoming.get(10)) {
        struct.min_img_quality = iprot.readI32();
        struct.setMin_img_qualityIsSet(true);
      }
      if (incoming.get(11)) {
        struct.min_cap_distance = iprot.readI32();
        struct.setMin_cap_distanceIsSet(true);
      }
      if (incoming.get(12)) {
        struct.min_confidence = iprot.readDouble();
        struct.setMin_confidenceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.channel_threshold = iprot.readDouble();
        struct.setChannel_thresholdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cap_stat = iprot.readI32();
        struct.setCap_statIsSet(true);
      }
      if (incoming.get(15)) {
        struct.zoom = iprot.readI32();
        struct.setZoomIsSet(true);
      }
      if (incoming.get(16)) {
        struct.max_face_count = iprot.readI32();
        struct.setMax_face_countIsSet(true);
      }
      if (incoming.get(17)) {
        struct.face_merge = iprot.readBool();
        struct.setFace_mergeIsSet(true);
      }
      if (incoming.get(18)) {
        struct.merge_all = iprot.readBool();
        struct.setMerge_allIsSet(true);
      }
      if (incoming.get(19)) {
        struct.merge_threshold = iprot.readDouble();
        struct.setMerge_thresholdIsSet(true);
      }
      if (incoming.get(20)) {
        struct.merge_time_out = iprot.readI32();
        struct.setMerge_time_outIsSet(true);
      }
      if (incoming.get(21)) {
        struct.channel_guid = iprot.readString();
        struct.setChannel_guidIsSet(true);
      }
      if (incoming.get(22)) {
        struct.channel_longitude = iprot.readDouble();
        struct.setChannel_longitudeIsSet(true);
      }
      if (incoming.get(23)) {
        struct.channel_latitude = iprot.readDouble();
        struct.setChannel_latitudeIsSet(true);
      }
      if (incoming.get(24)) {
        struct.channel_direct = iprot.readI32();
        struct.setChannel_directIsSet(true);
      }
      if (incoming.get(25)) {
        struct.channel_area = iprot.readString();
        struct.setChannel_areaIsSet(true);
      }
      if (incoming.get(26)) {
        struct.important = iprot.readI32();
        struct.setImportantIsSet(true);
      }
      if (incoming.get(27)) {
        struct.strReserve = iprot.readString();
        struct.setStrReserveIsSet(true);
      }
      if (incoming.get(28)) {
        struct.max_yaw = iprot.readI32();
        struct.setMax_yawIsSet(true);
      }
      if (incoming.get(29)) {
        struct.max_pitch = iprot.readI32();
        struct.setMax_pitchIsSet(true);
      }
      if (incoming.get(30)) {
        struct.max_roll = iprot.readI32();
        struct.setMax_rollIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

